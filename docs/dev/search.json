[{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/CONTRIBUTING.html","id":"use-the-issue-tracker","dir":"","previous_headings":"","what":"Use the issue tracker","title":"How you can contribute to mizer development","text":"question mizer, problem using mizer, report bug mizer, idea something added made better mizer, please hesitate letting us know creating new issue https://github.com/sizespectrum/mizer/issues/. can drop us line mizer@sizespectrum.org make post size-spectrum discussion group.","code":""},{"path":"https://sizespectrum.org/mizer/dev/CONTRIBUTING.html","id":"improve-the-documentation","dir":"","previous_headings":"","what":"Improve the documentation","title":"How you can contribute to mizer development","text":"Errors, shortcomings comment documentation can also submited issue issue tracker. case know correct error make improvement , can also help us editing page. top documentation pages link page source GitHub. page “Edit file” button looks like pencil. Click edit page. save edits GitHub guides process creating pull request edits, make super-easy us merge suggestions. even small contributions like removal simple typo welcome.","code":""},{"path":"https://sizespectrum.org/mizer/dev/CONTRIBUTING.html","id":"contribute-an-example","dir":"","previous_headings":"","what":"Contribute an example","title":"How you can contribute to mizer development","text":"set mizer model area interest research question, please share us. best place MizerExamples package. Start creating issue package’s issue tracker just send email mizer@sizespectrum.org. discuss best integrate example package make useful others.","code":""},{"path":"https://sizespectrum.org/mizer/dev/CONTRIBUTING.html","id":"contribute-code","dir":"","previous_headings":"","what":"Contribute code","title":"How you can contribute to mizer development","text":"happy receive pull requests new code bug fix. contribution appreciated community. new feature, best place submit pull request MizerExperimental package. feature can mature ready incorporated either core mizer package one extension packages.","code":""},{"path":"https://sizespectrum.org/mizer/dev/CONTRIBUTING.html","id":"increase-mizer-usage-and-awareness","dir":"","previous_headings":"","what":"Increase mizer usage and awareness","title":"How you can contribute to mizer development","text":"forget mention use mizer documents publications. Use get citation info main reference mizer. can also link website https://sizespectrum.org/mizer/ readers can find project.","code":"citation('mizer')"},{"path":"https://sizespectrum.org/mizer/dev/articles/a_multispecies_model_of_the_north_sea.html","id":"setting-up-the-north-sea-model","dir":"Articles","previous_headings":"","what":"Setting up the North Sea model","title":"A Multi-Species Model of the North Sea","text":"first job set MizerParams object North Sea model. previous multispecies examples already using life-history parameters interaction matrix North Sea model. use make changes. particular set fishing gears differently. species model : Sprat, Sandeel, N.pout, Herring, Dab, Whiting, Sole, Gurnard, Plaice, Haddock, Cod, Saithe, account 90% total biomass species sampled research trawl surveys North Sea. NS_species_params object comes example mizer package data.frame columns species, w_inf, w_mat, beta, sigma, k_vb R_max. seen columns species data.frame sufficient make MizerParams object. missing columns filled default values MizerParams constructor. example, data.frame include columns h gamma. means estimated using k_vb column. use default density dependence reproduction rate, Beverton-Holt shape. requires column R_max species data.frame contains maximum reproduction rate species. column already NS_species_params data.frame. values found calibration process covered described separate tutorial. moment providing information selectivity gears species. default, selectivity function knife-edge takes single argument, knife_edge_size. model want selectivity pattern sigmoid shape accurately reflects selectivity pattern trawlers North Sea. sigmoid selectivity function expressed terms length rather weight uses parameters l25 l50, lengths 25% 50% stock selected. length based sigmoid selectivity looks like: \\[\\begin{equation} %     {#eq:trawl_sel}     S_l = \\frac{1}{1 + \\exp(S1 - S2\\ l)} \\end{equation}\\] \\(l\\) length individual, \\(S_l\\) selectivity length, \\(S2 = \\log(3) / (l50 - l25)\\) \\(S1 = l50 \\cdot S2\\). selectivity function included mizer sigmoid_length(). can see help page details. mizer model weight based, selectivity function length based, uses length-weight parameters b convert length weight using standard relation \\(w = l^b\\). species parameters need added columns NS_species_params data frame. sigmoid_length() arguments l25 l50. explained section fishing gears selectivity, arguments selectivity function need gear parameter data frame. also need column specifying name selectivity function wish use. Note probably easier put data *.csv file read rather type hand like : Note set gear column species caught separate gear named species. model interested projecting forward using historical fishing mortalities. historical fishing mortality 1967 2010 species stored csv file NS_f_history.csv included package. , can use read.csv() read data. reads data data.frame. want matrix use () function: can take look first years data: Fishing mortality calculated product selectivity, catchability fishing effort. values f_history absolute levels fishing mortality. seen fishing mortality mizer simulations driven fishing effort argument passed project() function. Therefore want project forward historical fishing levels, need provide project() effort values result historical fishing mortality levels. One model parameters really considered far catchability. Catchability scalar parameter used modify fishing mortality size given selectivity size effort fishing gear. default catchability value 1, meaning effort 1 results fishing mortality 1 fully selected species. considering historical fishing mortality, one option therefore leave catchability 1 species use f_history matrix fishing effort. However, alternative method use effort relative chosen reference year. can make effort levels used model meaningful. use year 1990 reference year. set catchability species fishing mortality 1990 effort 1 1990 result fishing mortality 1990. effort years relative effort 1990. Considering model parameters, use default values parameters apart kappa, carrying capacity resource spectrum (see see section resource density). estimated along values R_max part calibration process. now information need create MizerParams object using species parameters data.frame.","code":"NS_species_params ##    species   w_inf w_mat   beta sigma  k_vb    R_max ## 1    Sprat    33.0    13  51076   0.8 0.681 7.38e+11 ## 2  Sandeel    36.0     4 398849   1.9 1.000 4.10e+11 ## 3   N.pout   100.0    23     22   1.5 0.849 1.05e+13 ## 4  Herring   334.0    99 280540   3.2 0.606 1.11e+12 ## 5      Dab   324.0    21    191   1.9 0.536 1.12e+10 ## 6  Whiting  1192.0    75     22   1.5 0.323 5.48e+11 ## 7     Sole   866.0    78    381   1.9 0.284 3.87e+10 ## 8  Gurnard   668.0    39    283   1.8 0.266 1.65e+12 ## 9   Plaice  2976.0   105    113   1.6 0.122 4.08e+14 ## 10 Haddock  4316.5   165    558   2.1 0.271 1.84e+12 ## 11     Cod 39851.3  1606     66   1.3 0.216 8.26e+09 ## 12  Saithe 39658.6  1076     40   1.1 0.175 1.12e+11 NS_species_params$a <- c(0.007, 0.001, 0.009, 0.002, 0.010, 0.006, 0.008, 0.004,                       0.007, 0.005, 0.005, 0.007) NS_species_params$b <- c(3.014, 3.320, 2.941, 3.429, 2.986, 3.080, 3.019, 3.198,                       3.101, 3.160, 3.173, 3.075) gear_params <-      data.frame(species = NS_species_params$species,                gear = NS_species_params$species,                sel_func = \"sigmoid_length\",                l25 =  c(7.6, 9.8, 8.7, 10.1, 11.5, 19.8, 16.4, 19.8, 11.5,                         19.1, 13.2, 35.3),                l50 = c(8.1, 11.8, 12.2, 20.8, 17.0, 29.0, 25.8, 29.0, 17.0,                        24.3, 22.9, 43.6)) gear_params ##    species    gear       sel_func  l25  l50 ## 1    Sprat   Sprat sigmoid_length  7.6  8.1 ## 2  Sandeel Sandeel sigmoid_length  9.8 11.8 ## 3   N.pout  N.pout sigmoid_length  8.7 12.2 ## 4  Herring Herring sigmoid_length 10.1 20.8 ## 5      Dab     Dab sigmoid_length 11.5 17.0 ## 6  Whiting Whiting sigmoid_length 19.8 29.0 ## 7     Sole    Sole sigmoid_length 16.4 25.8 ## 8  Gurnard Gurnard sigmoid_length 19.8 29.0 ## 9   Plaice  Plaice sigmoid_length 11.5 17.0 ## 10 Haddock Haddock sigmoid_length 19.1 24.3 ## 11     Cod     Cod sigmoid_length 13.2 22.9 ## 12  Saithe  Saithe sigmoid_length 35.3 43.6 f_location <- system.file(\"extdata\", \"NS_f_history.csv\", package = \"mizer\") f_history <- as(read.csv(f_location, row.names = 1), \"matrix\") head(f_history) ##      Sprat Sandeel N.pout   Herring        Dab   Whiting      Sole Gurnard ## 1967     0       0      0 1.0360279 0.09417655 0.8294528 0.6502019       0 ## 1968     0       0      0 1.7344576 0.07376065 0.8008995 0.7831250       0 ## 1969     0       0      0 1.4345001 0.07573638 1.3168280 0.8744095       0 ## 1970     0       0      0 1.4342405 0.10537236 1.3473505 0.6389915       0 ## 1971     0       0      0 1.8234973 0.08385884 0.9741884 0.8167561       0 ## 1972     0       0      0 0.9033768 0.09044461 1.3148588 0.7382834       0 ##         Plaice   Haddock       Cod    Saithe ## 1967 0.4708827 0.7428694 0.6677456 0.4725102 ## 1968 0.3688033 0.7084553 0.6994389 0.4270201 ## 1969 0.3786819 1.3302821 0.6917888 0.3844648 ## 1970 0.5268618 1.3670695 0.7070891 0.5987086 ## 1971 0.4192942 0.9173131 0.7737543 0.4827822 ## 1972 0.4522231 1.3279087 0.8393267 0.5796321 gear_params$catchability <- as.numeric(f_history[\"1990\",]) params <- newMultispeciesParams(NS_species_params,                                  interaction = inter,                                  kappa = 9.27e10,                                 gear_params = gear_params) ## No h provided for some species, so using f0 and k_vb to calculate it. ## No ks column so calculating from critical feeding level. ## Using z0 = z0pre * w_inf ^ z0exp for missing z0 values."},{"path":"https://sizespectrum.org/mizer/dev/articles/a_multispecies_model_of_the_north_sea.html","id":"setting-up-and-running-the-simulation","dir":"Articles","previous_headings":"","what":"Setting up and running the simulation","title":"A Multi-Species Model of the North Sea","text":"set catchability level fishing mortality 1990, can run projection need rescale effort matrix get matrix efforts relative 1990. want rescale f_history object 1990 relative fishing effort 1990 = 1. done using R function sweep(). check rows effort matrix check happened: just project forward relative efforts. However, population dynamics early years strongly determined initial population abundances (known transient behaviour - essentially initial behaviour long term dynamics reached). ecology, don’t know initial abundance . One way around project forward constant fishing mortality equal mortality first historical year equilibrium reached. use steady state initial state simulation. approach reduces impact transient dynamics. now parameter object matrix efforts relative 1990. use effort matrix effort argument project() function. use dt = 0.25 (simulation run faster default value 0.1, tests show results still stable) save results every year. Plotting results, can see biomasses stocks change time.  explore state community useful calculate indicators unexploited community. Therefore also project forward steady state 0 fishing effort.","code":"relative_effort <- sweep(f_history,2,f_history[\"1990\",],\"/\") relative_effort[as.character(1988:1992),] ##          Sprat   Sandeel    N.pout  Herring      Dab   Whiting      Sole ## 1988 0.8953804 1.2633229 0.8953804 1.214900 1.176678 0.9972560 1.2786517 ## 1989 1.1046196 1.2931034 1.1046196 1.232790 1.074205 0.8797926 0.9910112 ## 1990 1.0000000 1.0000000 1.0000000 1.000000 1.000000 1.0000000 1.0000000 ## 1991 1.1902174 0.8814002 1.1902174 1.108016 1.143110 0.8096927 1.0044944 ## 1992 1.2500000 0.8500522 1.2500000 1.316576 1.113074 0.7718676 0.9505618 ##        Gurnard   Plaice   Haddock      Cod    Saithe ## 1988 0.0000000 1.176678 0.9946140 1.045964 1.0330579 ## 1989 0.0000000 1.074205 0.8545781 1.060538 1.1223140 ## 1990 1.0000000 1.000000 1.0000000 1.000000 1.0000000 ## 1991 0.8096927 1.143110 0.7971275 1.001121 0.9619835 ## 1992 0.7718676 1.113074 0.8797127 0.970852 1.0528926 params <- projectToSteady(params, effort = relative_effort[\"1967\", ]) ## Convergence was achieved in 24 years. sim <- project(params, effort = relative_effort, dt = 0.25, t_save = 1) plotBiomass(sim) sim0 <- projectToSteady(params, effort = 0, return_sim = TRUE) ## Convergence was achieved in 42 years."},{"path":"https://sizespectrum.org/mizer/dev/articles/a_multispecies_model_of_the_north_sea.html","id":"exploring-the-model-outputs","dir":"Articles","previous_headings":"","what":"Exploring the model outputs","title":"A Multi-Species Model of the North Sea","text":"look ways results simulation can explored. calculate community indicators mean maximum weight, mean individual weight, community slope large fish indicator (LFI) simulation period, compare unexploited values. also compare simulated values LFI community target based achieving high proportion unexploited value LFI \\(0.8 LFI_{F=0}\\). indicators calculated using functions described section indicator functions. calculate LFI community indicators unexploited community. calculating indicators include demersal species individuals size range 10 g 100 kg, LFI based species larger 40 cm. functions returns time series. interested equilibrium unexploited values just select final time step. also calculate time series indicators exploited community: can plot exploited unexploited indicators, along LFI reference level. using ggplot2 uses data.frames. make three data.frames (one time series, one unexploited levels one reference level): data.frame data.frame measures, stacked top . Historical (solid) unexploited (dashed) reference (dotted) community indicators North Sea multispecies model. According simulations, historically LFI North Sea reference level.","code":"demersal_species <- c(\"Dab\", \"Whiting\", \"Sole\", \"Gurnard\", \"Plaice\",                       \"Haddock\", \"Cod\", \"Saithe\") final <- idxFinalT(sim0) lfi0 <- getProportionOfLargeFish(sim0, species = demersal_species,                                  min_w = 10, max_w = 100e3,                                   threshold_l = 40)[[final]] mw0 <- getMeanWeight(sim0, species = demersal_species,                      min_w = 10,max_w = 100e3)[[final]] mmw0 <- getMeanMaxWeight(sim0, species = demersal_species,                          min_w = 10, max_w = 100e3)[final, \"mmw_biomass\"] slope0 <- getCommunitySlope(sim0, species = demersal_species,                             min_w = 10, max_w = 100e3)[final, \"slope\"] lfi <- getProportionOfLargeFish(sim, species = demersal_species,                                 min_w = 10, max_w = 100e3,                                  threshold_l = 40) mw <- getMeanWeight(sim, species = demersal_species,                     min_w = 10, max_w = 100e3) mmw <- getMeanMaxWeight(sim, species = demersal_species, min_w = 10,                         max_w = 100e3)[, \"mmw_biomass\"] slope <- getCommunitySlope(sim, species = demersal_species, min_w = 10,                            max_w = 100e3)[, \"slope\"] library(ggplot2) years <- 1967:2010 # Simulated data community_plot_data <- rbind(     data.frame(year = years, measure = \"LFI\", data = lfi),     data.frame(year = years, measure = \"Mean Weight\", data = mw),     data.frame(year = years, measure = \"Mean Max Weight\", data = mmw),     data.frame(year = years, measure = \"Slope\", data = slope)) # Unexploited data community_unfished_data <- rbind(     data.frame(year = years, measure = \"LFI\", data = lfi0),     data.frame(year = years, measure = \"Mean Weight\", data = mw0),     data.frame(year = years, measure = \"Mean Max Weight\", data = mmw0),     data.frame(year = years, measure = \"Slope\", data = slope0)) # Reference level community_reference_level <-     data.frame(year = years, measure = \"LFI\", data = lfi0 * 0.8) # Build up the plot ggplot(community_plot_data) +      geom_line(aes(x = year, y = data)) +     facet_wrap(~measure, scales = \"free\") +      geom_line(aes(x = year, y = data), linetype = \"dashed\",               data = community_unfished_data) +     geom_line(aes(x=year,y=data), linetype = \"dotted\",               data = community_reference_level)"},{"path":"https://sizespectrum.org/mizer/dev/articles/a_multispecies_model_of_the_north_sea.html","id":"future-projections","dir":"Articles","previous_headings":"","what":"Future projections","title":"A Multi-Species Model of the North Sea","text":"well investigating historical simulations, can run projections future. run two projections 2050 different fishing scenarios. Continue fishing 2010 levels (status quo scenario). 2010 2015 linearly change fishing mortality approach \\(F_{MSY}\\) continue \\(F_{MSY}\\) 2050. Rather looking community indicators , calculate SSB species model compare projected levels biodiversity target based reference point \\(0.1 SSB_{F=0}.\\) can run simulations, need set arrays future effort. continue use effort relative level 1990. build existing array relative effort make array first scenario. Note use t() command transpose array. needed R recycles rows, need build array dimensions rotated start . make array future effort, bind underneath relative_effort array used previous section. relative effort array second scenario complicated make requires little bit R gymnastics (might easier prepare spreadsheet read ). one need values \\(F_{MSY}\\). now ready project two scenarios. can now compare projected SSB values scenarios biodiversity reference points. First calculate biodiversity reference points (final time step unexploited sim0 simulation): Now build data.frame projected SSB species. make use melt() function transform arrays data frames. Historical projected SSB two fishing scenarios. Status quo (red), Fmsy (yellow). Unexploited (blue) reference levels (purple) also shown.","code":"scenario1 <- t(array(relative_effort[\"2010\", ], dim = c(12, 40),     dimnames = list(NULL, year = 2011:2050))) scenario1 <- rbind(relative_effort, scenario1) fmsy <- c(Sprat = 0.2, Sandeel = 0.2, N.pout = 0.2, Herring = 0.25, Dab = 0.2,     Whiting = 0.2, Sole = 0.22, Gurnard = 0.2, Plaice = 0.25, Haddock = 0.3,     Cod = 0.19, Saithe = 0.3) scenario2 <- t(array(fmsy, dim = c(12, 40),                       dimnames = list(NULL, year = 2011:2050))) scenario2 <- rbind(relative_effort, scenario2) for (sp in dimnames(scenario2)[[2]]) {     scenario2[as.character(2011:2015), sp] <- scenario2[\"2010\", sp] +         (((scenario2[\"2015\", sp] - scenario2[\"2010\", sp]) / 5) * 1:5) } sim1 <- project(params, effort = scenario1, dt = 0.25) sim2 <- project(params, effort = scenario2, dt = 0.25) ssb0 <- getSSB(sim0)[final, ] years <- 1967:2050 ssb1_df <- melt(getSSB(sim1)) ssb2_df <- melt(getSSB(sim2)) ssb_df <- rbind(     cbind(ssb1_df, scenario = \"Status quo\"),     cbind(ssb2_df, scenario = \"Fmsy\")) ssb_unexploited_df <- cbind(expand.grid(     sp = names(ssb0),     time = 1967:2050),     value = as.numeric(ssb0),     scenario = \"Unexploited\") ssb_reference_df <- cbind(expand.grid(     sp = names(ssb0),     time = 1967:2050),     value = as.numeric(ssb0 * 0.1),     scenario = \"Reference\") ssb_all_df <- rbind(ssb_df, ssb_unexploited_df, ssb_reference_df) colours <- c(\"Status quo\" = \"red\", \"Fmsy\" = \"yellow\",              \"Unexploited\" = \"blue\", \"Reference\" = \"purple\") ggplot(ssb_all_df) +     geom_line(aes(x = time, y = value, colour = scenario)) +     facet_wrap(~sp, scales = \"free\", nrow = 4) +     theme(legend.position = \"none\") +     scale_colour_manual(values = colours)"},{"path":"https://sizespectrum.org/mizer/dev/articles/community_model.html","id":"sec:set_up_comm_model","dir":"Articles","previous_headings":"","what":"Setting up a community model","title":"The Community Model","text":"first stage implementing model using mizer create object class MizerParams. class contains model parameters including life-history parameters species model, fishing selectivity functions parameters resource spectrum. avoid make MizerParams object directly, newCommunityParams() wrapper function, provided conveniently creates MizerParams object specifically community model. documentation function can seen clicking function name anywhere appears page: newCommunityParams(). can seen help page, function can take many arguments. can ignore moment almost come default values. arguments pay attention : z0 (external mortality rate), alpha (assimilation efficiency community), f0 (average feeding level community, used calculate \\(\\gamma\\)) h (coefficient maximum intake rate). Although default values parameters provided, encouraged explore changing values affects simulated community. example, default value z0 \\(0.1\\). Increasing value effectively ‘shortens’ length community spectrum. newCommunityParams() function called passing arguments name. parameter passed set default value. example, following line sets parameters z0 = 0.05, f0 = 0.5. parameters default value: Calling function creates returns object type MizerParams. can check using class() function. work mizer worry object realised internally. need know contains information needed run model simulations mizer provides functions access, use modify information. brief description model contained MizerParams object can seen calling summary() method : summary can see size range community spectrum set \\(0.001\\) \\(10^{6}\\) divided \\(100\\) size bins. Similar information available resource spectrum. Additionally, community made one species, called Community, asymptotic size \\(10^{6}\\) preferred predator prey mass ratio \\(100\\). w_mat parameter set NA used running community model. values set default using newCommunityParams() function.","code":"params <- newCommunityParams(z0 = 0.05, f0 = 0.5) class(params) ## [1] \"MizerParams\" ## attr(,\"package\") ## [1] \"mizer\" summary(params) ## An object of class \"MizerParams\"  ## Consumer size spectrum: ##  minimum size:   0.001 ##  maximum size:   1e+06 ##  no. size bins:  100 ## Resource size spectrum: ##  minimum size:   8.11131e-11 ##  maximum size:   0.001 ##  no. size bins:  79  (178 size bins in total) ## Species details: ##     species w_inf w_mat w_min  f0 beta sigma ## 1 Community 1e+06    NA 0.001 0.5  100     2 ##  ## Fishing gear details: ## Gear          Effort  Target species  ##  ---------------------------------- ## Community      0.00   Community"},{"path":"https://sizespectrum.org/mizer/dev/articles/community_model.html","id":"sec:running_comm_model","dir":"Articles","previous_headings":"","what":"Running the community model","title":"The Community Model","text":"using newCommunityParams() function now MizerParams object contains information need model community. can use perform simulation project community time. mizer package, projections performed using project() function. can see help page project() details described fully section running simulation. ignore details moment just use project() run simple projections. arguments project() need concerned effort, determines fishing effort (therefore fishing mortality) time, t_max, number years want project future. Initial population abundances set automatically get_initial_n() function. possible set initial abundances . run projection 50 years, fishing effort (.e. want model unexploited community) run: resulting object, sim, type MizerSim. class holds results simulation, including community resource abundances size time, well original model parameters. explained detail section running simulation. running projection, possible explore results using range plots analyses. described fully section exploring simulation results. quickly look results projection can call plot() method. plots feeding level, predation mortality, fishing mortality abundance size last time step simulation, total biomass time. plots can shown individually desired.  plot several things going worth talking . Looking total biomass community time, can see biomass quickly reaches stable equilibrium. panels show happening last time step simulation, case community equilibrium. Fishing mortality 0 set effort argument 0 running simulation. predation mortality rate clearly function size, smallest sizes experiencing highest levels predation. feeding level describes satiated individual , 0 unfed, 1 full satiated. feeding level size strongly affected values f0 alpha arguments passed newCommunityParams() function. resource community spectra shown bottom panel plot (plotted resource spectrum truncated make better plot, really extends way back \\(8.11\\times 10^{-11}\\) g). can see community spectrum forms continuum resource spectrum. strongly affected level fixed reproduction rate (reproduction argument passed newCommunityParams()) Note hump biomass largest end community spectrum. size spectrum model can broadly described ‘big things eating little things’. Given , eating biggest things? Without fishing pressure, mortality largest individuals external mortality (determined z0 argument) mortality predation almost 0. difficult see plot due predation mortality high smaller individuals. can see clearly extracting predation mortality information MizerSim object, sim, created . easily done using getPredMort() function (see help page details). several functions can used extracting information MizerSim object, e.g. getFeedingLevel() getFMort(). information see section exploring simulation results. just call getPredMort() using sim object: resulting pred_mort object array contains predation mortality time species size. one species species dimension dropped, leaving us two dimensional array time size. projected model \\(50\\) time steps length time dimension \\(51\\) initial population also included time step. can get index final time pull predation mortality size final time step use: plot predation mortality log-log scale can see predation mortality declines almost zero largest sizes.  Note used w(sim) get vector sizes plot along x-axis specified wanted logarithmic axes. long run worthwhile use ggplot2 package creating plots, show also create graph ggplot(). detail see section using ggplot2 plotly mizer.","code":"sim <- project(params, t_max = 50, effort = 0) class(sim) ## [1] \"MizerSim\" ## attr(,\"package\") ## [1] \"mizer\" plot(sim) pred_mort <- getPredMort(sim) idxFinalT(sim) ## [1] 51 pred_mort_final <- pred_mort[idxFinalT(sim), ] plot(x = w(params), y = pred_mort_final, log = \"xy\", type = \"l\",       xlab = \"Size [g]\", ylab = \"Predation mortality [1/year]\") library(ggplot2) sd <- data.frame(x = w(params), y = pred_mort_final) ggplot(sd, aes(x = x, y = y)) +   geom_line() +   scale_x_log10() + scale_y_log10() +   xlab(\"Size [g]\") + ylab(\"Predation mortality [1/year]\") ## Warning: Transformation introduced infinite values in continuous y-axis"},{"path":"https://sizespectrum.org/mizer/dev/articles/community_model.html","id":"sec:trophic_cascade_comm_model","dir":"Articles","previous_headings":"","what":"Example of a trophic cascade with the community model","title":"The Community Model","text":"possible use community model simulate trophic cascade. need perform two simulations, one fishing one without. means need consider fishing handled mizer. newCommunityParams() function automatically sets fishing selectivity knife-edge shape, individuals larger 1 kg selected (size knife-edge can changed setting knife_edge_size argument). Although possible change selectivity function, use default knife-edge selectivity. set parameter object default parameters: First perform simulation without fishing way setting effort argument 0: Now want simulate , time fishing. simulations, fishing mortality calculated product fishing selectivity, effort catchability (see section fishing gears details). default catchability set 1. means fishing effort 1 result fishing mortality 1/year fully selected sizes. run simulation fishing effort set 1 duration simulation: can compare difference scenarios using plot() method . particular interest fishing mortality size. knife-edge selectivity 1000 g can clearly seen effort 1 resulted fishing mortality 1 fully selected sizes.  explore presence trophic cascade, interested looking relative change abundance community fished compared fished. need get abundances size simulation objects. done N() function, returns three dimensional array dimensions time x species x size. 51 time steps (50 simulation plus one stores initial population), 1 species 100 sizes: want abundances final time step, can use calculate relative abundances: convenience, save determine index final time, mizer provides function finalN(), done can plotted using basic R plotting commands.  impact fishing species larger 1000g can clearly seen. fishing pressure lowers abundance large fish (decrease relative abundance 1000 g). relieves predation pressure smaller prey (preferred predator-prey size ratio given \\(\\beta\\) parameter, set 100 default), leading increase abundance. turn increases predation mortality smaller prey, reduces abundance .","code":"params_knife <- newCommunityParams() sim0 <- project(params_knife, effort = 0, t_max = 50) sim1 <- project(params_knife, effort = 1, t_max = 50) plot(sim1, power = 2) dim(N(sim0)) ## [1]  51   1 100 relative_abundance <- N(sim1)[51, , ] / N(sim0)[51, , ] relative_abundance <- finalN(sim1) / finalN(sim0) plot(x = w(params), y = relative_abundance, log = \"x\", type = \"n\",     xlab = \"Size (g)\", ylab = \"Relative abundance\") lines(x = w(params), y = relative_abundance) lines(x = c(min(w(params)), max(w(params))), y = c(1, 1), lty = 2)"},{"path":"https://sizespectrum.org/mizer/dev/articles/community_model.html","id":"sec:comm_model_change_sigma","dir":"Articles","previous_headings":"","what":"The impact of changing \\(\\sigma\\)","title":"The Community Model","text":"described , \\(\\sigma\\) parameter determines width predator prey size preference. take look changing value \\(\\sigma\\) can affect dynamics community. examples , \\(\\sigma\\) set newCommunityParams() function default value \\(2\\). can see looking sigma column species_params data frame contained MizerParams object: projected time, community abundances converge stable equilibrium. happens reduce value \\(\\sigma\\), example setting 1.0? can passing new value \\(\\sigma\\) newCommunityParams(). want project new model time using project() function. project new parameter object 50 time steps without fishing save intervals 0.1 years (t_save = 0.1): Note introduced new argument: \\(dt\\). step size solver. anything biology model. affects internal engine project() performs projection. can see underlying model equations model description section, model formulated continuous time. Therefore, project forward, project() must solve system equations using numerical methods. quality methods strongly affected \\(dt\\). default value \\(dt\\) 0.1, fine projections run document. necessary reduce value 0.01 avoid introducing artefacts projected values. Decreasing \\(dt\\) increases time takes run projection. Let’s take look abundances change time. can plotBiomass() function:  plot shows abundances community longer converge stable equilibrium dynamics appear chaotic. ecological significance change dynamics, ability simple community models show chaotic behaviour, still debated. can argued size oscillations large ‘true’. Additionally, trait-based model implemented, magnitude oscillations much smaller. next section trait based model.","code":"species_params(params)$sigma ## [1] 2 params_sigma1 <- newCommunityParams(sigma = 1) sim_sigma1 <- project(params_sigma1, effort = 0, t_max = 50,                        dt = 0.01, t_save = 0.1) plotBiomass(sim_sigma1)"},{"path":"https://sizespectrum.org/mizer/dev/articles/developer_vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Developer Guide","text":"guide need extend mizer meet needs research project. already read mizer model description vignette(\"model_description\") thus familiar mizer can box. now want implement extension modification model required research, need dive internal workings mizer. guide meant make easy possible. first thing , even reading guide, go https://github.com/sizespectrum/mizer/issues create new “issue”” share ideas plans mizer community. may get back valuable feedback advice. Another way get touch mizer community via size-spectrum modelling Google group.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/developer_vignette.html","id":"setting-up-working-environment","dir":"Articles","previous_headings":"","what":"Setting up working environment","title":"Developer Guide","text":"section describe set working environment allow easily work mizer code. Much may already place, feel free skip ahead.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/developer_vignette.html","id":"installing-r-rstudio-and-git","dir":"Articles","previous_headings":"Setting up working environment","what":"Installing R, RStudio and Git","title":"Developer Guide","text":"Mizer compatible R versions 3.1 later. still need install R, simply install latest version. guide prepared R version 4.2.1 (2022-06-23). guide assumes using RStudio work R. really reason use RStudio makes lot things much easier. RStudio develops rapidly adds useful features time pays upgrade latest version frequently. guide written version 1.2.1268. Mizer developed using version control system Git code hosted GitHub. contribute mizer code, need Git software installed system. Linux machines installed already, platforms need install . need install GUI git RStudio built-support git. good place learn using Git GitHub chapter guide Hadley R package development.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/developer_vignette.html","id":"forking-mizer-from-github","dir":"Articles","previous_headings":"Setting up working environment","what":"Forking mizer from GitHub","title":"Developer Guide","text":"work code create git repository copy mizer code. Go https://github.com/sizespectrum/mizer fork repository clicking “Fork” button. prompted log GitHub. yet account, need create one . fork mizer repository, create local copy whichever machine work . can within RStudio. click “Project” drop-select “New Project…”. Provided Git installed RStudio able find can choose “Git” next dialog box. Git option showing, need troubleshoot, perhaps https://happygitwithr.com/rstudio-see-git.html helps. can copy clipboard pressing button next URL paste back RStudio dialog box. dialog box can also change RStudio stores repository machine. Choose anywhere convenient. click “Create Project”.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/developer_vignette.html","id":"setting-up-rstudio-developer-tools","dir":"Articles","previous_headings":"Setting up working environment","what":"Setting up RStudio developer tools","title":"Developer Guide","text":"work R packages developer, need install additional tools. tools place, install devtools roxygen2 packages now set develop R packages, RStudio makes extra easy. even cheat sheet “Package Development devtools” accessible Help menu RStudio. set things , click Build -> -> Configure Build Tools. resulting dialog box, tick checkboxes “Use devtools package functions available” “Generate documentation roxygen” click “Configure”. open another dialog box tick “Install Restart”. Hit “OK”. Project Options dialog box, click “Code Editing” check “Insert spaces tabs” set “Tab width” 4, convention mizer code follows.","code":"install.packages(c(\"devtools\", \"roxygen2\"))"},{"path":"https://sizespectrum.org/mizer/dev/articles/developer_vignette.html","id":"usethis-package","dir":"Articles","previous_headings":"Setting up working environment","what":"usethis package","title":"Developer Guide","text":"Many useful commands working packages GitHub provided usethis package, automatically installed along devtools. package comes useful vignette suggestions set things conveniently.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/developer_vignette.html","id":"installing-mizer","dir":"Articles","previous_headings":"Setting up working environment","what":"Installing mizer","title":"Developer Guide","text":"now ready install mizer package using development code GitHub. First command can watch progress “Build” tab. build completed, see console RStudio automatically runs load freshly built mizer package. want click “Install Restart” whenever changed local code.","code":"devtools::install_github(\"sizespectrum/mizer\") library(mizer)"},{"path":"https://sizespectrum.org/mizer/dev/articles/developer_vignette.html","id":"working-with-git","dir":"Articles","previous_headings":"","what":"Working with git","title":"Developer Guide","text":"making code changes fork mizer code (using -called Fork & Pull model). time time want interact main mizer repository two ways: want contribute code back mizer project, benefits others also gets automatically included future releases. want able merge new developments made mizer others code base. interaction made possible git GitHub. initially takes bit effort get hang works. Therefore created little tutorial “Working git GitHub” exercise take necessary steps. Unless already familiar git GitHub, worthwhile work tutorial now.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/articles/developer_vignette.html","id":"coding-style","dir":"Articles","previous_headings":"Contributor guidelines","what":"Coding style","title":"Developer Guide","text":"Google’s R Style Guide tidyverse style guide","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/developer_vignette.html","id":"always-write-tests-for-your-code","dir":"Articles","previous_headings":"Contributor guidelines","what":"Always write tests for your code","title":"Developer Guide","text":"use testthat shinytest. test directory tests/testthat. tests compare results calculations results code gave past, using testthat::expect_known_value() test. past values stored tests/testthat/values. one tests gives value different stored value, test throws error overwrites stored value new result. second time test run, longer fails. Luckily original values still git repository. think fixed error led wrong result, revert old stored values re-running test. Reverting old stored values easy: Just go Git tab RStudio, select changed files tests/testthat/values (select, tick), right-click choose Revert. may change result calculation intended, perhaps new code accurate old code. 100% certain , , commit changed files tests/testthat/values, new values form basis future comparison tests. Plots tested vdiffr package. plot changed, run vdiffr::manage_cases(), start shiny gadget can view changes plot.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/developer_vignette.html","id":"finding-your-way-around-the-mizer-code","dir":"Articles","previous_headings":"","what":"Finding your way around the mizer code","title":"Developer Guide","text":"section still early stage development. Mizer organised modular fashion. separated setup functions, simulation functions, analysis plotting functions. several different functions setting MizerParams object specifying various concrete models. setup functions make various simplifying assumptions model parameters reduce amount information needs specified. usually takes form assuming allometric scaling laws. core mizer project() function runs simulation size-spectrum model. takes specification model contained object type MizerParams returns results simulation object type MizerSim. many functions analysing plotting results mizer simulation contained MizerSim object. MizerParams MizerSim objects S4 objects, meaning slots rigorously defined accessed ‘@’ notation. need learn S4 classes order understand mizer code, code avoids using S4 methods. presentation assume MizerParams object called params MizerSim object called sim.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/developer_vignette.html","id":"the-mizerparams-class","dir":"Articles","previous_headings":"Finding your way around the mizer code","what":"The MizerParams class","title":"Developer Guide","text":"object class ‘MizerParams’ holds information needed ‘project()’ function simulate model.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/developer_vignette.html","id":"adding-a-new-slot","dir":"Articles","previous_headings":"Finding your way around the mizer code > The MizerParams class","what":"Adding a new slot","title":"Developer Guide","text":"need add new slot MizerParams class, need make following additions file MizerParams-class.R: Go section “Class definition” add description new slot @slot. Add entry slots list inside setClass. function emptyParams() go section “Make object” inside call new() provide default value slot. slot holds array, conventional mizer already give correct dimensions dimnames , possible. exactly put places usually clear analogy already similar slots.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/articles/developer_vignette.html","id":"size-of-git-repo","dir":"Articles","previous_headings":"Specialised topics","what":"Size of git repo","title":"Developer Guide","text":"try avoid committing many large files git repository, larger repository longer takes download. Currently (September 2019) repository still manageable 110 MiB. best way check size repository git-sizer, see https://github.com/github/git-sizer/ currently storing mizer website mizer repository (docs subdirectory). convenient, partly pkgdown puts default GitHub serves . However future might consider moving website repository.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/editing_website.html","id":"website-built-from-package-documentation","dir":"Articles","previous_headings":"","what":"Website built from package documentation","title":"Editing the Mizer Website","text":"mizer website [https://sizespectrum.org/mizer/] created programmatically documentation included mizer GitHub repository. Thus edit website just means editing documentation. website creation performed slight modification pkgdown package. can trigger build local repository issuing commands convert existing documentation html files put docs subdirectory mizer directory. detail: .Rmd files vignettes subdirectory (subdirectories, ) produce html files name docs/articles. .Rd documentation files man produce html files name docs/reference. NEWS file converted docs/news/index.html README.md file converted docs/index.html. package use information _pkgdown.yml file create navbar index pages. navbar configured quite self-explanatory, specifying order navbar entries, text link destination, whether left right side. clearly easy add additional navbar entries. possible also include drop-items navbar. See pkgdown documentation details. file docs/articles/index.html created according article: section _pkgdown_yml file. early stage looked follows: now entries link vignettes. necessary use index file. menu entry just well point elaborate file created .Rmd file vignette subdirectory, might become useful future. file docs/reference/index.html created according reference: section _pkgdown_yml file, similar syntax article: section.","code":"devtools::install_github(\"gustavdelius/pkgdown\", ref = \"mizer\") pkgdown::build_site() navbar:   title: \"mizer\"   left:     - icon: fa-home fa-lg       href: index.html     - text: \"Get Started\"       href: articles/mizer.html     - text: \"Articles\"       href: articles/index.html     - text: \"Reference\"       href: reference/index.html     - text: \"Publications\"       href: articles/publications.html     - text: \"News\"       href: news/index.html   right:     - icon: fa-github fa-lg       href: https://github.com/sizespectrum/mizer articles: - title: User Guides   contents:   - model_description - title: Developer Guides   contents:   - developer_vignette   - mathematical_details"},{"path":"https://sizespectrum.org/mizer/dev/articles/editing_website.html","id":"changing-page-content","dir":"Articles","previous_headings":"","what":"Changing page content","title":"Editing the Mizer Website","text":"top every page website, except homepage, link page source. easy know file edit make changes page. want rebuild website making change single page may want re-build everything. can rebuild just single vignette. example rebuild page editing vignette vignette/editing_website.Rmd can call rebuild reference pages changing roxygen code doc can run change homepage edit index.md. file similar README.md used mizer homepage GitHub, can contain extra content like embedded videos GitHub homepage support. changes index.md can update local copy website course changes affect local copy website. get changes reflected online site need make pull request changed files master branch upstream repository.","code":"pkgdown::build_article(\"editing_website\") pkgdown::build_reference() pkgdown::build_home()"},{"path":"https://sizespectrum.org/mizer/dev/articles/editing_website.html","id":"github-pages","dir":"Articles","previous_headings":"","what":"GitHub pages","title":"Editing the Mizer Website","text":"website hosted GitHubPages. settings pages mizer repository GitHub source set “master branch/docs folder”. means master branch controls website.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/editing_website.html","id":"search-bar","dir":"Articles","previous_headings":"","what":"Search bar","title":"Editing the Mizer Website","text":"search bar website powered Docsearch Algolia. free service open-source projects. set-explained pkgdown documentation.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/editing_website.html","id":"embedding-videos","dir":"Articles","previous_headings":"","what":"Embedding videos","title":"Editing the Mizer Website","text":"easy embed videos webpage putting iframe R Markdown source file. example putting line source page produced following embedded video: GitHub site (opposed GitHub Pages) support embedded videos.","code":"<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/0RlXqLbFbWc\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>"},{"path":"https://sizespectrum.org/mizer/dev/articles/exploring_the_simulation_results.html","id":"sec:exploring","dir":"Articles","previous_headings":"","what":"Introduction","title":"Exploring the Simulation Results","text":"sections multispecies model running simulation saw set model project forward time desired fishing scenario. result running projection object class MizerSim. ? can explore results simulation? section introduce range summaries, plots indicators can easily produced using functions included mizer. use following MizerSim object examples, effort array one created previous section running simulation:","code":"sim <- project(NS_params, effort = effort_array, dt = 0.1, t_save = 1)"},{"path":"https://sizespectrum.org/mizer/dev/articles/exploring_the_simulation_results.html","id":"accessing-the-simulation-results","dir":"Articles","previous_headings":"","what":"Accessing the simulation results","title":"Exploring the Simulation Results","text":"projected species abundances size time can obtained N(sim). returns three-dimensional array (time x species x size). Consequently, array can get big inspecting can difficult. example just run, time dimension n 10 rows (one initial population one saved time steps). also 12 species 100 sizes. can check running dim() function looking dimensions n array: pull abundances particular species time size can subset array. example look Cod time can use: returns two-dimensional array: time x size, containing cod abundances. time dimension depends value argument t_save project() run. can see even though specified dt 0.1 called project(), t_save = 1 argument meant output saved every year. Often particularly interested results final time-step. can access two dimensional array (species x size). projected resource abundances can accesses similarly returns two-dimensional array (time x size). interested final time step returns vector one entry size class.","code":"dim(N(sim)) ## [1]  10  12 100 N(sim)[, \"Cod\", ] finalN(sim) NResource(sim) finalNResource(sim)"},{"path":"https://sizespectrum.org/mizer/dev/articles/exploring_the_simulation_results.html","id":"sec:summaries","dir":"Articles","previous_headings":"","what":"Summary functions","title":"Exploring the Simulation Results","text":"well summary() methods available MizerParams MizerSim objects, useful summary functions pull information MizerSim object. description different summary functions available given summary functions help page. functions help files explain used. (also possible use functions MizerParams object also supply population abundance argument. can useful exploring changes parameter value abundance can affect summary statistics indicators. won’t explore can see help files details.) functions getBiomass() getN() additional arguments allow user set size range calculate summary statistic. done passing combination arguments min_l, min_w, max_l max_w minimum maximum length weight. min_l specified need specify min_w . However, length specified (minimum maximum) necessary species parameter data.frame (see species parameters section) include parameters b length-weight conversion. possible mix length weight constraints, e.g. supplying minimum weight maximum length. default values minimum maximum weights spectrum, .e. full range size spectrum used.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/exploring_the_simulation_results.html","id":"sec:summaries_example","dir":"Articles","previous_headings":"Summary functions","what":"Examples of using the summary functions","title":"Exploring the Simulation Results","text":"show simple demonstration using summary function using sim object created earlier. , use getSSB() calculate SSB species time (note use head() function display first rows). mentioned , can specify size range getsummaryBiomass() getN() functions. example, calculate total biomass species include individuals larger 10 g smaller 1000 g.","code":"ssb <- getSSB(sim) dim(ssb) ## [1] 10 12 head(ssb) ##     sp ## time        Sprat      Sandeel       N.pout      Herring        Dab ##    1 210810187886 5.378411e+12 183159668755 442644004208 6885675636 ##    2 157421300798 3.498137e+12 153386837865 499200353502 5278650740 ##    3 138701220818 2.510551e+12 135619248024 603931625682 5065030019 ##    4 118875574040 1.997337e+12 110306292341 569167018628 4877123531 ##    5 114060666493 1.790051e+12 112246876589 420615452917 5224602753 ##    6 125640651552 1.736155e+12 124869964868 351468531499 6147959412 ##     sp ## time      Whiting        Sole    Gurnard       Plaice      Haddock          Cod ##    1 113572753243 63630241776 9102232924 303365911438 151965178029 531536722956 ##    2  87964359889 46775076902 7385280731 232689238362 117830523964 345850203280 ##    3  91749455062 45443905458 7528148453 240988454909 135946957263 290183064993 ##    4  85038348880 49465062866 6855105119 264670808435 158905104522 308445205952 ##    5  77139941423 53555703121 5600934574 279557468426 145778058562 335438386336 ##    6  82462061701 56441766035 5398238488 278206590917 123593721267 351386199474 ##     sp ## time       Saithe ##    1 327578246185 ##    2 218500695506 ##    3 197610219846 ##    4 228220656964 ##    5 271860341040 ##    6 287805766571 biomass <- getBiomass(sim, min_w = 10, max_w = 1000) head(biomass) ##     sp ## time        Sprat      Sandeel       N.pout      Herring        Dab ##    1 244119195586 4.589606e+12 238847649463 1.273446e+12 8373096367 ##    2 189464604834 2.888858e+12 214678099536 1.413601e+12 6837801607 ##    3 169593586308 1.931520e+12 185655249238 1.536104e+12 6536986610 ##    4 146468867085 1.409300e+12 166879189209 1.360238e+12 6286073743 ##    5 144115814704 1.171670e+12 178630603519 1.175016e+12 6849215327 ##    6 159924185834 1.102235e+12 192414189537 1.177930e+12 7904848054 ##     sp ## time      Whiting         Sole     Gurnard       Plaice      Haddock ##    1 161515844306 127400523235 24759887586 766087469917 333172493301 ##    2 140923805330 112319321368 24087806247 722705573485 335440217763 ##    3 139784785126 114244854064 23828541236 743105121821 372682335506 ##    4 127051769924 115827036011 20324716177 711903001258 356182595515 ##    5 126548669345 116366841999 19072116393 661973266258 323469227911 ##    6 137220141191 121684387886 21334281004 668659838352 325245994096 ##     sp ## time         Cod       Saithe ##    1 45159646196 158969500338 ##    2 52110333051 183496280557 ##    3 62885974091 216448253249 ##    4 59073484678 214031942473 ##    5 51993520691 174593364166 ##    6 49544506290 138713867303"},{"path":"https://sizespectrum.org/mizer/dev/articles/exploring_the_simulation_results.html","id":"functions-for-calculating-indicators","dir":"Articles","previous_headings":"","what":"Functions for calculating indicators","title":"Exploring the Simulation Results","text":"Functions available calculate range indicators MizerSim object projection. description different indicator functions available given indicator functions help page.. can read help pages functions full instructions use , along examples. functions table possible specify size range community used calculation (e.g. exclude small large individuals) calculated metrics can compared empirical data. used way saw function getBiomass() section summary functions MizerSim objects.. also possible specify species include calculation. See help files details.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/exploring_the_simulation_results.html","id":"sec:indicators_example","dir":"Articles","previous_headings":"Functions for calculating indicators","what":"Examples of calculating indicators","title":"Exploring the Simulation Results","text":"examples use sim object created earlier. slope community can calculated using getCommunitySlope() function. Initially include species sizes calculation (first five rows shown): gives slope, intercept \\(R^2\\) value time (see help file getCommunitySlope details). can include species want species argument. include demersal species. also restrict size range community used calculation 10 g 5 kg. species argument character vector names species want include calculation.","code":"slope <- getCommunitySlope(sim) head(slope) ##        slope intercept        r2 ## 1 -0.7822250  25.40779 0.8722251 ## 2 -0.7970084  25.24922 0.8666363 ## 3 -0.8066332  25.21573 0.8665750 ## 4 -0.8151679  25.23791 0.8678893 ## 5 -0.8229285  25.24489 0.8686275 ## 6 -0.8272602  25.23104 0.8673588 dem_species <- c(\"Dab\", \"Whiting\", \"Sole\", \"Gurnard\", \"Plaice\", \"Haddock\",     \"Cod\", \"Saithe\") slope <- getCommunitySlope(sim, min_w = 10, max_w = 5000,      species = dem_species) head(slope) ##       slope intercept        r2 ## 1 -1.096584  26.88942 0.9749307 ## 2 -1.177678  27.21999 0.9796408 ## 3 -1.148456  27.13231 0.9754412 ## 4 -1.060903  26.70050 0.9748899 ## 5 -1.026889  26.50463 0.9820432 ## 6 -1.061542  26.68677 0.9807863"},{"path":"https://sizespectrum.org/mizer/dev/articles/exploring_the_simulation_results.html","id":"plotting-the-results","dir":"Articles","previous_headings":"","what":"Plotting the results","title":"Exploring the Simulation Results","text":"R powerful comes exploring data plots. Two useful packages plotting ggplot2 plotly. use data.frames input data whereas many mizer functions return arrays matrices. Fortunately straightforward turn arrays matrices data.frames using melt() function reshape2 package mizer makes available . Although mizer include dedicated plots, definitely worth time getting grips plotting packages. make possible make plots. provide details section using ggplot2 plotly mizer. Included mizer several dedicated plots use MizerSim objects inputs (see plots help page.). well displaying plots, functions return objects type ggplot ggplot2 package, meaning can modified user (e.g. changing plotting theme). See help page individual plot functions details. generic plot() method also overloaded MizerSim objects. produces several plots window provide snapshot results simulation. plots plot values size (example plotFeedingLevel() plotSpectra()). plots, default use data final time step projection. plotting functions, also possible specify different time, time range average values plotting.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/exploring_the_simulation_results.html","id":"sec:plot_examples","dir":"Articles","previous_headings":"Plotting the results","what":"Plotting examples","title":"Exploring the Simulation Results","text":"Using plotting functions straightforward. example, plot total biomass species time use plotBiomass() function:  mentioned , plot functions plot values size point time (averaged time period). plots possible specify time step plot, time period average values . default use final time step. plot abundance spectra (biomass), averaged time = 5 10:  mentioned , seen several times guide, generic plot() method also overloaded. produces 5 plots window (plotFeedingLevel(), plotBiomass(), plotPredMort(), plotFMort() plotSpectra()). possible pass arguments individual plots use, e.g. arguments change time period data averaged.  next section describes use learned model North Sea.","code":"plotBiomass(sim) plotSpectra(sim, time_range = 5:10) plot(sim)"},{"path":"https://sizespectrum.org/mizer/dev/articles/mizer.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Getting started with mizer","text":"mizer package implements multi-species dynamic Size-spectrum models R. designed modelling aquatic ecosystems. Using mizer relatively simple. four main stages, described detail sections . Installing mizer. Setting model parameters. Running simulation. Exploring results. run difficulties questions suggestions, let us know posting issue tracker. can also twitter @mizer_model. love hear . Click preview open mizer cheat sheet. series YouTube videos Richard Southwell mizer however longer entirely --date.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/mizer.html","id":"installing-mizer","dir":"Articles","previous_headings":"","what":"Installing mizer","title":"Getting started with mizer","text":"already R installed computer, installation mizer package simple (assuming active internet connection). Just start R session type: installing mizer, actually use , need load package using library() function. Note whilst need install package , need loaded every time start new R session. Mizer compatible R versions 3.1 later. can install R computer following instructions https://cran.r-project.org/ particular platform. Alternatively, can want install R computer, can also work R RStudio internet browser creating free account https://rstudio.cloud. can install mizer described . Running mizer RStudio Cloud may slightly slower running locally machine, speed usually quite acceptable. guide assumes using RStudio work R. really reason use RStudio makes lot things much easier. RStudio develops rapidly adds useful features time pays upgrade latest version frequently. guide written version 1.3.820. source code mizer hosted GitHub. feeling brave wish try development version mizer can install package using R package devtools (used extensively putting together mizer). yet installed devtools, can install latest version GitHub using","code":"install.packages(\"mizer\") library(mizer) install.packages(\"devtools\") devtools::install_github(\"sizespectrum/mizer\")"},{"path":"https://sizespectrum.org/mizer/dev/articles/mizer.html","id":"setting-the-model-parameters","dir":"Articles","previous_headings":"","what":"Setting the model parameters","title":"Getting started with mizer","text":"mizer possible implement many different types size-spectrum models using basic tools methods. Setting model parameters done creating object class ? MizerParams. includes model parameters life history parameters species, fishing gears. type sizespectrum model function creating new MizerParams object, newSingleSpeciesParams(), newCommunityParams(), newTraitParams() newMultispeciesParams(). functions make reasonable default choices many model parameters want specify explicitly. example set simple model (described Community Model section) can even let mizer choose parameters . complicated multi-species model need provide data frame species parameters. example North Sea model included package. also use species interaction matrix North Sea species. notes printed function show us mizer calculated default values many parameters provided.","code":"params <- newCommunityParams() params <- newMultispeciesParams(NS_species_params, NS_interaction) ## No h provided for some species, so using f0 and k_vb to calculate it. ## No ks column so calculating from critical feeding level. ## Using z0 = z0pre * w_inf ^ z0exp for missing z0 values."},{"path":"https://sizespectrum.org/mizer/dev/articles/mizer.html","id":"running-a-simulation","dir":"Articles","previous_headings":"","what":"Running a simulation","title":"Getting started with mizer","text":"done calling project() function (“project forward time”) model parameters. produces object class MizerSim contains results simulation. example chose set parameters project() function specify want project 10 years future, assumption unit fishing effort. can see help page project() details described fully section running simulation.","code":"sim <- project(params, t_max = 10, effort = 1)"},{"path":"https://sizespectrum.org/mizer/dev/articles/mizer.html","id":"exploring-the-results","dir":"Articles","previous_headings":"","what":"Exploring the results","title":"Getting started with mizer","text":"simulation run, results can examined using range ?plotting_functions, ?summary_functions ?indicator_functions. plot() function combines several plots one:  Just example: might interested proportion large fish varies time. can get proportion Herrings terms biomass weight 50g 10 years: can use full power R work results. functionality provided mizer explore simulation results fully described section exploring simulation results.","code":"plot(sim) getProportionOfLargeFish(sim,                           species = \"Herring\",                           threshold_w = 50,                           biomass_proportion = TRUE) ##         0         1         2         3         4         5         6         7  ## 0.8241807 0.1858698 0.7586884 0.6780193 0.3325129 0.3036110 0.4717033 0.6379461  ##         8         9        10  ## 0.5976582 0.5539731 0.5763835"},{"path":"https://sizespectrum.org/mizer/dev/articles/mizer.html","id":"size-spectrum-models","dir":"Articles","previous_headings":"","what":"Size-spectrum models","title":"Getting started with mizer","text":"Size spectrum models emerged conceptually simple way model large community individuals grow change trophic level life. now growing literature describing different types size spectrum models (e.g. Benoît Rochet 2004; K. H. Andersen Beyer 2006; K. H. Andersen et al. 2008; Law et al. 2009; Hartvig 2011; Hartvig, Andersen, Beyer 2011). models can used understand marine communities organised (K. H. Andersen Beyer 2006; K. H. Andersen, Beyer, Lundberg 2009; Blanchard et al. 2009) respond fishing (K. H. Andersen Rice 2010; K. H. Andersen Pedersen 2010). section introduces central assumptions, concepts, processes, equations parameters size spectrum models. Roughly speaking four versions size spectrum modelling framework increasing complexity: single-species model, community model (Benoît Rochet 2004; Maury et al. 2007; Blanchard et al. 2009; Law et al. 2009), trait-based model (K. H. Andersen Beyer 2006; K. H. Andersen Pedersen 2010), multispecies model (Hartvig, Andersen, Beyer 2011). single-species, community trait-based models can considered simplifications multispecies model. section focuses multispecies model also applicable types models. Mizer able implement types model using similar commands. Size spectrum models subset physiologically structured models (Metz Diekmann 1986; De Roos Persson 2001) growth (thus maturation) food dependent, processes formulated terms individual level processes. parameters size spectrum models related individual weight makes possible formulate model small set general parameters, prompted label ``charmingly simple’’ model framework [Pope et al. (2006)}. model framework builds central assumption individual can characterized weight \\(w\\) species number \\(\\) . aim model calculate size- trait-spectrum \\({\\cal N}_i(w)\\) density individuals \\({\\cal N}_i(w)dw\\) number individuals interval \\([w:w+dw]\\). Scaling individual-level processes growth mortality size spectrum trait group achieved means McKendrick-von Foerster equation, simply continuity equation describes flow biomass size spectrum, \\[\\begin{equation}   \\frac{\\partial N_i(w)}{\\partial t} + \\frac{\\partial g_i(w) N_i(w)}{\\partial w} = -\\mu_i(w) N_i(w) \\end{equation}\\] individual growth \\(g_i(w)\\) mortality \\(\\mu_i(w)\\) coupled, growth one individual due predation another, consequently dies. continuity equation supplemented boundary condition egg weight \\(w_0\\) flux individuals (numbers per time) \\(g_i(w_0) N_i(w_0)\\) determined reproduction offspring mature individuals population \\(R_i\\): \\[\\begin{equation}   g_i(w_0)N_i(w_0) = R_i. \\end{equation}\\] rest formulation model rests number ``standard’’ assumptions ecology fisheries science encounters predators prey leads growth \\(g_i(w)\\) reproduction \\(R_i\\) predators, mortality prey \\(\\mu_i(w)\\). detailed exposition model see section mizer size-spectrum model. easiest learn basics mizer examples. looking four set-ups framework, increasing complexity. one article describes set model, run different scenarios, explore results. recommend explore following order:","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/mizer.html","id":"single-species-model","dir":"Articles","previous_headings":"Size-spectrum models","what":"Single-species model","title":"Getting started with mizer","text":"single-species model(https://sizespectrum.org/mizer/dev/articles/single_species_size-spectrum_dynamics.html good starting point allows one understand main features size-spectrum modelling without complexities multi-species interactions. model describes single species fixed background community. allows exploration shape species size spectrum determined growth death rates individuals species. article gives first glimpse work mizer, simplified setting.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/mizer.html","id":"community-model","dir":"Articles","previous_headings":"Size-spectrum models","what":"Community model","title":"Getting started with mizer","text":"community model, individuals characterized size represented single group representing across-species average. Community size spectrum models used investigate abundance size spectra emerge solely individual-level process size-based predation fishing impacts metrics community-level size spectra. Since parameters required used investigating large-scale community-level questions detailed trait- species-level parameterisations tractable.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/mizer.html","id":"trait-based-model","dir":"Articles","previous_headings":"Size-spectrum models","what":"Trait-based model","title":"Getting started with mizer","text":"trait-based model resolves continuum species varying asymptotic sizes. asymptotic size considered important trait characterizes species’ life history. continuum represented discrete number species spread evenly range asymptotic sizes. number species important affect general dynamics model. Many parameters, preferred predator-prey mass ratio, species. model parameters determined asymptotic size. example, weight maturation species set fraction asymptotic size. trait-based model, species-level complexity captured different life histories, intra- inter-specific size spectra emerge. approach powerful examining generic population whole community level responses size species selective fishing without requirement detailed species-specific parameters.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/mizer.html","id":"multispecies-model","dir":"Articles","previous_headings":"Size-spectrum models","what":"Multispecies model","title":"Getting started with mizer","text":"multispecies model individual species resolved detail distinct life history, feeding reproduction parameters. detailed information required parameterise multispecies model approach can used address management strategies realistic community specific region subset interacting species.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/mizer.html","id":"which-model-to-use","dir":"Articles","previous_headings":"Size-spectrum models","what":"Which model to use","title":"Getting started with mizer","text":"models predict abundance, biomass yield well predation mortality rates size. useful establishing baselines abundance unexploited communities, understanding fishing impacts aquatic communities testing indicators developed support ecosystem approach fisheries management. model use specific case depends needs amount information available calibrate model. multi-species model set systems calibration parameters can estimated. requires lot insight data. parameters just guesstimates results multi-species model accurate results trait-based model. situations therefore recommend use trait-based model, even though provides general information asymptotic size distribution specific species. community model useful large-scale community-level questions average spectrum needed. Care taken community model used infer dynamical properties marine ecosystems, since prone unrealistically strong oscillations due lack dampening effects provided life-history diversity trait-based multi-species models. single-species model mainly pedagogical use comparison single-species fisheries models. important aim size-spectrum modelling get away single-species thinking.","code":""},{"path":[]},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/articles/model_description.html","id":"consumer-densities","dir":"Articles","previous_headings":"Size spectrum dynamics","what":"Consumer densities","title":"The General Mizer Size-spectrum Model","text":"model assumes , first approximation, individual can characterized weight \\(w\\) species number \\(\\) . aim model calculate size spectrum \\(N_i(w)\\), density individuals species \\(\\) \\(\\int_w^{w+dw}N_i(w)dw\\) number individuals species \\(\\) size interval \\([w,w+dw]\\). words: number individuals size range area number density \\(N_i(w)\\). plot example size spectrum two species \\(N_i(w)\\) vertical axis \\(=1,2\\) \\(w\\) horizontal axis.  represent continuous size spectrum computer, size variable \\(w\\) discretized vector w discrete weights, providing grid sizes spanning range smallest egg size largest asymptotic size. grid values divide full size range finite number size bins. size bins chosen small enough avoid discretisation errors becoming big. can fetch vector w() vector bin sizes dw(). weight grid set logarithmically spaced, w[j]=w[1]*10^(j*dx) fixed dx. means bin widths increase size: dw[j] = w[j+1] - w[j] = w[j] * (10^dx - 1). grid set automatically creating MizerParams object. code size spectrum stored array N N[, ] holds density \\(N_i(w_a)\\) weights \\(w_a=\\)w[], , time dependence included, array N[, , u] holds \\(N_i(w_a,t_u)\\). See N(). Note , contrary one might expected, N[, ] number individuals size bin density grid point. number individuals size bin w[] w[+1]=w[]+dw[] approximately given N[, ]*dw[], dw[]= w[+1]-w[]. course calculations discrete sizes size bins giving approximations continuous values, approximations get better smaller size bins , .e., size bins used. functions setting MizerParams objects allow choose number size bins no_w.","code":"library(mizer) params <- newTraitParams(no_sp = 2, min_w = 1e-3) plotSpectra(params, resource = FALSE, power = 0)"},{"path":"https://sizespectrum.org/mizer/dev/articles/model_description.html","id":"traffic-on-the-road-to-adulthood","dir":"Articles","previous_headings":"Size spectrum dynamics","what":"Traffic on the road to adulthood","title":"The General Mizer Size-spectrum Model","text":"good way think time evolution number density \\(N_i(w)\\) consider familiar situation traffic density roads. fish’s life journey along size axis egg size size death. many fish making journey. speed fish move along size axis growth rate. quite analogous speed traffic road. Just speed cars depends density cars road, growth rate fish depends density fish. density cars stretch road high, speed decreases, leads pile-can lead traffic jams. Similarly density fish size interval high, growth rate goes due competition food sources, can lead pile-ups bottlenecks. one just replace space variable traffic model size get equation fish size spectra. additional feature evolution fish densities present road traffic density fish can die growing , death rate also dependent density fish. time evolution number density \\(N_i(w)\\) described McKendrick-von Foerster equation, transport equation (one use traffic density) additional loss term due fish mortality: \\[\\begin{equation}   \\label{eq:MvF}   \\frac{\\partial N_i(w)}{\\partial t} + \\frac{\\partial g_i(w) N_i(w)}{\\partial w}   = -\\mu_i(w) N_i(w), \\end{equation}\\] individual growth \\(g_i(w)\\) described Growth section mortality \\(\\mu_i(w)\\) described Mortality section. need understand mathematical notation used equation understand origin: just says rate number fish size bracket changes rate fish grow size bracket smaller size minus rate fish grow larger size minus rate fish size bracket die. simulate size spectrum dynamics need specify growth rates mortality rates. . important point rates depend density fish sizes, making size-spectrum dynamics non-linear non-local interesting ways. resulting effects complicated disentangle pure thought. simulations mizer package come . McKendrick-von Foerster equation approximated mizer finite-difference method. allows project() function mizer project size spectrum forwards time: Given spectrum one time project() function calculates set later times. course also needs reproduction smallest size class, otherwise small fish . smallest size class instead rate growth size class rate reproduction new individuals size class. reproduction described Reproduction section.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/model_description.html","id":"resource-density","dir":"Articles","previous_headings":"Size spectrum dynamics","what":"Resource density","title":"The General Mizer Size-spectrum Model","text":"Besides fish spectrum also resource spectrum \\(N_R(w)\\), representing example phytoplankton. spectrum starts smaller size fish spectrum, order provide food also smallest individuals (larvae) fish spectrum. default time evolution resource spectrum described semi-chemostat equation. semichemostat dynamics given \\[\\begin{equation}   \\label{eq:nb}   \\frac{\\partial N_R(w,t)}{\\partial t}   = r_R(w) \\Big[ c_R (w) - N_R(w,t) \\Big] - \\mu_R(w) N_R(w,t). \\end{equation}\\] \\(r_R(w)\\) resource regeneration rate \\(c_R(w)\\) carrying capacity absence predation. parameters changed setResource(). default mizer assumes allometric forms \\[r_R(w)= r_R\\, w^{n-1}.\\] \\[c_R(w)=\\kappa\\, w^{-\\lambda}.\\] can retrieve getResourceRate() getResourceCapacity() respectively. also possible implement resource dynamics, described help page setResource(). mortality \\(\\mu_R(w)\\) due predation consumers described subsection Resource mortality. resource spectrum spans larger range sizes sizes resource spectrum spans larger range sizes sizes resource spectrum spans larger range sizes sizes discretized different vector weights resource spectrum represented vector NResource NResource[c] =\\(N_R(\\)w_full[c]\\()\\).","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/model_description.html","id":"growth","dir":"Articles","previous_headings":"","what":"Growth","title":"The General Mizer Size-spectrum Model","text":"Consumers can grow consuming prey. next subsections build towards determining growth rate resulting predation. discuss model predator-prey encounter rate, resulting rate consumption, rate metabolic losses, partitioning remaining energy reproduction growth.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/model_description.html","id":"sec:pref","dir":"Articles","previous_headings":"Growth","what":"Predator-prey encounter rate","title":"The General Mizer Size-spectrum Model","text":"rate predator species \\(\\) weight \\(w\\) encounters food (mass per time) determined summing prey species resource spectrum integrating prey sizes \\(w_p\\), weighted selectivity factors: \\[\\begin{equation}   \\label{eq:1}   E_{}(w) = \\gamma_i(w) \\int \\left(\\sum_{j} \\theta_{ij} N_j(w_p) +    \\theta_{iR} N_R(w_p) \\right)   \\phi_i(w,w_p) w_p \\, dw_p. \\end{equation}\\] calculated getEncounter(). overall prefactor \\(\\gamma_i(w)\\) sets predation power predator. interpreted search volume. set setSearchVolume(). default assumed scale allometrically \\(\\gamma_i(w) = \\gamma_i\\, w^q.\\) \\(\\theta\\) matrix sets interaction strength predators various prey species resource. changed setInteraction(). size selectivity encoded predation kernel \\(\\phi_i(w,w_p)\\). changed setPredKernel(). important simplification occurs predation kernel \\(\\phi_i(w,w_p)\\) depends size prey predator/prey size ratio \\(w_p/w\\), \\[\\phi_i(w, w_p)=\\tilde{\\phi}_i(w/w_p).\\] assumed default can overruled. default predation kernel truncated log-normal function \\[   \\label{eq:4}   \\tilde{\\phi}_i(x) = \\begin{cases}   \\exp \\left[ \\dfrac{-(\\ln(x / \\beta_i))^2}{2\\sigma_i^2} \\right]   &\\text{ }x\\\\left[0,\\beta_i\\exp(3\\sigma_i)\\right]\\\\   0&\\text{ otherwise,}   \\end{cases} \\] \\(\\beta_i\\) preferred predator-prey mass ratio \\(\\sigma_i\\) sets width predation kernel. integral expression encounter rate approximated Riemann sum weight brackets: \\[ {\\tt encounter}[,] = {\\tt search\\_vol}[,]\\sum_{k} \\left( n_{R}[k] + \\sum_{j} \\theta[,j] n[j,k] \\right)   \\phi_i\\left(w[],w[k]\\right) w[k]\\, dw[k]. \\] case predation kernel depends \\(w/w_p\\) , becomes convolution sum can evaluated efficiently via fast Fourier transform.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/model_description.html","id":"consumption","dir":"Articles","previous_headings":"Growth","what":"Consumption","title":"The General Mizer Size-spectrum Model","text":"encountered food consumed subject standard Holling functional response type II represent satiation. determines feeding level \\(f_i(w)\\), dimensionless number 0 (food) 1 (fully satiated) \\(1-f_i(w)\\) proportion encountered food consumed. feeding level given \\[\\begin{equation}   \\label{eq:f}   f_i(w) = \\frac{E_i(w)}{E_i(w) + h_i(w)}, \\end{equation}\\] \\(h_i(w)\\) maximum consumption rate. changed setMaxIntakeRate(). default mizer assumes allometric form \\(h_i(w) = h_i\\, w^n.\\) feeding level calculated function getFeedingLevel(). rate food consumed \\[\\begin{equation} (1-f_i(w))E_{}(w)=f_i(w)\\, h_i(w). \\end{equation}\\]","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/model_description.html","id":"metabolic-losses","dir":"Articles","previous_headings":"Growth","what":"Metabolic losses","title":"The General Mizer Size-spectrum Model","text":"consumed food used fuel needs metabolism activity movement, rate \\({\\tt metab}_i(w)\\). default made standard metabolism, scaling exponent \\(p\\), loss due activity movement, scaling exponent \\(1\\): \\[{\\tt metab}_i(w) = k_{s.}\\,w^p + k_i\\,w.\\] See help page setMetabolicRate(). remaining rate, , assimilated efficiency \\(\\alpha_i\\) available growth reproduction. rate energy becomes available growth reproduction \\[\\begin{equation}   \\label{eq:Er}   E_{r.}(w) = \\max(0, \\alpha_i f_i(w)\\, h_i(w) - {\\tt metab}_i(w)) \\end{equation}\\] calculated getEReproAndGrowth() function.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/model_description.html","id":"sec:repro","dir":"Articles","previous_headings":"Growth","what":"Investment into reproduction","title":"The General Mizer Size-spectrum Model","text":"proportion \\(\\psi_i(w)\\) energy available growth reproduction used reproduction. proportion change zero weight \\(w_{m.}\\) maturation one asymptotic weight \\(w_{\\infty.}\\), available energy used reproduction. function changed setReproduction(). Mizer provides default form function can however overrule.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/model_description.html","id":"growth-1","dir":"Articles","previous_headings":"Growth","what":"Growth","title":"The General Mizer Size-spectrum Model","text":"left metabolism reproduction taken account invested somatic growth. Thus growth rate \\[\\begin{equation}   \\label{eq:growth}   g_i(w) = E_{r.}(w)\\left(1-\\psi_i(w)\\right). \\end{equation}\\] calculated getEGrowth() function. food supply cover requirements metabolism activity, growth reproduction stops, .e. negative growth. individual subjected starvation mortality, starvation mortality implemented core mizer provided mizerStarvation extension package.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/model_description.html","id":"mortality","dir":"Articles","previous_headings":"","what":"Mortality","title":"The General Mizer Size-spectrum Model","text":"mortality rate individual \\(\\mu_i(w)\\) three sources: predation mortality \\(\\mu_{p.}(w)\\), background mortality \\(\\mu_{ext.}(w)\\) fishing mortality \\(\\mu_{f.}(w)\\). Predation mortality calculated eaten translates corresponding predation mortalities ingested prey individuals. Recalling \\(1-f_j(w)\\) proportion food encountered predator species \\(j\\) weight \\(w\\) actually consumed, rate predators species \\(j\\) consume prey size \\(w_p\\) \\[\\begin{equation}   \\label{eq:pred_rated}   {\\tt pred\\_rate}_j(w_p) = \\int \\phi_j(w,w_p) (1-f_j(w))   \\gamma_j(w) N_j(w) \\, dw. \\end{equation}\\] predation rate calculated function getPredRate(). integral approximated Riemann sum fish weight brackets. \\[ {\\tt pred\\_rate}[j,c] = \\sum_{}   {\\tt pred_kernel}[j,,c]\\,(1-{\\tt feeding_level}[j,])\\,   \\gamma[j,]\\,n[j,]\\,dw[]. \\] mortality rate due predation obtained \\[\\begin{equation}   \\label{eq:mup}   \\mu_{p.}(w_p) = \\sum_j {\\tt pred\\_rate}_j(w_p)\\, \\theta_{ji}. \\end{equation}\\] predation mortality rate calculated function getPredMort(). External mortality \\(\\mu_{ext.}(w)\\) independent abundances changed setExtMort(). default mizer assumes external mortality species constant \\(z0_i\\) independent size. value \\(z0_i\\) either specified species parameter assumed depend allometrically asymptotic size: \\[z0_i = z0_{pre} w_{\\infty.}^{1-n}.\\]","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/model_description.html","id":"fishing-mortality","dir":"Articles","previous_headings":"Mortality","what":"Fishing mortality","title":"The General Mizer Size-spectrum Model","text":"fishing parameters model set setFishing(), can find details set gears different selectivities capabilities different species. Fishing mortality \\(\\mu_{f.}(w)\\) calculated function getFMort().","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/model_description.html","id":"total-mortality","dir":"Articles","previous_headings":"Mortality","what":"Total mortality","title":"The General Mizer Size-spectrum Model","text":"total mortality rate \\[\\mu_i(w)=\\mu_{p.}(w)+\\mu_{ext,u}(w)+\\mu_{f.}(w)\\] calculated function getMort().","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/model_description.html","id":"resource-mortality","dir":"Articles","previous_headings":"Mortality","what":"Resource Mortality","title":"The General Mizer Size-spectrum Model","text":"predation mortality rate resource given similar expression predation mortality fish: \\[\\begin{equation}   \\label{eq:mupp}   \\mu_{p}(w_p) = \\sum_j {\\tt pred\\_rate}_j(w_p)\\, \\theta_{jp}. \\end{equation}\\] mortality resource currently implemented mizer. calculated function getResourceMort().","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/articles/model_description.html","id":"energy-invested-into-reproduction","dir":"Articles","previous_headings":"Reproduction","what":"Energy invested into reproduction","title":"The General Mizer Size-spectrum Model","text":"total rate investment reproduction (grams/year) found integrating contribution individuals species \\(\\), invests proportion \\(\\psi_i(w)\\) consumption. total rate energy investment can converted total rate egg production \\(R_{p.}\\) (numbers per year): \\[\\begin{equation}   \\label{eq:Rp}   R_{p.} = \\frac{\\epsilon}{2 w_0} \\int N_i(w)  E_{r.}(w) \\psi_i(w) \\, dw, \\end{equation}\\] total rate investment multiplied efficiency factor \\(\\epsilon\\) dividing egg weight \\(w_0\\) convert energy number eggs. result multiplied factor \\(1/2\\) take account females reproduce. rate potential egg production calculated getRDI().","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/model_description.html","id":"density-dependence-in-reproduction","dir":"Articles","previous_headings":"Reproduction","what":"Density-dependence in reproduction","title":"The General Mizer Size-spectrum Model","text":"Three important density-dependent mechanisms widely assumed fisheries models automatically captured mizer model lead emergent stock-recruitment relationship: High density spawners leads reduced food income spawners consequently reduced per-capita reproduction. High density larvae leads slower growth larvae due food competition, exposing larvae high mortality longer time, thereby decreasing survivorship recruitment size. High density fish leads predation eggs fish larvae fish species cannibalism. However sources density dependence explicitly modelled mechanistically mizer. example limited carrying capacity suitable spawning grounds spatial effects. requires additional phenomenological density dependent contributions stock-recruitment. mizer type density dependence modelled constraints egg production survival. default functional form density dependence represented reproduction rate \\(R_i\\) (numbers per time) approaches maximum energy invested reproduction increases, modelled mathematically analogous Beverton-Holt type function: \\[\\begin{equation}   \\label{eq:R}   R_i = R_{\\max.} \\frac{R_{p.}}{R_{p.} + R_{\\max.}}, \\end{equation}\\] \\(R_{\\max.}\\) maximum reproduction rate trait class. final rate reproduction calculated getRDD(). default Beverton-Holt type implemented BervertonHoldRDD() mizer also provides alternatives RickerRDD(), SheperdRDD(), constantRDD() noRDD(). Also, users able write functions, e.g. hockey-stick. See setReproduction() details.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/articles/multispecies_model.html","id":"overview","dir":"Articles","previous_headings":"Setting up a multispecies model","what":"Overview","title":"The Multi Species Model","text":"MizerParams class used storing model parameters. already met MizerParams class looked community trait-based models. However, set multispecies model need specify many parameters.probably complicated part using mizer package, take slowly. MizerParams object stores : life-history parameters species community, asymptotic size \\(w_{\\infty}\\); size-based biological parameters species, search volume; density-dependent reproduction functions parameters species; interaction matrix describe spatial overlap pairs species; parameters relating growth dynamics resource spectrum; fishing gear parameters: selectivity catchability. Note MizerParams class store parameters can vary time, fishing effort population abundance. stored MizerSim class come later section running simulation. Although MizerParams class contains lot information, relatively straightforward set use. Objects class MizerParams created using constructor method newMultispeciesParams() (constructor method called MizerParams() previous version mizer). constructor method can take many arguments. However, creation simplified many arguments default values. rest section look main arguments newMultispeciesParams() function. help understand constructor used MizerParams class relates equations given model description section, example section create example parameter objects using data comes mizer package.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/multispecies_model.html","id":"sec:species_parameters_dataframe","dir":"Articles","previous_headings":"Setting up a multispecies model","what":"The species parameters","title":"The Multi Species Model","text":"Although many arguments used creating MizerParams object optional, one argument must supplied user: species specific parameters. stored single data.frame object. data.frame arranged species parameter, column parameter row parameters one species model. Although possible create data.frame hand R, probably easier create data externally .csv file (perhaps using suitable open source spreadsheet LibreOffice) read data R. species model community certain parameters essential default values. user must provide values parameters. also essential parameters default values, selectivity function parameters, calculated internally using default relationships explicitly provided. defaults used parameters found data.frame. essential columns species parameters data.frame default values : species, names species community w_inf, asymptotic mass species.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/multispecies_model.html","id":"sec:fishing_gear","dir":"Articles","previous_headings":"Setting up a multispecies model","what":"The gear parameters","title":"The Multi Species Model","text":"mizer, fishing mortality imposed species fishing gears. total fishing mortality obtained summing mortality gears, \\[\\begin{equation} %     {#eq:muf}     \\mu_{f.}(w) = \\sum_g F_{g,}(w), \\end{equation}\\] fishing mortality \\(F_{g,}(w)\\) imposed gear \\(g\\) species \\(\\) size \\(w\\) calculated : \\[\\begin{equation} %     {#eq:sel}     F_{g,}(w) = S_{g,}(w) Q_{g,} E_{g} \\end{equation}\\] \\(S\\) selectivity species, gear size, \\(Q\\) catchability species gear \\(E\\) fishing effort gear. selectivity size range 0 (selected size) 1 (fully selected size). Catchability used additional scalar make link gear selectivity, fishing effort fishing mortality. example, can set effort 1 gives desired fishing mortality. way effort can specified relative ‘base effort’, e.g. effort particular year. Selectivity catchability stored arrays MizerParams object. However user create arrays hand provide data frame necessary information. particular selectivity can calculate specifying functions selectivity curves. Mizer provides range selectivity functions user just needs specify parameters gear species gear_params data frame. details can found help page setFishing(). Fishing effort stored MizerParams object. Instead, effort set simulation run can vary time (see section running simulation).","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/multispecies_model.html","id":"sec:params_example","dir":"Articles","previous_headings":"Setting up a multispecies model","what":"Example of making MizerParams objects","title":"The Multi Species Model","text":"mentioned preceding sections, object MizerParams created using newMultispeciesParams() constructor method. first step prepare species specific parameter data.frame. mentioned , one way use spreadsheet save .csv file. use approach . example .csv file included package. contains species parameters multispecies North Sea model. location file can found running file can opened spreadsheets text editor inspect. can loaded R reads .csv file R form data.frame. can check class: Let’s look data frame: can see \\(12\\) species \\(7\\) columns parameters: species, w_inf,w_mat,beta,sigma,R_max k_vb. parameters, species w_inf essential default values (described section species parameters). w_inf asymptotic size species, w_mat maturity size, beta sigma parameters predation kernel (default mizer uses log-normal predation kernel). R_max parameter introducing additional density dependence reproduction parameter using Beverton-Holt type function (see setReproduction() details). final column, k_vb, used calculate values h gamma. column essential h gamma included data.frame. also possible include h gamma columns data.frame include k_vb column. values non-essential species specific parameters, like example alpha, k, ks, z0, w_min erepro, included data.frame. means default values automatically used create MizerParams object. example set gear parameters. columns describing fishing selectivity. sel_func column determine selectivity function. means default selectivity function, knife_edge, used. mentioned section fishing gears, function also needs another argument, knife_edge_size. present data.frame set default value w_mat. Also, catchability column default value catchability 1 used gears species. create MizerParams object pass species parameter data.frame newMultispeciesParams() constructor method: just created MizerParams object: MizerParams object also stores copy species parameter data frame provided. can look species_params(): can see returns original species data.frame (w_inf ), plus default values may included original data.frame. example, can see now columns alpha h gamma etc. Also note default fishing gears set . Even though provide gear parameter data frame, MizerParams object one can access species caught gear called “knife_edge_gear”. selectivity function fishing gear set sel_func column default function, knife_edge(). catchability column added default value 1 species gear catches. example setting catchability hand can seen section North Sea. summary() method MizerParams objects prints useful summary model parameters: well giving summary species model gear fishing species, gives summary size structure community. example \\(100\\) size classes community, ranging \\(0.001\\) \\(4\\times 10^{4}\\) . values controlled arguments no_w, min_w max_w respectively. example, wanted 200 size classes model use:","code":"params_location <- system.file(\"extdata\", \"NS_species_params.csv\", package = \"mizer\") species_params <- read.csv(params_location) class(species_params) ## [1] \"data.frame\" species_params ##    species w_inf w_mat   beta sigma    R_max  k_vb ## 1    Sprat    33    13  51076   0.8 7.38e+11 0.681 ## 2  Sandeel    36     4 398849   1.9 4.10e+11 1.000 ## 3   N.pout   100    23     22   1.5 1.05e+13 0.849 ## 4  Herring   334    99 280540   3.2 1.11e+12 0.606 ## 5      Dab   324    21    191   1.9 1.12e+10 0.536 ## 6  Whiting  1192    75     22   1.5 5.48e+11 0.323 ## 7     Sole   866    78    381   1.9 3.87e+10 0.284 ## 8  Gurnard   668    39    283   1.8 1.65e+12 0.266 ## 9   Plaice  2976   105    113   1.6 4.08e+14 0.122 ## 10 Haddock  3485   165    558   2.1 1.84e+12 0.271 ## 11     Cod 40044  1606     66   1.3 8.26e+09 0.216 ## 12  Saithe 16856  1076     40   1.1 1.12e+11 0.175 params <- newMultispeciesParams(species_params) ## No h provided for some species, so using f0 and k_vb to calculate it. ## No ks column so calculating from critical feeding level. ## Using z0 = z0pre * w_inf ^ z0exp for missing z0 values. class(params) ## [1] \"MizerParams\" ## attr(,\"package\") ## [1] \"mizer\" species_params(params) ##         species w_inf w_mat   beta sigma    R_max  k_vb w_min alpha ## Sprat     Sprat    33    13  51076   0.8 7.38e+11 0.681 0.001   0.6 ## Sandeel Sandeel    36     4 398849   1.9 4.10e+11 1.000 0.001   0.6 ## N.pout   N.pout   100    23     22   1.5 1.05e+13 0.849 0.001   0.6 ## Herring Herring   334    99 280540   3.2 1.11e+12 0.606 0.001   0.6 ## Dab         Dab   324    21    191   1.9 1.12e+10 0.536 0.001   0.6 ## Whiting Whiting  1192    75     22   1.5 5.48e+11 0.323 0.001   0.6 ## Sole       Sole   866    78    381   1.9 3.87e+10 0.284 0.001   0.6 ## Gurnard Gurnard   668    39    283   1.8 1.65e+12 0.266 0.001   0.6 ## Plaice   Plaice  2976   105    113   1.6 4.08e+14 0.122 0.001   0.6 ## Haddock Haddock  3485   165    558   2.1 1.84e+12 0.271 0.001   0.6 ## Cod         Cod 40044  1606     66   1.3 8.26e+09 0.216 0.001   0.6 ## Saithe   Saithe 16856  1076     40   1.1 1.12e+11 0.175 0.001   0.6 ##         interaction_resource         n   p         q pred_kernel_type        h ## Sprat                      1 0.6666667 0.7 0.7166667        lognormal 14.51026 ## Sandeel                    1 0.6666667 0.7 0.7166667        lognormal 28.36951 ## N.pout                     1 0.6666667 0.7 0.7166667        lognormal 30.69918 ## Herring                    1 0.6666667 0.7 0.7166667        lognormal 31.20041 ## Dab                        1 0.6666667 0.7 0.7166667        lognormal 34.68295 ## Whiting                    1 0.6666667 0.7 0.7166667        lognormal 32.78322 ## Sole                       1 0.6666667 0.7 0.7166667        lognormal 24.90951 ## Gurnard                    1 0.6666667 0.7 0.7166667        lognormal 22.29126 ## Plaice                     1 0.6666667 0.7 0.7166667        lognormal 17.71691 ## Haddock                    1 0.6666667 0.7 0.7166667        lognormal 40.62144 ## Cod                        1 0.6666667 0.7 0.7166667        lognormal 74.81794 ## Saithe                     1 0.6666667 0.7 0.7166667        lognormal 43.50194 ##         k       ks         z0        gamma     w_mat25 m erepro ## Sprat   0 1.598545 0.18705957 5.765885e-11   11.647460 1      1 ## Sandeel 0 3.250607 0.18171206 4.267142e-11    3.583834 1      1 ## N.pout  0 3.318311 0.12926608 9.749884e-11   20.607045 1      1 ## Herring 0 3.212332 0.08647736 2.812559e-11   88.699888 1      1 ## Dab     0 3.760307 0.08735805 7.663981e-11   18.815128 1      1 ## Whiting 0 3.406676 0.05658819 1.041177e-10   67.196884 1      1 ## Sole    0 2.585095 0.06294752 5.308445e-11   69.884760 1      1 ## Gurnard 0 2.367448 0.06863713 5.091838e-11   34.942380 1      1 ## Plaice  0 1.820523 0.04171321 4.774060e-11   94.075638 1      1 ## Haddock 0 4.111691 0.03957464 7.679024e-11  147.833146 1      1 ## Cod     0 7.019866 0.01753768 2.549664e-10 1438.909287 1      1 ## Saithe  0 4.136466 0.02340093 1.797143e-10  964.051303 1      1 gear_params(params) ##                          species            gear   sel_func knife_edge_size ## Sprat, knife_edge_gear     Sprat knife_edge_gear knife_edge              13 ## Sandeel, knife_edge_gear Sandeel knife_edge_gear knife_edge               4 ## N.pout, knife_edge_gear   N.pout knife_edge_gear knife_edge              23 ## Herring, knife_edge_gear Herring knife_edge_gear knife_edge              99 ## Dab, knife_edge_gear         Dab knife_edge_gear knife_edge              21 ## Whiting, knife_edge_gear Whiting knife_edge_gear knife_edge              75 ## Sole, knife_edge_gear       Sole knife_edge_gear knife_edge              78 ## Gurnard, knife_edge_gear Gurnard knife_edge_gear knife_edge              39 ## Plaice, knife_edge_gear   Plaice knife_edge_gear knife_edge             105 ## Haddock, knife_edge_gear Haddock knife_edge_gear knife_edge             165 ## Cod, knife_edge_gear         Cod knife_edge_gear knife_edge            1606 ## Saithe, knife_edge_gear   Saithe knife_edge_gear knife_edge            1076 ##                          catchability ## Sprat, knife_edge_gear              1 ## Sandeel, knife_edge_gear            1 ## N.pout, knife_edge_gear             1 ## Herring, knife_edge_gear            1 ## Dab, knife_edge_gear                1 ## Whiting, knife_edge_gear            1 ## Sole, knife_edge_gear               1 ## Gurnard, knife_edge_gear            1 ## Plaice, knife_edge_gear             1 ## Haddock, knife_edge_gear            1 ## Cod, knife_edge_gear                1 ## Saithe, knife_edge_gear             1 summary(params) ## An object of class \"MizerParams\"  ## Consumer size spectrum: ##  minimum size:   0.001 ##  maximum size:   40044 ##  no. size bins:  100 ## Resource size spectrum: ##  minimum size:   8.6774e-13 ##  maximum size:   9.84582 ##  no. size bins:  171 (218 size bins in total) ## Species details: ##    species w_inf w_mat w_min  k_vb   beta sigma ## 1    Sprat    33    13 0.001 0.681  51076   0.8 ## 2  Sandeel    36     4 0.001 1.000 398849   1.9 ## 3   N.pout   100    23 0.001 0.849     22   1.5 ## 4  Herring   334    99 0.001 0.606 280540   3.2 ## 5      Dab   324    21 0.001 0.536    191   1.9 ## 6  Whiting  1192    75 0.001 0.323     22   1.5 ## 7     Sole   866    78 0.001 0.284    381   1.9 ## 8  Gurnard   668    39 0.001 0.266    283   1.8 ## 9   Plaice  2976   105 0.001 0.122    113   1.6 ## 10 Haddock  3485   165 0.001 0.271    558   2.1 ## 11     Cod 40044  1606 0.001 0.216     66   1.3 ## 12  Saithe 16856  1076 0.001 0.175     40   1.1 ##  ## Fishing gear details: ## Gear          Effort  Target species  ##  ---------------------------------- ## knife_edge_gear 0.00   Sprat, Sandeel, N.pout, Herring, Dab, Whiting, Sole, Gurnard, Plaice, Haddock, Cod, Saithe params200 <- newMultispeciesParams(species_params, no_w = 200) summary(params200)"},{"path":"https://sizespectrum.org/mizer/dev/articles/multispecies_model.html","id":"setting-the-interaction-matrix","dir":"Articles","previous_headings":"Setting up a multispecies model","what":"Setting the interaction matrix","title":"The Multi Species Model","text":"far created MizerParams object passing species parameter data.frame argument. specify interaction matrix. interaction matrix describes interaction pair species model. can viewed proxy spatial interaction e.g. model predator-prey interaction size based. values interaction matrix used scale encountered food [getEncounter()] predation mortality rate [getPredMort()] (see section predator-prey encounter rate predation mortality). entries interaction matrix dimensionless numbers taking values 0 (species overlap therefore interact ) 1 (species overlap perfectly). default mizer sets values 1, implying species fully interact , .e. species spread homogeneously across model area. North Sea case model improved also including interaction matrix describes spatial overlap species. example interaction matrix North Sea included mizer .csv file. location file can found running: Take look spreadsheet want. mentioned , read file R can make use read.csv() function. However, time want first column .csv file row names. therefore use additional argument read.csv() function: row.names. can set interaction matrix existing MizerParams object params setInteraction() function: Alternatively, instead changing interaction matrix existing MizerParams object, created new object scratch interaction matrix passing newMultispeciesParams(): Note first argument must species parameters data.frame. remaining arguments can order named. using default values parameters. now need start running projections. get though, ’ll take quick look different fishing gears can set .","code":"getInteraction(params) ##          prey ## predator  Sprat Sandeel N.pout Herring Dab Whiting Sole Gurnard Plaice Haddock ##   Sprat       1       1      1       1   1       1    1       1      1       1 ##   Sandeel     1       1      1       1   1       1    1       1      1       1 ##   N.pout      1       1      1       1   1       1    1       1      1       1 ##   Herring     1       1      1       1   1       1    1       1      1       1 ##   Dab         1       1      1       1   1       1    1       1      1       1 ##   Whiting     1       1      1       1   1       1    1       1      1       1 ##   Sole        1       1      1       1   1       1    1       1      1       1 ##   Gurnard     1       1      1       1   1       1    1       1      1       1 ##   Plaice      1       1      1       1   1       1    1       1      1       1 ##   Haddock     1       1      1       1   1       1    1       1      1       1 ##   Cod         1       1      1       1   1       1    1       1      1       1 ##   Saithe      1       1      1       1   1       1    1       1      1       1 ##          prey ## predator  Cod Saithe ##   Sprat     1      1 ##   Sandeel   1      1 ##   N.pout    1      1 ##   Herring   1      1 ##   Dab       1      1 ##   Whiting   1      1 ##   Sole      1      1 ##   Gurnard   1      1 ##   Plaice    1      1 ##   Haddock   1      1 ##   Cod       1      1 ##   Saithe    1      1 inter_location <- system.file(\"extdata\", \"NS_interaction.csv\", package = \"mizer\") inter <- read.csv(inter_location, row.names = 1) inter ##              Sprat    Sandeel     N.pout    Herring        Dab    Whiting ## Sprat   0.72912919 0.03408440 0.06354517 0.27416982 0.36241552 0.26525924 ## Sandeel 0.03408440 0.68119882 0.04892432 0.05888214 0.09736663 0.07510011 ## N.pout  0.06354517 0.04892432 0.79660429 0.29755069 0.09088798 0.29989886 ## Herring 0.27416982 0.05888214 0.29755069 0.65890104 0.28963957 0.37373927 ## Dab     0.36241552 0.09736663 0.09088798 0.28963957 0.80817768 0.33389727 ## Whiting 0.26525924 0.07510011 0.29989886 0.37373927 0.33389727 0.70928230 ## Sole    0.29795558 0.06020860 0.01679020 0.20014139 0.38047464 0.19227455 ## Gurnard 0.17515576 0.05992649 0.30624141 0.27510627 0.22041200 0.37109904 ## Plaice  0.37065975 0.07801855 0.07855818 0.27791867 0.56492206 0.29503807 ## Haddock 0.08135547 0.09395730 0.54917554 0.34835469 0.13168065 0.39164787 ## Cod     0.33757969 0.09943453 0.32502256 0.40477930 0.41647801 0.44060879 ## Saithe  0.01681321 0.01609022 0.29498937 0.12620591 0.03138197 0.10228168 ##               Sole    Gurnard     Plaice    Haddock        Cod     Saithe ## Sprat   0.29795558 0.17515576 0.37065975 0.08135547 0.33757969 0.01681321 ## Sandeel 0.06020860 0.05992649 0.07801855 0.09395730 0.09943453 0.01609022 ## N.pout  0.01679020 0.30624141 0.07855818 0.54917554 0.32502256 0.29498937 ## Herring 0.20014139 0.27510627 0.27791867 0.34835469 0.40477930 0.12620591 ## Dab     0.38047464 0.22041200 0.56492206 0.13168065 0.41647801 0.03138197 ## Whiting 0.19227455 0.37109904 0.29503807 0.39164787 0.44060879 0.10228168 ## Sole    0.71558049 0.10677895 0.39137317 0.03447799 0.25761229 0.01242055 ## Gurnard 0.10677895 0.88010500 0.16492120 0.35735444 0.35183282 0.12351994 ## Plaice  0.39137317 0.16492120 0.71922391 0.11248513 0.35043671 0.03294939 ## Haddock 0.03447799 0.35735444 0.11248513 0.85830725 0.39577341 0.26167470 ## Cod     0.25761229 0.35183282 0.35043671 0.39577341 0.78654705 0.20894496 ## Saithe  0.01242055 0.12351994 0.03294939 0.26167470 0.20894496 0.66383553 params <- setInteraction(params, interaction = inter) params_new <- newMultispeciesParams(species_params, interaction = inter) ## No h provided for some species, so using f0 and k_vb to calculate it. ## No ks column so calculating from critical feeding level. ## Using z0 = z0pre * w_inf ^ z0exp for missing z0 values."},{"path":"https://sizespectrum.org/mizer/dev/articles/multispecies_model.html","id":"sec:setting_different_gears","dir":"Articles","previous_headings":"Setting up a multispecies model","what":"Setting different gears","title":"The Multi Species Model","text":"example, species caught gear (named “knife_edge_gear”). default gear information provided. , look example set four different gears: Industrial, Pelagic, Beam Otter trawl, catch different combinations species. can achieve changing gear column gear_params data frame. can see result calling summary() params object. example gear now catches multiple stocks. example, Industrial gear catches Sprat, Sandeel Norway Pout. want set gears like ? next section running multispecies model see project model time can specify fishing effort gear time. setting gears way can run different management scenarios changing efforts fishing gears rather individual species. also means simulation run can examine catches gear.","code":"gear_params(params) ##                          species            gear   sel_func knife_edge_size ## Sprat, knife_edge_gear     Sprat knife_edge_gear knife_edge              13 ## Sandeel, knife_edge_gear Sandeel knife_edge_gear knife_edge               4 ## N.pout, knife_edge_gear   N.pout knife_edge_gear knife_edge              23 ## Herring, knife_edge_gear Herring knife_edge_gear knife_edge              99 ## Dab, knife_edge_gear         Dab knife_edge_gear knife_edge              21 ## Whiting, knife_edge_gear Whiting knife_edge_gear knife_edge              75 ## Sole, knife_edge_gear       Sole knife_edge_gear knife_edge              78 ## Gurnard, knife_edge_gear Gurnard knife_edge_gear knife_edge              39 ## Plaice, knife_edge_gear   Plaice knife_edge_gear knife_edge             105 ## Haddock, knife_edge_gear Haddock knife_edge_gear knife_edge             165 ## Cod, knife_edge_gear         Cod knife_edge_gear knife_edge            1606 ## Saithe, knife_edge_gear   Saithe knife_edge_gear knife_edge            1076 ##                          catchability ## Sprat, knife_edge_gear              1 ## Sandeel, knife_edge_gear            1 ## N.pout, knife_edge_gear             1 ## Herring, knife_edge_gear            1 ## Dab, knife_edge_gear                1 ## Whiting, knife_edge_gear            1 ## Sole, knife_edge_gear               1 ## Gurnard, knife_edge_gear            1 ## Plaice, knife_edge_gear             1 ## Haddock, knife_edge_gear            1 ## Cod, knife_edge_gear                1 ## Saithe, knife_edge_gear             1 gear_params(params)$gear <- c(\"Industrial\",\"Industrial\",\"Industrial\",                               \"Pelagic\",\"Beam\",\"Otter\",                               \"Beam\",\"Otter\",\"Beam\",                               \"Otter\",\"Otter\",\"Otter\") summary(params) ## An object of class \"MizerParams\"  ## Consumer size spectrum: ##  minimum size:   0.001 ##  maximum size:   40044 ##  no. size bins:  100 ## Resource size spectrum: ##  minimum size:   8.6774e-13 ##  maximum size:   9.84582 ##  no. size bins:  171 (218 size bins in total) ## Species details: ##    species w_inf w_mat w_min  k_vb   beta sigma ## 1    Sprat    33    13 0.001 0.681  51076   0.8 ## 2  Sandeel    36     4 0.001 1.000 398849   1.9 ## 3   N.pout   100    23 0.001 0.849     22   1.5 ## 4  Herring   334    99 0.001 0.606 280540   3.2 ## 5      Dab   324    21 0.001 0.536    191   1.9 ## 6  Whiting  1192    75 0.001 0.323     22   1.5 ## 7     Sole   866    78 0.001 0.284    381   1.9 ## 8  Gurnard   668    39 0.001 0.266    283   1.8 ## 9   Plaice  2976   105 0.001 0.122    113   1.6 ## 10 Haddock  3485   165 0.001 0.271    558   2.1 ## 11     Cod 40044  1606 0.001 0.216     66   1.3 ## 12  Saithe 16856  1076 0.001 0.175     40   1.1 ##  ## Fishing gear details: ## Gear          Effort  Target species  ##  ---------------------------------- ## Industrial     0.00   Sprat, Sandeel, N.pout  ## Pelagic        0.00   Herring  ## Beam           0.00   Dab, Sole, Plaice  ## Otter          0.00   Whiting, Gurnard, Haddock, Cod, Saithe"},{"path":"https://sizespectrum.org/mizer/dev/articles/multispecies_model.html","id":"setting-to-steady-state","dir":"Articles","previous_headings":"Setting up a multispecies model","what":"Setting to steady state","title":"The Multi Species Model","text":"MizerParams object properly set , may case one wishes put system steady state. Sometimes can done simply running model using project() reaches steady state. However, method guaranteed work, function called steady() reliable. function steady() must supplied MizerParams object. takes MizerParams object, looks initial system state, computes levels reproduction different species, hold fixed, evolves system steady state reached (precisely, amount population abundances change time-step small tolerance level). , reproductive efficiency species altered reproduction dynamics turned back (.e., stop holding recruitment levels fixed), values reproduction levels held system fixed realized. steady function sure converge, way re-tunes reproductive efficiency values may realistic, idea alter parameters system steady() arrive steady state sensible reproductive efficiency values. Now know create multispecies model shall discuss run multispecies model.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/plotting.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using ggplot2 and plotly with mizer","text":"tutorial use ggplot2 package theplotly package R visualise results mizer simulations. Mizer provides several functions calculating summaries mizer simulation results, see ?summary_functions. Many functions corresponding plotting functions, see ?plotting_functions. However easy produce customised plots directly using ggplot() plot_ly(). gives flexibility built-plotting functions. Also, occasionally want look different quantities perhaps built-plotting function. cases examples see provide useful blueprint. ggplot2 plotly works data frames, convenient way manipulate data frames dplyr package. create simple simulation use examples .","code":"library(mizer) library(ggplot2) library(plotly) library(dplyr) params <- newMultispeciesParams(NS_species_params) sim <- project(params, t_max = 10, t_save = 0.5, effort = 0)"},{"path":"https://sizespectrum.org/mizer/dev/articles/plotting.html","id":"from-arrays-to-data-frames","dir":"Articles","previous_headings":"","what":"From arrays to data frames","title":"Using ggplot2 and plotly with mizer","text":"Mizer likes work arrays indexed species time size. example built-summary functions return arrays. arrays need converted data frames can conveniently plotted either ggplot() plot_ly. conversion achieved function melt(). example, function getBiomass() returns two-dimensional array (matrix) one dimension corresponding time second dimension species. array can converted melt() function data frame contains one row entry array.","code":"biomass <- getBiomass(sim) str(biomass) ##  num [1:21, 1:12] 8.77e+07 2.52e+09 3.21e+09 7.50e+08 2.09e+08 ... ##  - attr(*, \"dimnames\")=List of 2 ##   ..$ time: chr [1:21] \"0\" \"0.5\" \"1\" \"1.5\" ... ##   ..$ sp  : chr [1:12] \"Sprat\" \"Sandeel\" \"N.pout\" \"Herring\" ... biomass_frame <- melt(biomass) str(biomass_frame) ## 'data.frame':    252 obs. of  3 variables: ##  $ time : num  0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 ... ##  $ sp   : Factor w/ 12 levels \"Sprat\",\"Sandeel\",..: 1 1 1 1 1 1 1 1 1 1 ... ##  $ value: num  8.77e+07 2.52e+09 3.21e+09 7.50e+08 2.09e+08 ..."},{"path":"https://sizespectrum.org/mizer/dev/articles/plotting.html","id":"ggplot2-or-plotly","dir":"Articles","previous_headings":"","what":"ggplot2 or plotly","title":"Using ggplot2 and plotly with mizer","text":"form information can handed plot_ly() converted line plot: specified time plotted along x axis, value along y axis different species represented colours lines. Note American spelling “color” required plotly. Alternatively can thing ggplot():  Notice different syntax ggplot2 plotly packages. underlying ideas similar: implementations grammar graphics. recommend learning ggplot2 first, switching plotly clear advantages (particular animations, see ). main advantage plotly, namely interactivity resulting figures, can obtained also ggplot syntax running result ggplot() function ggplotly(): always plot first give ggplot code plotly code.","code":"pp <- plot_ly(biomass_frame) %>%      add_lines(x = ~time, y = ~value, color = ~sp) pp pg <- ggplot(biomass_frame) +     geom_line(aes(x = time, y = value, colour = sp)) pg ggplotly(pg)"},{"path":"https://sizespectrum.org/mizer/dev/articles/plotting.html","id":"adding-labels","dir":"Articles","previous_headings":"","what":"Adding labels","title":"Using ggplot2 and plotly with mizer","text":"may want add labels figure axes. ggplot done labs().  plotly use layout() function.","code":"pg + labs(title = \"Biomass plot\",           x = \"Time [years]\",           y = \"Biomass [g]\") pp %>% layout(     title = \"Biomass plot\",     xaxis = list(         title = \"Time [years]\"     ),     yaxis = list(         title = \"Biomass [g]\"     ) )"},{"path":"https://sizespectrum.org/mizer/dev/articles/plotting.html","id":"filtering-out-data","dir":"Articles","previous_headings":"","what":"Filtering out data","title":"Using ggplot2 and plotly with mizer","text":"can use filter function filter data. example select data specific species: Now plot reduced data frame get  first converted array data frame melt() selected data interest filter(). alternatively first selected desired entries array created data frame melt() resulting smaller array:  result looks almost identical, except colours associated species changed.","code":"two_species_biomass <- filter(biomass_frame, sp %in% c(\"Gurnard\", \"Herring\")) ggplot(two_species_biomass) +     geom_line(aes(x = time, y = value, color = sp)) nfr <- melt(getBiomass(sim)[, c(\"Gurnard\", \"Herring\")]) ggplot(nfr) +     geom_line(aes(x = time, y = value, color = sp))"},{"path":"https://sizespectrum.org/mizer/dev/articles/plotting.html","id":"specifying-line-colours","dir":"Articles","previous_headings":"","what":"Specifying line colours","title":"Using ggplot2 and plotly with mizer","text":"want make sure species always colour, can use colours specified MizerParams object use colours ggplot add scale_colour_manual():  plotly add colors = getColours(params)r add_lines() command: note American spelling “colors” required plotly.","code":"getColours(params) ##      Sprat    Sandeel     N.pout    Herring        Dab    Whiting       Sole  ##  \"#815f00\"  \"#6237e2\"  \"#8da600\"  \"#de53ff\"  \"#0e4300\"  \"#430079\"  \"#6caa72\"  ##    Gurnard     Plaice    Haddock        Cod     Saithe   Resource      Total  ##  \"#ee0053\"  \"#007957\"  \"#b42979\"  \"#142300\"  \"#a08dfb\"    \"green\"    \"black\"  ## Background    Fishing  ##     \"grey\"      \"red\" ggplot(biomass_frame) +     geom_line(aes(x = time, y = value, color = sp)) +      scale_colour_manual(values = getColours(params)) plot_ly(biomass_frame) %>%      add_lines(x = ~time, y = ~value, color = ~sp,               colors = getColours(params))"},{"path":"https://sizespectrum.org/mizer/dev/articles/plotting.html","id":"plotting-spectra","dir":"Articles","previous_headings":"","what":"Plotting spectra","title":"Using ggplot2 and plotly with mizer","text":"course mizer plotSpectra() function plotting size spectra. instructional create plots hand. can access abundance spectra species via N(sim). three-dimensional array (time x species x size). Let us first look abundance final time. drop = FALSE means result 3 dimensional array. use melt() function convert array data frame. created data frame 4 variables one observation 1200 entries 1 x 12 x rdim(final_n)[3] matrix final_n. first three variables take values dimension names array. course time variable observations, selected creating data frame. fourth variable called value value entry array, abundance density case. lot entries value 0, really interested , makes sense remove : leaves data frame 945 observations. can send data frame ggplot add line spectrum species, different colour , specify want x axis y axis logarithmic scale.  corresponding syntax plotly used pipe operator %>% feeds return value one function first argument next function.","code":"final_n <- N(sim)[idxFinalT(sim), , , drop = FALSE] str(final_n) ##  num [1, 1:12, 1:100] 1.92e+06 4.81e+12 1.15e+14 3.86e+12 1.12e+11 ... ##  - attr(*, \"dimnames\")=List of 3 ##   ..$ time: chr \"10\" ##   ..$ sp  : chr [1:12] \"Sprat\" \"Sandeel\" \"N.pout\" \"Herring\" ... ##   ..$ w   : chr [1:100] \"0.001\" \"0.00119\" \"0.00142\" \"0.0017\" ... nf <- melt(final_n) str(nf) ## 'data.frame':    1200 obs. of  4 variables: ##  $ time : int  10 10 10 10 10 10 10 10 10 10 ... ##  $ sp   : Factor w/ 12 levels \"Sprat\",\"Sandeel\",..: 1 2 3 4 5 6 7 8 9 10 ... ##  $ w    : num  0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 ... ##  $ value: num  1.92e+06 4.81e+12 1.15e+14 3.86e+12 1.12e+11 ... nf <- filter(nf, value > 0) pg <- ggplot(nf) +     geom_line(aes(x = w, y = value, color = sp)) +     scale_x_log10() +     scale_y_log10() pg p <- plot_ly(nf) %>%     add_lines(x = ~w, y = ~value, color = ~sp) %>%      layout(xaxis = list(type = \"log\", exponentformat = \"power\"),            yaxis = list(type = \"log\", exponentformat = \"power\")) p"},{"path":"https://sizespectrum.org/mizer/dev/articles/plotting.html","id":"including-resource-spectrum","dir":"Articles","previous_headings":"","what":"Including resource spectrum","title":"Using ggplot2 and plotly with mizer","text":"can include additional lines plot merging several data frames. example, can include another line resource spectrum. first convert also resource abundance final time data frame filter zero values data frame contains three variables, sp column specifying species. add column value “Resource” Now new data frame columns data frame nf two can bound together Using extended data frame gives following plot:  course use data frame also plotly.","code":"nf_pp <- melt(NResource(sim)[idxFinalT(sim), , drop = FALSE]) %>%      filter(value > 0) nf_pp$sp <- \"Resource\" nf <- rbind(nf, nf_pp) p <- ggplot(nf) +     geom_line(aes(x = w, y = value, color = sp)) +      scale_colour_manual(values = getColours(params)) +     scale_x_log10() +     scale_y_log10() p"},{"path":"https://sizespectrum.org/mizer/dev/articles/plotting.html","id":"limiting-the-axes","dir":"Articles","previous_headings":"","what":"Limiting the axes","title":"Using ggplot2 and plotly with mizer","text":"might want zoom part includes fish. three ways achieve . first use filter() filter rows data frame small w plot resulting data frame usual:  second method specify limits axes. ggplot done adding limits axis scales:  NA means existing limits kept. plotly specify range follows: Note plotly range specified giving logarithm base 10 limits.","code":"nf %>%     filter(w > 10^-4) %>%      ggplot() +     geom_line(aes(x = w, y = value, color = sp)) +      scale_colour_manual(values = getColours(params)) +     scale_x_log10() +     scale_y_log10() ggplot(nf) +     geom_line(aes(x = w, y = value, color = sp)) +      scale_colour_manual(values = getColours(params)) +     scale_x_log10(limits = c(10^-4, NA)) +     scale_y_log10(limits = c(NA, 10^20)) plot_ly(nf) %>%     add_lines(x = ~w, y = ~value, color = ~sp,               colours = getColours(params)) %>%      layout(xaxis = list(type = \"log\", exponentformat = \"power\",                         range = c(-4, 4)),            yaxis = list(type = \"log\", exponentformat = \"power\",                         range = c(-14, 20)))"},{"path":"https://sizespectrum.org/mizer/dev/articles/plotting.html","id":"animating-spectra","dir":"Articles","previous_headings":"","what":"Animating spectra","title":"Using ggplot2 and plotly with mizer","text":"Instead picking specific time can ask plotly make animation showing changing spectra time. melt entire N(sim) array use time variable specify frames frame = ~time argument add_lines(): Note produces smooth animation spite fact saved abundances year. interpolation facilitated line = list(simplify = FALSE) argument. ggplot package provide similarly convenient way creating animations. gganimate package, nearly convenient.","code":"melt(N(sim)) %>%      filter(value > 0) %>%      plot_ly() %>%      add_lines(x = ~w, y = ~value,                color = ~sp, colors = getColours(params),               frame = ~time,               line = list(simplify = FALSE)) %>%      layout(xaxis = list(type = \"log\", exponentformat = \"power\"),            yaxis = list(type = \"log\", exponentformat = \"power\"))"},{"path":"https://sizespectrum.org/mizer/dev/articles/plotting.html","id":"comparing-simulations","dir":"Articles","previous_headings":"","what":"Comparing simulations","title":"Using ggplot2 and plotly with mizer","text":"may also want make plots contrasting results two different simulations, example different fishing policies. illustrate create two simulations different fishing effort: Let us look plot fishing yield time. calculated getYield() function, returns array (time x species) can convert data frame Let’s look plot yield first simulation:  make plot less cluttered, keep 4 important species plot  simulation 2 plot looks like :  Comparison easier combine two plots. add extra variable data frames allow us distinguish merge together. ggplot can now use facet_grid() put plot value effort side--side:  can use linetype aesthetic represent different effort values different line types:  plotly less good faceting, can put arbitrary plots side--side (arrange grid) subplot() Note shareY = TRUE argument suplot() makes sure two plots use scale y axis, similarly shareX = TRUE. Also plotly can now tie effort variable line type. Arguably, ggplot2 nicer job case.","code":"sim1 <- project(params, t_max = 10, t_save = 0.2, effort = 2) sim2 <- project(params, t_max = 10, t_save = 0.2, effort = 4) yield1 <- melt(getYield(sim1)) yield2 <- melt(getYield(sim2)) ggplot(yield1) +     geom_line(aes(x = time, y = value, colour = sp)) yield1 <- filter(yield1, sp %in% c(\"Saithe\", \"Cod\", \"Haddock\", \"N.pout\")) yield2 <- filter(yield2, sp %in% c(\"Saithe\", \"Cod\", \"Haddock\", \"N.pout\")) p1 <- ggplot(yield1) +     geom_line(aes(x = time, y = value, colour = sp)) p1 p2 <- ggplot(yield2) +     geom_line(aes(x = time, y = value, colour = sp)) p2 yield1$effort = as.factor(2) yield2$effort = as.factor(4) yield = rbind(yield1, yield2) ggplot(yield) +     geom_line(aes(x = time, y = value,                    colour = sp)) +     facet_grid(cols = vars(effort)) ggplot(yield) +     geom_line(aes(x = time, y = value,                    colour = sp,                   linetype = effort)) subplot(p1, p2, shareX = TRUE, shareY = TRUE) plot_ly(yield) %>%      add_lines(x = ~time, y = ~value,                color = ~sp, linetype = ~effort)"},{"path":"https://sizespectrum.org/mizer/dev/articles/publications.html","id":"publications-describing-mizer","dir":"Articles","previous_headings":"","what":"Publications describing mizer","title":"Publications","text":"F. Scott, J.L. Blanchard K.H. Andersen: mizer: R package multispecies, trait-based community size spectrum ecological modelling. Methods Ecology Evolution 5(10) 1121-1125 (2014). Contains “official” announcement description mizer K.H. Andersen, N.S. Jacobsen K.D. Farnsworth (2016): theoretical foundations size spectrum models fish communities. Canadian Journal Fisheries Aquatic Science 73(4): 575-588. Describes theoretical background three types size spectrum models K.H. Andersen (2019): Fish Ecology, Evolution, Exploitation - New Theoretical Synthesis. Princeton University Press. depth theory","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/publications.html","id":"publications-using-mizer","dir":"Articles","previous_headings":"","what":"Publications using mizer","title":"Publications","text":"Benoit, D. M., Giacomini, H. C., Chu, C. & Jackson, D. . Identifying influential parameters multi-species fish size spectrum model northern temperate lake sensitivity analyses. Ecological Modelling 460, 109740 (2021). Canales, T. M., Delius, G. W. & Law, R. Regulation fish stocks without stock–recruitment relationships: case small pelagic fish. Fish Fisheries 21, 857–871 (2020). Wo, J. et al. Modeling Dynamics Multispecies Fisheries: Case Study Coastal Water North Yellow Sea, China. Front. Mar. Sci. 7, (2020). Lindmark, M. Temperature- body size scaling. Doctoral Thesis 2020:8, Faculty Natural Resources Agricultural Sciences, SLU. https://pub.epsilon.slu.se/16711/ (2020). Woodworth-Jefcoats, P. ., Blanchard, J. L. & Drazen, J. C. Relative Impacts Simultaneous Stressors Pelagic Marine Ecosystem. Frontiers Marine Science 6, 383 (2019). Spence, M. . et al. general framework combining ecosystem models. Fish Fisheries 19, 1031–1042 (2018). Zhang C, Chen Y, Xu B, Xue Y, Ren Y. Evaluating fishing effects stability fish communities using size-spectrum model. Fisheries Research. 2018 Jan 1;197:123-30. Szuwalski CS, Burgess MG, Costello C, Gaines SD (2017) High fishery catches trophic cascades China. Proc Natl Acad Sci USA 114:717–721. Application South-east China Sea N.S. Jacobsen, M. Burgess K.H. Andersen (2017): Efficiency fisheries increasing ecosystem level. Fish Fisheries 18(2) 199-211. doi:10.1111/faf.12171. Appendix describes simple calibration procedure Zhang, C., Chen, Y., & Ren, Y. (2016). evaluation implementing long-term MSY ecosystem-based fisheries management: Incorporating trophic interaction, bycatch uncertainty. Fisheries Research, 174, 179-189. Zhang C, Chen Y, Thompson K, Ren Y. Implementing multispecies size-spectrum model data-poor ecosystem. Acta Oceanologica Sinica. 2016 Apr 1;35(4):63. Zhang C, Chen Y, Ren Y. efficacy fisheries closure rebuilding depleted stocks: Lessons size-spectrum modeling. Ecological Modelling. 2016 Jul 24;332:59-66. Spence M., Blackwell, P. & Blanchard J.L. (2016) Parameter uncertainty dynamic multispecies size spectrum model. Canadian Journal Fisheries Aquatic Sciences. 10.1139/cjfas-2015-0022 (press) Bayesian parameter estimation uncertainty Datta, S. & Blanchard J.L. (2016) effects seasonal processes size spectrum dynamics. Canadian Journal Fisheries Aquatic Sciences. 10.1139/cjfas-2015-0468 Zhang, C., Chen, Y., & Ren, Y. (2015). Assessing uncertainty multispecies size-spectrum model resulting process observation errors. ICES Journal Marine Science: Journal du Conseil, 72(8), 2223-2233. Jennings, S. & Collingridge, K. Predicting Consumer Biomass, Size-Structure, Production, Catch Potential, Responses Fishing Associated Uncertainties World’s Marine Ecosystems. (2015) PLoS ONE 10(7), e0133794. J.L. Blanchard, K.H. Andersen, F. Scott, N.T. Hinzen, G. Piet, S. Jennings (2014): Evaluating targets trade-offs among fisheries conservation objectives using multispecies size spectrum model. J. Applied Ecology, 51: 612–622. doi:10.1111/1365-2664.12238. Application Mizer North Sea","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/publications.html","id":"projects-that-have-usedare-using-mizer","dir":"Articles","previous_headings":"","what":"Projects that have used/are using mizer","title":"Publications","text":"MINOUW Project (http://minouw-project.eu/) European Commission Horizon 2020 Research Innovation Programme Grant Agreement . 634495 Rewiring marine food webs: predicting consequences species range shifts. Australian Research Council Discovery Project DP170104240 Mesopelagic Southern Ocean Prey Predators (MESOPP), European Commission H2020 (www.mesopp.eu) Expert Working Group Benchmarks Ecosystem Assessment EBFM. Lenfest Ocean Program Marine Ecosystems Research Programme (MERP) (https://marine-ecosystems.org.uk). UK Defra - Natural Environmental Research Council “Monitoring Management Deepwater Fisheries Stocks” (Deepfishman) European Union Framework 7. “Developing fisheries management indicators targets” (DEFINEIT) European Marifish Joint Research project. “Indicators fisheries Management Europe” (IMAGE) European Union Framework 6.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/running_a_simulation.html","id":"sec:projection","dir":"Articles","previous_headings":"","what":"Introduction","title":"Running a Simulation","text":"community trait-based models, used project() function perform simple simulations fishing effort held constant throughout duration simulation. trait-based model example, also looked effort different gears specified. section take detailed look project() function works different ways effort time can set . allow us run general systems like multispecies model. mizer, simulations performed using project() function. function takes MizerParams object projects forward time, starting initial population abundance pre-determined fishing effort pattern. Running projection project() requires various arguments: MizerParams object - model parameters (see previous section); Fishing effort - fishing effort gear time; Time arguments - Arguments control time simulation, including simulation time step, length simulation frequently output stored. Initial population - initial abundances stocks resource spectrum; help page project() describes arguments detail. MizerParams class explored previous section. section look arguments use examples perform simple projections.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/running_a_simulation.html","id":"sec:time_arguments","dir":"Articles","previous_headings":"","what":"The time arguments","title":"Running a Simulation","text":"four arguments control time project() function: dt, t_max t_save t_start. default values. t_max determines maximum time simulation (years), .e. long projection run . default value t_max 100. dt time step used numerical solver project(). smaller value, longer model take run. Sometimes necessary use small value avoid numerical instabilities. default value 0.1. t_save sets interval (years) project() stores state model resulting MizerSim object. example, t_save = 2, state model stored t = 0, 2, 4… etc. t_save must multiple dt. default value t_save 1. t_start year simulation starts. needed want label simulation results actual year rather number years elapsed since start simulation.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/running_a_simulation.html","id":"setting-the-fishing-effort","dir":"Articles","previous_headings":"","what":"Setting the fishing effort","title":"Running a Simulation","text":"fishing effort argument describes effort fishing gears model time. already seen information fishing gears selectivities catchabilities stored MizerParams object. three ways setting fishing effort. Examples three can seen section projection examples. simplest way passing effort argument single number. value used fishing effort gears time step projection, .e. fishing effort constant throughout simulation gears. seen method community trait-based model sections . length simulation determined t_max argument. second method setting fishing effort use numeric vector length number gears. values vector used fishing effort gear time step, .e. , fishing effort constant time now gear can different constant effort. effort vector must named names must gears MizerParams object. , length simulation determined t_max argument. Finally, sophisticated way setting fishing effort use two-dimensional array matrix values, set time step gear. row array effort values fishing gear particular time time. array must dimension names. names first dimension (row names) times. steps times can greater dt argument times must increasing. names second dimension (column names) must match names gears MizerParams object used projection. necessary supply t_max argument effort specified array maximum time simulation taken dimension names. value t_max also supplied ignored.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/running_a_simulation.html","id":"sec:setting_initial_abundances","dir":"Articles","previous_headings":"","what":"Setting the initial population abundance","title":"Running a Simulation","text":"running simulation project() function, initial populations species resource spectrum need specified. Default values initial values automatically set creating MizerParams object. However can change assigning new values initialN() initialNResource(). initialN() set matrix (dimensions species x size) contains initial abundances species size (sizes must match species size spectrum). initialNResource vector length length full spectrum.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/running_a_simulation.html","id":"sec:projection_examples","dir":"Articles","previous_headings":"","what":"Projection examples","title":"Running a Simulation","text":"section ’ll look run simulations project() function. examples focus fishing effort can specified different ways. results simulations explored detail. leave section exploring simulation results.. Remember fishing mortality size species product selectivity, catchability effort gear caught . specified catchability values species parameter data.frame default value 1 used. selectivity ranges 0 1. means examples fishing mortality fully selected species given effort gear catches .","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/running_a_simulation.html","id":"projections-with-single-simple-constant-effort","dir":"Articles","previous_headings":"Projection examples","what":"Projections with single, simple constant effort","title":"Running a Simulation","text":"use single value effort argument, value used constant effort gears. method can particularly useful quickly projecting forward without fishing (just set effort argument 0). use MizerParams object four gears similar one created section examples making MizerParams objects example MizerParams object called NS_params shipped mizer package. Let’s look summary: well thinking effort argument also need consider time parameters. project populations forward time equals 10 (t_max = 10), time step 0.1 (dt = 0.1), saving output every time step (t_save = 1). use constant effort value 1.0. resulting sim object class MizerSim. point won’t explore results can investigated detail. However, use basic summary plot seen :  big difference multispecies model trait-based model can seen range predation mortality feeding level values. trait-based model species predation mortality feeding level patterns. species different patterns, driven differing life history characteristics heterogeneous interaction matrix. can also see figure species different fishing selectivity (see fishing mortality panel). Remember default setting fishing gears knife-edge gear knife-edge positioned species w_mat parameter. effort time can inspected getEffort() (use head() function just show first lines). effort slot shows effort time gear. example, specified effort argument single numeric value 1. can see results effort used gears time steps. summary() method also available objects type MizerSim. essentially summary MizerParams objects, includes information simulation time parameters. decrease t_save keep t_max can see time dimension effort array changes accordingly. also true simulation results returned N() NResource(). reduce t_save 0.5, meaning effort abundance information stored t = 1.0, 1.5, 2.0 etc.","code":"summary(NS_params) ## An object of class \"MizerParams\"  ## Consumer size spectrum: ##  minimum size:   0.001 ##  maximum size:   39851.3 ##  no. size bins:  100 ## Resource size spectrum: ##  minimum size:   2.12182e-13 ##  maximum size:   9.82091 ##  no. size bins:  179 (226 size bins in total) ## Species details: ##    species   w_inf w_mat w_min  f0  k_vb   beta sigma ## 1    Sprat    33.0    13 0.001 0.6 0.681  51076   0.8 ## 2  Sandeel    36.0     4 0.001 0.6 1.000 398849   1.9 ## 3   N.pout   100.0    23 0.001 0.6 0.849     22   1.5 ## 4  Herring   334.0    99 0.001 0.6 0.606 280540   3.2 ## 5      Dab   324.0    21 0.001 0.6 0.536    191   1.9 ## 6  Whiting  1192.0    75 0.001 0.6 0.323     22   1.5 ## 7     Sole   866.0    78 0.001 0.6 0.284    381   1.9 ## 8  Gurnard   668.0    39 0.001 0.6 0.266    283   1.8 ## 9   Plaice  2976.0   105 0.001 0.6 0.122    113   1.6 ## 10 Haddock  4316.5   165 0.001 0.6 0.271    558   2.1 ## 11     Cod 39851.3  1606 0.001 0.6 0.216     66   1.3 ## 12  Saithe 39658.6  1076 0.001 0.6 0.175     40   1.1 ##  ## Fishing gear details: ## Gear          Effort  Target species  ##  ---------------------------------- ## Industrial     0.00   Sprat, Sandeel, N.pout  ## Pelagic        1.00   Herring  ## Beam           0.50   Dab, Sole, Plaice  ## Otter          0.50   Whiting, Gurnard, Haddock, Cod, Saithe sim <- project(NS_params, effort = 1, t_max = 10, dt = 0.1, t_save = 1) plot(sim) head(getEffort(sim)) ##     gear ## time Industrial Pelagic Beam Otter ##    0          1       1    1     1 ##    1          1       1    1     1 ##    2          1       1    1     1 ##    3          1       1    1     1 ##    4          1       1    1     1 ##    5          1       1    1     1 summary(sim) sim <- project(NS_params, effort = 1, t_max = 10, dt = 0.1, t_save = 0.5) head(getEffort(sim)) ##      gear ## time  Industrial Pelagic Beam Otter ##   0            1       1    1     1 ##   0.5          1       1    1     1 ##   1            1       1    1     1 ##   1.5          1       1    1     1 ##   2            1       1    1     1 ##   2.5          1       1    1     1"},{"path":"https://sizespectrum.org/mizer/dev/articles/running_a_simulation.html","id":"sec:proj_diff_gears_constant_effort","dir":"Articles","previous_headings":"Projection examples","what":"Setting constant effort for different gears","title":"Running a Simulation","text":"mentioned , can also set effort values gear separately using vector effort values. still keeps efforts constant time means gear can different constant effort. need create named vector effort, names match gears. example, want switch industrial gear (.e. effort = 0), keep pelagic gear effort 1, set effort beam trawl gears 0.3 effort otter trawl gear 0.7. set effort like : call project() effort inspect resulting effort matrix (use head() function just show first lines): can see effort gear constant gear effort specified effort argument. impact can seen plotting fishing mortality. dedicated plot, plotFMort(), shows fishing mortality size species particular time step (default final time step). fishing mortality species determined effort gear caught .","code":"effort <- c(Industrial = 0, Pelagic = 1, Beam = 0.3, Otter = 0.7) sim <- project(NS_params, effort = effort, t_max = 10, dt = 1, t_save = 1) head(getEffort(sim)) ##     gear ## time Industrial Pelagic Beam Otter ##    0          0       1  0.3   0.7 ##    1          0       1  0.3   0.7 ##    2          0       1  0.3   0.7 ##    3          0       1  0.3   0.7 ##    4          0       1  0.3   0.7 ##    5          0       1  0.3   0.7 plotFMort(sim)"},{"path":"https://sizespectrum.org/mizer/dev/articles/running_a_simulation.html","id":"an-example-of-changing-effort-through-time","dir":"Articles","previous_headings":"Projection examples","what":"An example of changing effort through time","title":"Running a Simulation","text":"example set complicated fishing effort structure allows fishing effort gear change time. mentioned , , effort must supplied two dimensional array matrix. first dimension time second dimension gear. dimensions must named. gear names must match gears MizerParams object. Also, mentioned , effort passed array length simulation determined time dimension names argument t_max used. Instead simulation runs earliest time effort array latest. example, project forward time \\(t=1\\) time \\(t=10\\). effort industrial gear held constant 0.5, effort pelagic gear increased linearly 1 2, effort beam trawl decreases linearly 1 0, whilst effort otter trawl decreases linearly 1 0.5. First create empty effort array: fill , one gear time, making heavy use seq() function create sequence: first rows effort array shown illustration: first row gives effort times 1 2, second times 2 3, . time 10 row array actually used, except set final time simulation. Now can use effort array projection: can see, can quite fiddly set complicated effort array may easier prepare advance .csv file read , similar read interaction matrix section examples making MizerParams object. give example section North Sea model. Note example set effort array effort set every whole time step (e.g. time = 1, 2, etc). case possible set effort frequently , e.g. time = 1.0, 1.5, 2.0, 2.5 etc. restriction difference time dimension names must least big dt argument. Now know run simulation, ready learn explore simulation results.","code":"gear_names <- c(\"Industrial\",\"Pelagic\",\"Beam\",\"Otter\") times <- seq(from = 1, to = 10, by = 1) effort_array <- array(NA, dim = c(length(times), length(gear_names)),     dimnames = list(time = times, gear = gear_names)) effort_array[,\"Industrial\"] <- 0.5 effort_array[,\"Pelagic\"] <- seq(from = 1, to = 2, length = length(times)) effort_array[,\"Beam\"] <- seq(from = 1, to = 0, length = length(times)) effort_array[,\"Otter\"] <- seq(from = 1, to = 0.5, length = length(times)) head(effort_array) ##     gear ## time Industrial  Pelagic      Beam     Otter ##    1        0.5 1.000000 1.0000000 1.0000000 ##    2        0.5 1.111111 0.8888889 0.9444444 ##    3        0.5 1.222222 0.7777778 0.8888889 ##    4        0.5 1.333333 0.6666667 0.8333333 ##    5        0.5 1.444444 0.5555556 0.7777778 ##    6        0.5 1.555556 0.4444444 0.7222222 sim <- project(NS_params, effort = effort_array, dt = 0.1) head(sim@effort) ##     gear ## time Industrial  Pelagic      Beam     Otter ##    1        0.5 1.000000 1.0000000 1.0000000 ##    2        0.5 1.111111 0.8888889 0.9444444 ##    3        0.5 1.222222 0.7777778 0.8888889 ##    4        0.5 1.333333 0.6666667 0.8333333 ##    5        0.5 1.444444 0.5555556 0.7777778 ##    6        0.5 1.555556 0.4444444 0.7222222"},{"path":"https://sizespectrum.org/mizer/dev/articles/single_species_size-spectrum_dynamics.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Single-species size-spectrum dynamics","text":"tutorial gain understanding size-spectrum dynamics. separate size-spectrum effects multi-species effects, concentrate single species tutorial. Size-spectrum dynamics describes detail biomass transported ecosystem small sizes large sizes. Thus best way think size-spectrum dynamics think traffic highway, except instead cars travelling along road fish growing along size axis, way egg size maximum size. Let us explore analogy briefly. flow traffic highway dependent traffic density, turn dependent changes traffic velocity. High traffic density arises sections road traffic velocity decreases. decrease can lead traffic jams. Low traffic density arises sections velocity increases, familiar emerging side traffic jam. Traffic jams self-reinforcing phenomena: decrease speed somewhere density cars increases causes decrease speed, leading even higher density, . Similarly, high fish density arises size classes growth rate decreases. pronounced decrease growth rate can lead pronounced peaks fish density, similar traffic jam. course fish density also controlled death rate, high death rate leading decreased fish density. precise, fish density size class increases rate fish grow size class larger rate either grow size class die size class. Thus size-spectrum dynamics result interplay death rate changes growth rate. mathematically minded, interplay expressed partial differential equation \\[\\frac{\\partial}{\\partial t}N(w,t) = -\\frac{\\partial}{\\partial w}\\big(N(w,t)g(w,t)\\big) - \\mu(w,t)\\] \\(N(w,t)\\) fish density size \\(w\\) time \\(t\\), \\(g(w,t)\\) growth rate individual size \\(w\\) time \\(t\\) \\(\\mu(w,t)\\) death rate. need understand mathematical notation. Size-spectrum dynamics like traffic highway cars can leave highway (fish can die) point, can join highway beginning (fish start egg size). model size spectrum therefore also describe rate \\(R(t)\\) eggs entering size spectrum, .e., rate mature fish reproduce. discussing detail determines death rate \\(\\mu(w,t)\\), growth rate \\(g(w,t)\\) rate reproduction \\(R(t)\\).","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/single_species_size-spectrum_dynamics.html","id":"why-study-size-spectrum-dynamics","dir":"Articles","previous_headings":"","what":"Why study size-spectrum dynamics?","title":"Single-species size-spectrum dynamics","text":"study traffic dynamics real practical benefits. example, least motorways Europe, danger traffic jam developing, automatic speed restrictions imposed certain distance front developing slow-moving traffic. motorists thought traffic flow, speed restrictions places obvious reason annoying. However indeed avoid formation traffic jam. course can directly tell fish obey limits growth rates. However influence size-spectrum dynamics fishing policy. example species experiences stunted growth, like example Herring Baltic Sea, resolve reducing numbers (increases growth rate reduced competition food) reducing fishing prey. size-spectrum dynamics multi-species ecosystem extremely complex. can understand simplified cases analytically, general need use numerical simulation understand consequences various interventions. mizer package can simulate size-spectrum dynamics. Given model parameters enter expression growth rate, death rate reproductive rate, initial fish size spectrum, mizer simulates changes size spectrum time according equations. particular interest steady state size spectrum, effects death rate changes growth rate exactly balance way size spectrum stays constant time. looking steady state time-varying size spectra . emphasis understanding dynamics. just want learn run simulations want use simulations develop intuition fish populations behave. therefore start simple models first.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/single_species_size-spectrum_dynamics.html","id":"a-first-example","dir":"Articles","previous_headings":"","what":"A first example","title":"Single-species size-spectrum dynamics","text":"effective way working tutorial open R script file RStudio copying commands tutorial R script file. execute sending R console, thereby reproducing results. Later tutorial exercises can adapting code R script file tasks exercises. way pick facility working mizer R time gaining deeper understanding size spectrum modelling. First, load required packages following commands: get error messages saying particular package available, need install package. Mizer collects parameters describing size-spectrum model one object class MizerParams. need set object hand instead several wrapper functions mizer create object various types models, also many functions changing specific parameters model. use newSingleSpeciesParams() function set model describing single fish species living ecosystem whose community size spectrum given power-law. newSingleSpeciesParams() function many arguments allow specify parameters fish species well community, arguments default values, can simply call function without specifying arguments. specify power-law exponent background community function returns MizerParams object assigned variable params. explaining model go along.","code":"library(mizer) library(tidyverse) library(plotly) library(ggplot2) params <- newSingleSpeciesParams(lambda = 2.05)"},{"path":"https://sizespectrum.org/mizer/dev/articles/single_species_size-spectrum_dynamics.html","id":"steady-state-spectrum","dir":"Articles","previous_headings":"","what":"Steady state spectrum","title":"Single-species size-spectrum dynamics","text":"params object also contains initial size spectrum close steady state model. steady state state size class inflow individuals growth exactly balances outflow individuals growth death. start close steady state usually simulate size-spectrum dynamics population evolve closer closer steady state. get steady state use steady() function. result function MizerParams object now initial size spectrum evolved close steady state. can plot size spectrum plotSpectra() function.  power = 0 argument plotSpectra() function specifies want plot number density, rather example biomass density. green line represents number density background community, labelled “Resource” plot legend, foreground species finds . green line straight line slope lambda = -2.05. important understand power-law curve looks like straight line plotted logarithmic axes slope line exponent power law. Thus number density proportional \\(w^{-2.05}\\). line represents number density single species, default just named unimaginatively “Target species”. see straight line initially, bump declining rapidly large sizes. discuss short causes shape. initial slope species number density negative, means fewer larger fish smaller fish. course understandable: fish die growing , tend fewer fish larger size classes. Now time first exercise use commands just learned . Create MizerParams object describing single species power-law background Sheldon exponent 2.1. Assign MizerParams object variable name params, order overwrite MizerParams object created . plot number density function weight steady state model. happy plot, can continue reading. need see solution, can click “Solution” triangle .","code":"params <- steady(params) ## Convergence was achieved in 1.5 years. plotSpectra(params, power = 0) params2 <- newSingleSpeciesParams(lambda = 2.1) params2 <- steady(params2) ## Convergence was achieved in 1.5 years. plotSpectra(params2, power = 0)"},{"path":"https://sizespectrum.org/mizer/dev/articles/single_species_size-spectrum_dynamics.html","id":"numbers","dir":"Articles","previous_headings":"","what":"Numbers","title":"Single-species size-spectrum dynamics","text":"plotSpectra() function gives us plot number density, nice get actual numbers. steady() function stored numbers initial condition params object can access initialN() function. Let us assign variable n: can see “Environment” pane RStudio, n matrix 1 row 101 columns. one row corresponds one species. multispecies model one row species, holding number density species. 101 columns number densities 101 size classes. fact, n named array, .e., row column names. can extract dimnames() function. names columns weight grams start size class. Notice R displays long vectors breaking across many lines starting line number brackets. number index first value row. example see 61st size bracket starts 1 gram. number density size class 1 gram 1.12 grams important realise number fish size class, number density. get number fish multiply number width size class. widths can obtained dw() function. number fish 61st size class may surprised small number interpret number fish 1 gram 1.12 gram entire ocean. However looks reasonable average number per square meter sea. discussion issue working numbers per area, numbers per volume numbers entire system see https://sizespectrum.org/mizer/reference/setParams.html#units--mizer Determine total number fish sizes 10 grams 20 grams. can use sum() function add together contributions various size classes.","code":"n <- initialN(params) dimnames(n) ## $sp ## [1] \"Target species\" ##  ## $w ##   [1] \"0.001\"   \"0.00112\" \"0.00126\" \"0.00141\" \"0.00158\" \"0.00178\" \"0.002\"   ##   [8] \"0.00224\" \"0.00251\" \"0.00282\" \"0.00316\" \"0.00355\" \"0.00398\" \"0.00447\" ##  [15] \"0.00501\" \"0.00562\" \"0.00631\" \"0.00708\" \"0.00794\" \"0.00891\" \"0.01\"    ##  [22] \"0.0112\"  \"0.0126\"  \"0.0141\"  \"0.0158\"  \"0.0178\"  \"0.02\"    \"0.0224\"  ##  [29] \"0.0251\"  \"0.0282\"  \"0.0316\"  \"0.0355\"  \"0.0398\"  \"0.0447\"  \"0.0501\"  ##  [36] \"0.0562\"  \"0.0631\"  \"0.0708\"  \"0.0794\"  \"0.0891\"  \"0.1\"     \"0.112\"   ##  [43] \"0.126\"   \"0.141\"   \"0.158\"   \"0.178\"   \"0.2\"     \"0.224\"   \"0.251\"   ##  [50] \"0.282\"   \"0.316\"   \"0.355\"   \"0.398\"   \"0.447\"   \"0.501\"   \"0.562\"   ##  [57] \"0.631\"   \"0.708\"   \"0.794\"   \"0.891\"   \"1\"       \"1.12\"    \"1.26\"    ##  [64] \"1.41\"    \"1.58\"    \"1.78\"    \"2\"       \"2.24\"    \"2.51\"    \"2.82\"    ##  [71] \"3.16\"    \"3.55\"    \"3.98\"    \"4.47\"    \"5.01\"    \"5.62\"    \"6.31\"    ##  [78] \"7.08\"    \"7.94\"    \"8.91\"    \"10\"      \"11.2\"    \"12.6\"    \"14.1\"    ##  [85] \"15.8\"    \"17.8\"    \"20\"      \"22.4\"    \"25.1\"    \"28.2\"    \"31.6\"    ##  [92] \"35.5\"    \"39.8\"    \"44.7\"    \"50.1\"    \"56.2\"    \"63.1\"    \"70.8\"    ##  [99] \"79.4\"    \"89.1\"    \"100\" n[1, 61] ## [1] 0.0003282314 (n * dw(params))[1, 61] ## [1] 4.005029e-05 sum((n * dw(params))[1, 81:86]) ## [1] 4.163148e-05"},{"path":"https://sizespectrum.org/mizer/dev/articles/single_species_size-spectrum_dynamics.html","id":"biomass-spectra","dir":"Articles","previous_headings":"","what":"Biomass spectra","title":"Single-species size-spectrum dynamics","text":"Without power argument (power = 1 default) plotSpectra() function plots biomass density function size.  Now green line representing biomass density background slope -1.05. initial slope species biomass density negative, meaning biomass density decreases size. means even though individual fish course gain biomass grow , much death among larvae juvenile fish total biomass cohort nevertheless decreases grows . explain reason later discuss predation mortality. can also plot Sheldon spectrum, .e., biomass density function log weight instead weight, supplying argument power = 2 plotSpectra().  now shows approximately constant biomass density function log size (slope green line -0.05). biomass density species function log size initially increases. binned logarithmically-sized bins biomass bin initially increase, starts decreasing close maximum size species. may bit confusing displayed size spectrum three different ways. important aware literature see different conventions used, see plot size spectrum always need ask exactly density shown. can obtain biomass density size class number density multiplying number density weight individuals size class. obtain weights, use function w() returns weights start size class. course using lead discretisation error fish size class weight, small size classes use mizer, error important. calculate total biomass size class obtain multiplying biomass density size class width size class example biomass fish 1 gram 1.12 grams Next discuss shape species size-spectrum detail.","code":"plotSpectra(params) plotSpectra(params, power = 2) biomass_density <- n * w(params) biomass <- biomass_density * dw(params) biomass[61] ## [1] 4.005029e-05"},{"path":"https://sizespectrum.org/mizer/dev/articles/single_species_size-spectrum_dynamics.html","id":"allometric-rates","dir":"Articles","previous_headings":"","what":"Allometric rates","title":"Single-species size-spectrum dynamics","text":"first striking feature species size-spectrum, representations, small fish (larvae juveniles) given straight line. due allometric scaling physiological rates, discuss section. striking feature bulge around maturity size, discuss section reproduction. First , metabolic rate, .e., rate organism expends energy basic metabolic needs, scales power organism’s body size, power \\(p = 3/4\\). energy needs supplied consumption food, natural assume also consumption rate scales allometrically power \\(n = 3/4\\). consumption greater metabolic cost excess leads growth. Hence growth rate scales allometrically power \\(n = 3/4\\). standard choices allometric exponents, mizer allows choose values \\(p\\) \\(n\\). Finally, death rate organisms tends scale allometrically power \\(p - 1 = 3/4 - 1 = -1/4\\). death rate experienced larger individuals smaller small individuals. confirmed many observations. result mathematics growth death rates scale allometrically exponents \\(p\\) \\(1-p\\) respectively, metabolic exponent \\(p\\), number density steady state also power law, .e., straight line log-log plot. Let us check model physiological rates indeed power laws, least small sizes. can get growth rate getEGrowth() function. assign result variable name growth_rate. can see “Environment” pane matrix one row one species 101 columns 101 size classes. example growth rate size 1 gram (seen 61st size class starts 1 gram). instantaneous per-capita growth rate, measured grams per year. like make log-log plot growth rate size check gives straight line. use ggplot() purpose. ggplot() likes work data frames instead named matrices, first convert matrix data frame melt() function. can see “Environment” pane new variable called growth_rate_frame data frame 101 observations 3 variables. 101 observations correspond 101 size classes. 3 variables names species sp, size w, value contains growth_rate. data frame can pass ggplot().  Note linked x axis w variable y axis value variable specified axes logarithmic scale. see least size grams line straight. Let’s isolate growth rate smaller sizes fit linear model slope line indeed \\(0.75 = 3/4\\). fact, shows juveniles \\[\\log(g(w)) = 2.113 + \\frac34 \\log(w)\\] thus \\[g(w) = g_0\\ w^p = 2.113\\  w^{3/4}.\\] course real model, growth rate exactly follow power law, due variations growth rate due variations food availability, example. Now . exercise 3 exercise notebook. Use methods just seen make log-log plot mortality rate. can get mortality rate getMort() function. adjusting code new task, need take account name size-dimension array returned getMort() \"w_prey\" instead \"w\".  fit linear model determine slope intercept thus allometric exponent coefficient mortality rate, establish mortality rate \\[\\mu(w) = \\mu_0\\ w^{p-1} = 2.038 \\ w^{-1/4}.\\]","code":"growth_rate <- getEGrowth(params) growth_rate[1, 61] ## [1] 8.26968 growth_rate_frame <- melt(growth_rate) names(growth_rate_frame) ## [1] \"sp\"    \"w\"     \"value\" p <- ggplot(growth_rate_frame) +     geom_line(aes(x = w, y = value)) +     scale_x_log10() +     scale_y_log10() +     labs(x = \"Weight [g]\",          y = \"Growth rate [g/year]\") p g_small_fish <- filter(growth_rate_frame, w <= 10) lm(log(g_small_fish$value) ~ log(g_small_fish$w)) ##  ## Call: ## lm(formula = log(g_small_fish$value) ~ log(g_small_fish$w)) ##  ## Coefficients: ##         (Intercept)  log(g_small_fish$w)   ##               2.113                0.750 mort_rate_frame <- melt(getMort(params)) p <- ggplot(mort_rate_frame) +     geom_line(aes(x = w_prey, y = value)) +     scale_x_log10() +     scale_y_log10() +     labs(x = \"Weight [g]\",          y = \"Growth rate [g/year]\") p lm(log(mort_rate_frame$value) ~ log(mort_rate_frame$w_prey)) ##  ## Call: ## lm(formula = log(mort_rate_frame$value) ~ log(mort_rate_frame$w_prey)) ##  ## Coefficients: ##                 (Intercept)  log(mort_rate_frame$w_prey)   ##                       2.038                       -0.250"},{"path":"https://sizespectrum.org/mizer/dev/articles/single_species_size-spectrum_dynamics.html","id":"slope-of-juvenile-spectrum","dir":"Articles","previous_headings":"","what":"Slope of juvenile spectrum","title":"Single-species size-spectrum dynamics","text":"seen juvenile fish growth rate death rate power laws exponents \\(p=3/4\\) \\(p-1=-1/4\\) respectively. solving differential equation can derive juvenile spectrum also follows power law: \\[N(w) = N_0\\ w^{-\\mu_0/g_0 - p}\\] won’t maths (probably don’t want anyway), can check claim numerically. Let’s look spectrum 10 grams. now know . first convert number density matrix n dataframe filter observations \\(w\\leq 10\\). resulting data frame pass ggplot() ask plot line log-log axes.  confirms seen earlier, fish less 10 grams number density power law. determine exponent power law need slope straight line log-log plot, easiest way fit linear model log variables: linear model fit says exponent -1.682. mathematics claimed exponent \\(-\\mu_0 / g_0 - p\\). already observed \\(\\mu_0 = 2.038\\) \\(g_0 = 2.113\\) get quite result linear model fit, nature numerical calculations: one gets discretisation errors rounding errors.","code":"nf <- melt(n) %>%    filter(w <= 10)  ggplot(nf) +   geom_line(aes(x = w, y = value)) +   scale_x_log10() +   scale_y_log10() +   labs(x = \"Weight [g]\",        y = \"Number density [1/g]\") lm(log(nf$value) ~ log(nf$w)) ##  ## Call: ## lm(formula = log(nf$value) ~ log(nf$w)) ##  ## Coefficients: ## (Intercept)    log(nf$w)   ##      -8.022       -1.682 -m0 / g0 - 3/4 ## [1] -1.714505"},{"path":"https://sizespectrum.org/mizer/dev/articles/single_species_size-spectrum_dynamics.html","id":"shape-of-adult-spectrum","dir":"Articles","previous_headings":"","what":"Shape of adult spectrum","title":"Single-species size-spectrum dynamics","text":"Now understand shape size spectrum juvenile fish, let us try understand bulge follows. increase abundance see around maturity size species due drop growth rate size. turn due fact mature fish invests energy income reproduction.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/single_species_size-spectrum_dynamics.html","id":"investment-into-reproduction","dir":"Articles","previous_headings":"Shape of adult spectrum","what":"Investment into reproduction","title":"Single-species size-spectrum dynamics","text":"Let us look plot proportion available energy invested reproduction function size  maturity curve specified? can find details mizer documentation. four species parameters involved: maturity size w_mat 50% individuals mature. size w_mat25 25% individuals mature. asymptotic size w_inf organism invests 100% income reproduction thus growth zero. exponent m determines proportion individual invests reproduction scales size. species parameters contained data frame inside params object can access species_params() function. can see, lot species parameters, talk later. now let’s just select 4 parameters interested .","code":"psi <- melt(getMaturityProportion(params) * getReproductionProportion(params)) ggplot(psi) +   geom_line(aes(x = w, y = value)) +   labs(x = \"Weight [g]\",        y = \"Proportion invested into reproduction\") species_params(params) ##                       species w_min w_inf    w_mat w_min_idx k_vb    gamma ## Target species Target species 0.001   100 25.11886         1    1 4067.903 ##                      ks  f0   fc beta sigma z0 alpha   erepro ## Target species 5.906914 0.6 0.25  100   1.3  0   0.4 0.899483 ##                interaction_resource    n    p   q pred_kernel_type        h k ## Target species                    1 0.75 0.75 0.8        lognormal 59.06914 0 ##                 w_mat25 m R_max ## Target species 22.50546 1   Inf select(species_params(params), w_mat, w_mat25, w_inf, m) ##                   w_mat  w_mat25 w_inf m ## Target species 25.11886 22.50546   100 1"},{"path":"https://sizespectrum.org/mizer/dev/articles/single_species_size-spectrum_dynamics.html","id":"effect-of-change-in-maturity-curve","dir":"Articles","previous_headings":"Shape of adult spectrum","what":"Effect of change in maturity curve","title":"Single-species size-spectrum dynamics","text":"Let us investigate happens change maturity curve. Let’s assume maturity size actually 40 grams size 25% individuals mature 30 grams. Let us change values species_params data frame. first make copy params object can keep old version around unchanged. copy now change species parameters Now maturity curve changed, can verify plotting  point let’s take little break learn draw two curves graph. can see old maturity curve new maturity curve plot? First add extra column dataframe describing bind two data frames together send combined data frame ggplot()  change maturity curve course implies change growth rates. Make plot showing growth rates original model model changed maturity curve.  Next let us look steady state spectrum changed. first need run changed model steady state use technique plot steady-state spectra models top .  expected, bump happens later due larger maturity size less pronounced, maturity curve less steep.","code":"params_changed_maturity <- params species_params(params_changed_maturity)$w_mat <- 40 species_params(params_changed_maturity)$w_mat25 <- 30 select(params_changed_maturity@species_params, w_mat, w_mat25, w_inf, m) ##                w_mat w_mat25 w_inf m ## Target species    40      30   100 1 psi_changed_maturity <- melt(getMaturityProportion(params_changed_maturity) *                                 getReproductionProportion(params_changed_maturity)) ggplot(psi_changed_maturity) +   geom_line(aes(x = w, y = value)) +   labs(x = \"Weight [g]\",        y = \"Proportion invested into reproduction\") psi$type = \"original\" psi_changed_maturity$type = \"changed\" psi_combined <- rbind(psi, psi_changed_maturity) ggplot(psi_combined) +   geom_line(aes(x = w, y = value, colour = type)) +   labs(x = \"Weight [g]\",        y = \"Proportion invested into reproduction\") growth_rate_frame_changed <- melt(getEGrowth(params_changed_maturity)) growth_rate_frame$type <- \"original\" growth_rate_frame_changed$type <- \"changed\" growth_rate_frame_combined <- rbind(growth_rate_frame,                                     growth_rate_frame_changed) ggplot(growth_rate_frame_combined) +   geom_line(aes(x = w, y = value, colour = type)) +   labs(x = \"Weight [g]\",        y = \"Growth rate [g/year]\") params_changed_maturity <- steady(params_changed_maturity) ## Convergence was achieved in 6 years. nf <- melt(initialN(params)) nf_changed_maturity <- melt(initialN(params_changed_maturity)) nf$type <- \"original\" nf_changed_maturity$type <- \"changed\" nf_combined <- rbind(nf, nf_changed_maturity) ggplot(nf_combined) +   geom_line(aes(x = w, y = value, colour = type)) +   scale_x_log10() +   scale_y_log10() +   labs(x = \"Weight [g]\",        y = \"Number density [1/g]\")"},{"path":"https://sizespectrum.org/mizer/dev/articles/single_species_size-spectrum_dynamics.html","id":"reproductive-efficiency","dir":"Articles","previous_headings":"Shape of adult spectrum","what":"Reproductive efficiency","title":"Single-species size-spectrum dynamics","text":"happens energy invested reproduction? leads spawning thus influx new individuals egg size. conversion energy invested reproduction egg biomass inefficient. Firstly much energy spent things like migration spawning grounds, rather production gonadic mass. Secondly, small proportion eggs produced viable hatch larvae. order population steady state, reproductive efficiency particular value. higher, population increase, lower, population decrease time. steady() function set reproductive efficiency just right value maintain population level stored species parameter called erepro. model changed maturity curve leads different rate investment reproduction thus needs slightly different reproductive efficiency remain steady state: reproductive efficiency steady state. population deviates steady state, example due change fishing, reproductive efficiency can set change according Beverton-Holt stock-recruitment curve. discuss later.","code":"species_params(params)$erepro ## [1] 0.899483 species_params(params_changed_maturity)$erepro ## [1] 0.8894015"},{"path":"https://sizespectrum.org/mizer/dev/articles/single_species_size-spectrum_dynamics.html","id":"predation","dir":"Articles","previous_headings":"","what":"Predation","title":"Single-species size-spectrum dynamics","text":"now time discuss important issue predation. predation fish obtains energy needs maintain metabolism, grow invest reproduction. important model predation.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/single_species_size-spectrum_dynamics.html","id":"effect-of-prey-availability","dir":"Articles","previous_headings":"Predation","what":"Effect of prey availability","title":"Single-species size-spectrum dynamics","text":"energy income fish comes predation prey. less prey, fish consumes less thus growth rate decrease. Let us investigate artificially removing prey. decrease community spectrum factor 10 size range 1mg 10mg. create new parameter object able keep old one around course quite dramatic intervention, allow us clearly see effect steady-state size distribution species.  expected, lack food resulting slow-growth leads traffic jam: peak biomass density. slow-occurs size factor 100 larger size food reduced. discuss next section. first investigate happens prey abundance increased instead decreased. Plot steady state biomass density model community abundance increased factor 10 size range 1mg 10mg.","code":"params_starved <- params size_range <- w_full(params) > 10^-3 & w_full(params) < 10^-2 initialNResource(params_starved)[size_range] <-    initialNResource(params)[size_range] / 10 params_starved <- steady(params_starved) ## Convergence was achieved in 6 years. ## Warning in setBevertonHolt(params, reproduction_level = old_reproduction_level): ## The following species require an unrealistic reproductive efficiency greater ## than 1: Target species plotSpectra(params_starved, power = 2) params_overfed <- params size_range <- w_full(params) > 10^-3 & w_full(params) < 10^-2 initialNResource(params_overfed)[size_range] <-    initialNResource(params)[size_range] * 10 params_overfed <- steady(params_overfed) ## Convergence was achieved in 4.5 years. plotSpectra(params_overfed, power = 2)"},{"path":"https://sizespectrum.org/mizer/dev/articles/single_species_size-spectrum_dynamics.html","id":"how-predation-is-modelled","dir":"Articles","previous_headings":"Predation","what":"How predation is modelled","title":"Single-species size-spectrum dynamics","text":"easiest case understand predation imagine filter feeding fish, swimming around mouth open. Clearly amount food takes determined four things: density prey water, much volume water fish able filter, depend fast swims well gape size. sizes prey fish able filter water, limited gape size fine gill rakers , fast can digest food. can filter prey faster can digest, start letting prey go uneaten. active hunter situation similar. rate predates depend four things: density prey water volume water fish patrols able seek prey. may depend things like radius vision. detected prey fish able catch, depend mouth size also agility skill well defensive mechanisms prey. fast can digest food. four factors, course already discussing density prey. next section discuss ability filter catch prey particular sizes, model via predation kernel. section discuss search volume following section maximum consumption rate.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/single_species_size-spectrum_dynamics.html","id":"the-predation-kernel","dir":"Articles","previous_headings":"Predation","what":"The predation kernel","title":"Single-species size-spectrum dynamics","text":"Fish particularly good catching prey specific range sizes, smaller . encoded size-spectrum model predation kernel. Let us take look predation kernel model. can obtain function getPredKernel(). large three-dimensional array (predator species x predator size x prey size). extract kernel predator size 10g (using remember size class 81) drop = FALSE option prevent R dropping array dimensions. can now plot usual  see predator size 10g likes feed prey factor 100 smaller , also feeds sizes, just reduced preference. preferred predator/prey size ratio determined species parameter beta width feeding kernel, .e., fussy predator regarding prey size, determined species parameter sigma. model values Let us change preferred predator/prey mass ratio 100 1000. usual, first create copy parameter object, make change copy. Let’s make plot see predation kernel indeed changed.  now reduce prey size range 1mg 10mg , now expect produce peak biomass spectrum somewhere 1g 10g. Let’s check.  Yes, expected. details beta sigma parametrise predation kernel, see https://sizespectrum.org/mizer/reference/lognormal_pred_kernel.html#details. information change predation kernel, see https://sizespectrum.org/mizer/reference/setPredKernel.html#setting-predation-kernel important confuse prey preference diet. Just predator might prefer feed prey particular size free choice mean actually feeds predominantly prey. actual diet fish depends also availability prey. smaller prey abundant, realised predator/prey mass ratio diet smaller preferred predator/prey mass ratio. particularly important estimating predation kernel stomach data. Change parameters predation kernel beta = 50 sigma = 2 plot predation kernel predator size 1g. see predation kernel truncated predator never feeds prey larger .  Next, plot steady state arising feeding kernel prey abundance artificially reduced factor 10 size range 1mg 10mg previous examples. observe? surprised?","code":"pred_kernel <- getPredKernel(params) pred_kernel_10 <- pred_kernel[, 81, , drop = FALSE] ggplot(melt(pred_kernel_10)) +   geom_line(aes(x = w_prey, y = value)) +   scale_x_log10() select(species_params(params), beta, sigma) ##                beta sigma ## Target species  100   1.3 params_pk <- params species_params(params_pk)$beta <- 1000 getPredKernel(params_pk)[, 81, , drop = FALSE] %>%    melt() %>%    ggplot() +   geom_line(aes(x = w_prey, y = value)) +   scale_x_log10() initialNResource(params_pk) <- initialNResource(params_starved) params_pk <- steady(params_pk) ## Convergence was achieved in 4.5 years. ## Warning in setBevertonHolt(params, reproduction_level = old_reproduction_level): ## The following species require an unrealistic reproductive efficiency greater ## than 1: Target species plotSpectra(params_pk, power = 2) params3 <- params species_params(params3)$beta <- 50 species_params(params3)$sigma <- 2 getPredKernel(params3)[, 61, , drop = FALSE] %>%    melt() %>%    ggplot() +   geom_line(aes(x = w_prey, y = value)) +   scale_x_log10() initialNResource(params3) <- initialNResource(params_starved) params3 <- steady(params3) ## Convergence was achieved in 4.5 years. plotSpectra(params3, power = 2)"},{"path":"https://sizespectrum.org/mizer/dev/articles/single_species_size-spectrum_dynamics.html","id":"search-volume","dir":"Articles","previous_headings":"Predation","what":"Search volume","title":"Single-species size-spectrum dynamics","text":"Next consider factor models volume water filter feeder able filter certain amount time, volume water forage fish able patrol certain amount time. difficult model first principles, although people tried argue terms swimming speeds fish. assume search volume rate also allometric rate. Let \\(\\gamma(w)\\) denote rate predator size \\(w\\). Thus assume \\[\\gamma(w) = \\gamma_0\\ w^q\\] exponent \\(q\\). know fish needs consume prey rate scales body size power \\(p\\), \\(p\\) \\(3/4\\). also know prey density approximately described Sheldon power law, .e., \\(N(w) = N_0\\ w^{-\\lambda}\\). bit maths says \\[q = 2 - \\lambda + n.\\] explains message got created params object certain choice \\(\\lambda\\): mizer chose search volume exponent automatically according formula. real world, evolution made sure fish developed feeding strategy allows cover metabolic costs, thus leads search volume exponent \\(q\\). Clearly, filter feeders taken different route forage fish, result . Let us see effect changing coefficient \\(\\gamma_0\\) search volume rate . current value model change 2000 find new steady state. can see effect growth curve species. original model looks follows:  modified model looks like  effect change growth rate slope juvenile spectrum? steeper shallower? Make plot spectrum see. juvenile spectrum steeper slope \\(-\\mu_0/g_0 - p\\) smaller growth rate coefficient \\(g_0\\) negative.","code":"species_params(params)$gamma ## [1] 4067.903 params_new_gamma <- params species_params(params_new_gamma)$gamma <- 2000 params_new_gamma <- steady(params_new_gamma) ## Warning in setBevertonHolt(params, reproduction_level = old_reproduction_level): ## The following species require an unrealistic reproductive efficiency greater ## than 1: Target species plotGrowthCurves(params) plotGrowthCurves(params_new_gamma) nf <- melt(initialN(params)) nf_new_gamma <- melt(initialN(params_new_gamma)) nf$type <- \"original\" nf_new_gamma$type <- \"changed\" nf_combined <- rbind(nf, nf_new_gamma) ggplot(nf_combined) +   geom_line(aes(x = w, y = value, colour = type)) +   scale_x_log10() +   scale_y_log10() +   labs(x = \"Weight [g]\",        y = \"Number density [1/g]\")"},{"path":"https://sizespectrum.org/mizer/dev/articles/single_species_size-spectrum_dynamics.html","id":"feeding-level","dir":"Articles","previous_headings":"Predation","what":"Feeding level","title":"Single-species size-spectrum dynamics","text":"predator maximum intake rate. simply able utilise food faster rate maximum intake rate. course practice feed maximum intake rate limited availability prey. describe feeding level proportion maximum intake rate predator actually taking prey. simple model feeding level constant.  model reduced search volume feeding level lower  model taking allometric form maximum intake rate \\(h(w)\\) function predator size \\(w\\): \\(h(w) = h\\ w^n\\). current value coefficient \\(h\\) ","code":"plotFeedingLevel(params) plotFeedingLevel(params_new_gamma) species_params(params)$h ## [1] 59.06914"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/articles/single_species_size-spectrum_dynamics.html","id":"predation-mortality","dir":"Articles","previous_headings":"Mortality","what":"Predation mortality","title":"Single-species size-spectrum dynamics","text":"course growth predator one aspect predation. death prey. Growth mortality coupled. Increased growth one class individuals necessitate increased death another. free lunch. specified predation parameters, parameters determine growth predators also mortality rate prey. don’t introduce new parameters death predation.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/single_species_size-spectrum_dynamics.html","id":"external-mortality","dir":"Articles","previous_headings":"Mortality","what":"External mortality","title":"Single-species size-spectrum dynamics","text":"addition mortality caused predation fish, mortality causes. predation animals included model, like sea birds mammals, death old age (senescent death) disease. Mizer allows setting background death setExtMort().","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/single_species_size-spectrum_dynamics.html","id":"fishing-mortality","dir":"Articles","previous_headings":"Mortality","what":"Fishing mortality","title":"Single-species size-spectrum dynamics","text":"cause mortality control mortality fishing. can see fishing set mizer https://sizespectrum.org/mizer/reference/setFishing.html#setting-fishing. look simple example: introduce fishing species fish 30 grams. fish greater 30 grams exposed fishing mortality. call kind fishing selectivity “knife_edge” selectivity. Mizer can deal general selectivity curves, like sigmoidal doubly sigmoidal. also need specify fishing effort can plot resulting fishing mortality.","code":"params_fishing <- params species_params(params_fishing)$sel_func <- \"knife_edge\" species_params(params_fishing)$knife_edge_size <- 30 params_fishing <- setFishing(params_fishing, initial_effort = 1) plotFMort(params_fishing)"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/articles/single_species_size-spectrum_dynamics.html","id":"outlook","dir":"Articles","previous_headings":"","what":"Outlook","title":"Single-species size-spectrum dynamics","text":"fish species studied unlimited food constant mortality. course unrealistic. reality, food become scarce fish population increases much. Also number predators grow. lead interesting important non-linear effects study next tutorial.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/trait_model.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"The Trait-Based Model","text":"trait-based size spectrum model can derived simplification general model outline model description section. complicated community model significant difference two community model aggregates species single spectrum, trait-based model resolves many species. trait-based model asymptotic size considered important trait characterizing species. species-specific parameters, \\(\\beta\\) \\(\\sigma\\), species. model parameters determined asymptotic size. example, weight maturation fixed fraction asymptotic size. asymptotic sizes species spread evenly logarithmic scale. number species important affect general dynamics model.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/trait_model.html","id":"sec:set_up_trait_model","dir":"Articles","previous_headings":"","what":"Setting up a trait-based model","title":"The Trait-Based Model","text":"help set trait-based model, wrapper function, newTraitParams(). Like newCommunityParams() function described section community model, function can take many arguments. default values don’t need worry moment. See help page newCommunityParams() details. One key differences community type model trait-based model reproduction egg production considered. community model, reproduction constant relationship abundance community egg production. trait-based model, egg production dependent mature individuals investing part energy income reproduction. relationship energy invested reproduction actual rate egg production modelled using Beverton-Holt type function (default mizer, see section density-dependence reproduction) reproduction rate \\(R_i\\) (numbers per time) approaches maximum energy invested increases. set model 10 species, asymptotic sizes ranging 10 g 100 kg. parameters default values. output reminds user \\(\\gamma\\) specified, calculated using parameters. function returns object type MizerParams holds model information, including species parameters. object can therefore interrogated way described section community model. summary shows us now 10 species model, asymptotic sizes ranging \\(8.9125094\\) \\(`r max(species_params(params)\\)w_inf)`$. rather strange-looking values sizes due fact size classes equally spaced logarithmic scale. size maturity (w_mat) linearly related asymptotic size. species preferred predator-prey mass ratio parameter values (beta sigma, see section predator/prey mass ratio). \\(161\\) size bins community \\(301\\) size bins including resource spectrum. Ignore summary section fishing gear moment. explained later.","code":"params <- newTraitParams(no_sp = 10, min_w_inf = 10, max_w_inf = 1e5) summary(params) ## An object of class \"MizerParams\"  ## Consumer size spectrum: ##  minimum size:   0.001 ##  maximum size:   1e+05 ##  no. size bins:  161 ## Resource size spectrum: ##  minimum size:   1e-10 ##  maximum size:   2.23872 ##  no. size bins:  208 (301 size bins in total) ## Species details: ##    species        w_inf        w_mat w_min  f0   fc beta sigma ## 1        1 8.912509e+00     2.511886 0.001 0.6 0.25  100   1.3 ## 2        2 2.511886e+01     7.079458 0.001 0.6 0.25  100   1.3 ## 3        3 7.079458e+01    19.952623 0.001 0.6 0.25  100   1.3 ## 4        4 1.995262e+02    56.234133 0.001 0.6 0.25  100   1.3 ## 5        5 5.623413e+02   158.489319 0.001 0.6 0.25  100   1.3 ## 6        6 1.584893e+03   446.683592 0.001 0.6 0.25  100   1.3 ## 7        7 4.466836e+03  1258.925412 0.001 0.6 0.25  100   1.3 ## 8        8 1.258925e+04  3548.133892 0.001 0.6 0.25  100   1.3 ## 9        9 3.548134e+04 10000.000000 0.001 0.6 0.25  100   1.3 ## 10      10 1.000000e+05 28183.829313 0.001 0.6 0.25  100   1.3 ##  ## Fishing gear details: ## Gear          Effort  Target species  ##  ---------------------------------- ## knife_edge_gear 0.00   1, 2, 3, 4, 5, 6, 7, 8, 9, 10"},{"path":"https://sizespectrum.org/mizer/dev/articles/trait_model.html","id":"sec:running_trait_model","dir":"Articles","previous_headings":"","what":"Running the trait-based model","title":"The Trait-Based Model","text":"community model, can project trait-based model time using project() function. project model 75 years without fishing (effort argument set 0). use default initial population abundances need pass initial population values (see section setting initial abundances). results MizerSim object contains abundances community resource spectra time, well original MizerParams object. community model, can get quick overview results simulation calling plot() method:  summary plot panels one generated community model, can see species community plotted. panels show situation final time step simulation, apart biomass time plot. trait-based model species fully interact , predation mortality feeding level size species. simulation turned fishing fishing mortality 0. size-spectra show abundances size evenly spaced log asymptotic size.","code":"sim <- project(params, t_max = 75, effort = 0) plot(sim)"},{"path":"https://sizespectrum.org/mizer/dev/articles/trait_model.html","id":"sec:trophic_cascade_trait_model","dir":"Articles","previous_headings":"","what":"Example of a trophic cascade with the trait-based model","title":"The Trait-Based Model","text":"community model, possible use trait-based model simulate trophic cascade. , perform two simulations, one fishing one without. therefore need consider fishing gears selectivity set newTraitParams() function. default fishing selectivity function knife-edge function, selects individuals larger 1000 g. also one fishing gear operation, selects species. can see call summary() method params argument set . bottom summary section Fishing gear details. can see one gear, called knife_edge_gear selects species 1 10. control size individuals selected knife_edge_size argument newTraitParams() function. default value 1000 g. mizer possible include one fishing gear model different species caught different gears. ignore now, explore introduce industrial fishery trait-based model. set trait-based model fishing set MizerParams object exactly way knife_edge_size argument explicitly passed clarity: First perform simulation without fishing way setting effort argument 0: Now simulate fishing. , use effort 0.75. mentioned section trophic cascades community model, fishing mortality species calculated product effort, catchability selectivity (see section fishing gears details). Selectivity ranges 0 (selected) 1 (fully selected). default value catchability 1. Therefore, simulation fishing mortality fully selected individual simply equal effort. effort constant throughout duration simulation (however, mizer allow variable effort). , can plot summary fished community using default plot() function. knife-edge selectivity 1000 g can clearly seen fishing mortality panel:  trophic cascade can explored comparing total abundances species size community fished unfished. mentioned , obtain abundances N(sim), returns three dimensional array dimensions time x species x size. 76 time steps (75 simulation plus one stores initial population), 10 species 100 sizes: community model, interested relative total abundances size final time step use finalN() function. gives us matrix one row per species one column per size bin. sum column get vector total abundance per size bin: can use vectors calculate relative abundances: can plotted using commands :  impact fishing species larger 1000 g can clearly seen. fishing pressure lowers abundance large fish (\\(> 1000\\) g). relieves predation pressure smaller prey (preferred predator-prey size ratio given \\(\\beta\\) parameter, set 100 default), leading increase abundance. turn increases predation mortality smaller prey, reduces abundance . impact can also seen looking predation mortality size. predation mortalities retrieved using getPredMort() function. mentioned , trait based model predation mortality size species. Therefore look predation mortality first species. predation mortalities can plotted. Predation mortalities unfished (dashed line) fished (solid line) trait-based model.","code":"params_knife <- newTraitParams(no_sp = 10, min_w_inf = 10, max_w_inf = 1e5,     knife_edge_size = 1000) sim0 <- project(params_knife, effort = 0, t_max = 75) sim1 <- project(params_knife, effort = 0.75, t_max = 75) plot(sim1) dim(N(sim0)) ## [1]  76  10 161 total_abund0 <- colSums(finalN(sim0)) total_abund1 <- colSums(finalN(sim1)) relative_abundance <- total_abund1 / total_abund0 plot(x = w(params), y = relative_abundance, log = \"xy\", type = \"n\",       xlab = \"Size (g)\", ylab = \"Relative abundance\", ylim = c(0.1, 10)) lines(x = w(params), y = relative_abundance) lines(x = c(min(w(params)), max(w(params))), y = c(1, 1), lty = 2) m2_no_fishing <- getPredMort(params, finalN(sim0))[1, ] m2_with_fishing <- getPredMort(params, finalN(sim1))[1, ] plot(x = w(params), y = m2_with_fishing, log = \"x\", type = \"n\",       xlab = \"Size [g]\", ylab = \"Predation Mortality [1/year]\") lines(x = w(params), y = m2_no_fishing, lty = 2) lines(x = w(params), y = m2_with_fishing)"},{"path":"https://sizespectrum.org/mizer/dev/articles/trait_model.html","id":"sec:trait_additional_gear","dir":"Articles","previous_headings":"","what":"Setting up an industrial fishing gear","title":"The Trait-Based Model","text":"section want operate industrial fishery. Industrial fishing targets small zooplanktivorous species typically used fishmeal production. previous simulations one fishing gear targeted species community. gear knife-edge selectivity selected species larger 1 kg. can see look gear parameters expand model include multiple fishing gears. requires us look closely fishing gears handled mizer. mizer possible fishing gear catch subset species model. useful running simulation project() can specify effort per gear can turn gears want. gear selectivity curve species. set model include two fishing gears: industrial gear catches species asymptotic size less equal 500g, second gear, , catches everything else. position knife-edge gears occur 0.05 x asymptotic size .e. selectivity parameters different species depend asymptotic size. need change gear_params data frame. want keep original model, first make copy making modifications. start need know asymptotic sizes species model can determine knife-edge positions species. stored w_inf column species_params data frame inside params object. can use asymptotic sizes set vector knife edge sizes 0.05 times asymptotic size: Now want assign species either industrial gear. check just happened let us look new gear parameter data frame: created MizerParams object multiple gears, can now turn attention running projection multiple gears. previous examples calling project() specified fishing effort effort argument using single value. fixes fishing effort gears model, time steps. can multi-gear parameter object: plotting can see fishing mortality species now different selectivity pattern, position selectivity knife-edge given asymptotic size species.  industrial fishery said wanted species asymptotic size 500 g less fished. several ways specifying effort argument project() . specified single value used gears, time steps. also possible specify separate effort gear used time steps. pass effort named vector. set effort Industrial gear 0.75, effort gear 0 (effectively turning ). Now can see Industrial gear operating fishing mortality species larger 500 g 0.","code":"gear_params(params) ##                                gear species   sel_func knife_edge_size ## 1, knife_edge_gear  knife_edge_gear       1 knife_edge            1000 ## 2, knife_edge_gear  knife_edge_gear       2 knife_edge            1000 ## 3, knife_edge_gear  knife_edge_gear       3 knife_edge            1000 ## 4, knife_edge_gear  knife_edge_gear       4 knife_edge            1000 ## 5, knife_edge_gear  knife_edge_gear       5 knife_edge            1000 ## 6, knife_edge_gear  knife_edge_gear       6 knife_edge            1000 ## 7, knife_edge_gear  knife_edge_gear       7 knife_edge            1000 ## 8, knife_edge_gear  knife_edge_gear       8 knife_edge            1000 ## 9, knife_edge_gear  knife_edge_gear       9 knife_edge            1000 ## 10, knife_edge_gear knife_edge_gear      10 knife_edge            1000 ##                     catchability ## 1, knife_edge_gear             1 ## 2, knife_edge_gear             1 ## 3, knife_edge_gear             1 ## 4, knife_edge_gear             1 ## 5, knife_edge_gear             1 ## 6, knife_edge_gear             1 ## 7, knife_edge_gear             1 ## 8, knife_edge_gear             1 ## 9, knife_edge_gear             1 ## 10, knife_edge_gear            1 params_multi_gear <- params gear_params(params_multi_gear)$knife_edge_size <-    species_params(params)$w_inf * 0.05 no_sp <- 10 gear <- rep(\"Industrial\", no_sp) gear[species_params(params)$w_inf > 500] <- \"Other\" gear_params(params_multi_gear)$gear <- gear gear_params(params_multi_gear) ##                     gear species   sel_func knife_edge_size catchability ## 1, Industrial Industrial       1 knife_edge       0.4456255            1 ## 2, Industrial Industrial       2 knife_edge       1.2559432            1 ## 3, Industrial Industrial       3 knife_edge       3.5397289            1 ## 4, Industrial Industrial       4 knife_edge       9.9763116            1 ## 5, Other           Other       5 knife_edge      28.1170663            1 ## 6, Other           Other       6 knife_edge      79.2446596            1 ## 7, Other           Other       7 knife_edge     223.3417961            1 ## 8, Other           Other       8 knife_edge     629.4627059            1 ## 9, Other           Other       9 knife_edge    1774.0669462            1 ## 10, Other          Other      10 knife_edge    5000.0000000            1 sim_multi_gear <- project(params_multi_gear, t_max = 75, effort = 0.5) plot(sim_multi_gear) sim_multi_gear <- project(params_multi_gear, t_max = 75,     effort = c(Industrial = 0.75, Other = 0)) plot(sim_multi_gear)"},{"path":"https://sizespectrum.org/mizer/dev/articles/trait_model.html","id":"the-impact-of-industrial-fishing","dir":"Articles","previous_headings":"","what":"The impact of industrial fishing","title":"The Trait-Based Model","text":"previous section set ran model industrial fishery operating selected smaller species. can now answer question: impact fishery? can compare abundances fished (sim_industrial1) unfished (sim_industrial0) cases: plot relative abundances:  shows another trophic cascade, although time one driven fishing species midrange part spectrum, largest individuals . trophic cascade acts directions. cascade upwards driven lack food predators leading smaller realised maximum sizes. cascade downwards mechanism fishing large fish, combination predation mortality food limitation. next section explains setup general multispecies model.","code":"sim_industrial0 <- project(params_multi_gear, t_max = 75, effort = 0) sim_industrial1 <- project(params_multi_gear, t_max = 75,     effort = c(Industrial = 0.75, Other = 0)) total_abund0 <- apply(finalN(sim_industrial0), 2, sum) total_abund1 <- apply(finalN(sim_industrial1), 2, sum) relative_abundance <- total_abund1 / total_abund0 plot(x = w(params), y = relative_abundance, log = \"xy\", type = \"n\",       xlab = \"Size [g]\", ylab=\"Relative abundance\", ylim = c(0.1, 10)) lines(x = w(params), y = relative_abundance) lines(x = c(min(w(params)),max(w(params))), y = c(1, 1), lty = 2)"},{"path":"https://sizespectrum.org/mizer/dev/articles/working_with_git.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Working with git and GitHub","text":"initially takes bit effort get hang works. Therefore take little exercise see create feature branch, make change mizer file, commit file push GitHub, make pull request contribute change back core mizer code. change making consists adding name list people set fork mizer. assume set working environment checked mizer fork local computer described section Setting working environment mizer developer guide. yet read section, please now follow instructions continuing tutorial.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/working_with_git.html","id":"creating-a-branch","dir":"Articles","previous_headings":"","what":"Creating a branch","title":"Working with git and GitHub","text":"Initially “master” branch repository. code branch repository perfect copy code master branch main mizer repository https://github.com/sizespectrum/mizer. always keep way commit changes branch. development work branches branched master branch. start working feature bug fix, start new branch name suggestive feature fix. example, adding info list people set fork mizer, let’s call branch “add_my_info”. dialog box enter name new branch: “add_my_info”. Leave remote “origin” make sure “Sync branch remote” checkbox ticked. means new branch created local repository also GitHub repository. Click “Create”. now new branch repository, far branch contains exactly content master branch branched .","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/working_with_git.html","id":"editing-a-file","dir":"Articles","previous_headings":"","what":"Editing a file","title":"Working with git and GitHub","text":"Next make edit file. “Files” tab RStudio, navigate “vignette” subdirectory click name “developer_vignette.Rmd”. open file Source editor pane. file source file developer guide, written R Markdown format. find subheading “People mizer fork” towards bottom outline. Clicking move corresponding section file. can now add another bullet point name interests. R Markdown file, can compile clicking “Knit” button editor toolbar. also save changes disk. short resulting html file displayed RStudio viewer allow check formatting bullet point. made changes actual R code mizer, course also rebuild mizer new code clicking “Install Restart” “Build” pane RStudio test , particular run automated unit tests hitting Ctrl+Shift+T.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/working_with_git.html","id":"committing-your-changes","dir":"Articles","previous_headings":"","what":"Committing your changes","title":"Working with git and GitHub","text":"blue M left file vignettes/developer_vignette.Rmd indicates file modified hard disc. files question mark files project directory part repository. now tick file want commit repository. screenshot file vignettes/developer_vignette.Rmd already selected consequence, lower half pop-window shows modifications made file. see additions green. top right pop-window enter commit message allow others later understand purpose commit. really useful put meaningful message . first time make commit new branch, may want write extended commit message explains new branch . happy everything, hit “Commit” button. Now changes forever saved history local repository.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/working_with_git.html","id":"pushing-and-pulling","dir":"Articles","previous_headings":"","what":"Pushing and pulling","title":"Working with git and GitHub","text":"far committed changes local repository computer. changes yet synchronised repository GitHub. , click “Push” button toolbar “Git” pane, one looks like arrow. window pop confirm push worked alright. can close window. may several computers work can local repository every one . scenario, may pushed changes onto GitHub repository another computer. able push new changes current computer pulled changes onto current computer. hitting “Pull” button looks like arrow right next “Push” button. incorporate changes GitHub local repository generally go smoothly. case edited lines file different machines can run conflicts git can resolve automatically. order avoid conflicts, pull push frequently.","code":""},{"path":"https://sizespectrum.org/mizer/dev/articles/working_with_git.html","id":"making-a-pull-request","dir":"Articles","previous_headings":"","what":"Making a pull request","title":"Working with git and GitHub","text":"feature developed tested, want merge master branch upstream repository https://github.com/sizespectrum/mizer. can however push changes directly repository. Instead create GitHub pull request. get code review another mizer developer one developers write access main repository merges changes. Due extra code review changes integrated core mizer code, hesitant making pull requests. case anything wrong changes, get friendly feedback developers. can make changes commit branch pull request automatically get updated. pull request easy create using GitHub web interface: Go home page forked repository GitHub Select branch via “Branch” drop-. Click “New pull request” button next drop-. Go ahead create pull request “add_my_info” branch. pull request reviewed accepted developer changes thus merged upstream master branch, can delete development branch. delete button GitHub delete branch (example page listing branches). also need delete branch separately local repository issuing terminal, `add_my_info’ name development branch. addition may want tell local repository remote branch disappeared well: Otherwise stay RStudio’s list remote branches.","code":"git branch -d add_my_info git remote prune origin"},{"path":"https://sizespectrum.org/mizer/dev/articles/working_with_git.html","id":"merging-from-upstream","dir":"Articles","previous_headings":"","what":"Merging from upstream","title":"Working with git and GitHub","text":"pull request, pull request anyone else mizer fork, merged upstream repository, master branch fork longer sync upstream master branch. want merge upstream changes master branch. can use “Terminal” pane RStudio, execute following git commands: , unless locally changed line file someone else changed upstream repository, merging automatic. push merged master branch back GitHub repository “Push” button. get error attempting fetch upstream upstream repository may yet set repository. can check list upstream, execute command try . first time go steps, think never grow like git. lot fuss. circuitous route change make master branch GitHub repository: editor harddrive development branch local repository via Commit local repository GitHub repository via Push GitHub repository main mizer repository via Pull Request main mizer repository local master branch via merge local master branch master branch GitHub repository via Push best system software developers come allow many people collaborate code. may one development branch may working several features time features still waiting pull request merged. case, merging upstream changes master branch, may also want merge master branch development branches. just go development branch ","code":"git fetch upstream git checkout master git merge upstream/master git remote -v git remote add upstream https://github.com/sizespectrum/mizer.git git merge master"},{"path":"https://sizespectrum.org/mizer/dev/articles/working_with_git.html","id":"people-with-a-mizer-fork","dir":"Articles","previous_headings":"","what":"People with a mizer fork","title":"Working with git and GitHub","text":"information people made mizer fork. name list , please add , together bit info interests. make edit commit contribute back explained section Working git. Gustav Delius Maintainer mizer package. Interested building mizer community developing mizer code user-friendly possible time sufficiently flexible extendable new research. Mariella Canales Interested multispecies size-based analysis pelagic fish community Northern Chile.","code":""},{"path":"https://sizespectrum.org/mizer/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gustav Delius. Maintainer, author, copyright holder. Finlay Scott. Author, copyright holder. Julia Blanchard. Author, copyright holder. Ken Andersen. Author, copyright holder. Richard Southwell. Contributor, copyright holder.","code":""},{"path":"https://sizespectrum.org/mizer/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"F. Scott, J.L. Blanchard K.H. Andersen. mizer: R package multispecies, trait-based community size spectrum ecological modelling. Methods Ecology Evolution 5(10) 1121-1125 (2014).","code":"@Article{,   author = {Finlay Scott and Julia L. Blanchard and Ken H. Andersen},   title = {mizer: an R package for multispecies, trait-based and community size spectrum ecological modelling},   journal = {Methods Ecol Evol},   year = {2014},   volume = {5},   pages = {1121-1125},   doi = {10.1111/2041-210X.12256}, }"},{"path":"https://sizespectrum.org/mizer/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Multi-Species Dynamic Size Spectrum Modelling in R","text":"package CRAN therefore available R’s built-package manager.","code":"# Install latest released version from CRAN install.packages(\"mizer\")  # Alternatively, install the development version from GitHub remotes::install_github(\"sizespectrum/mizer\")"},{"path":"https://sizespectrum.org/mizer/dev/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Multi-Species Dynamic Size Spectrum Modelling in R","text":"following code loads mizer package, loads information species North Sea comes example package, sets parameters mizer model, runs simulation 10 years. results simulation can analysed, example via plots:  See accompanying Get started page details package works, including detailed examples.","code":"library(mizer) params <- newMultispeciesParams(NS_species_params, NS_interaction) sim <- project(params, t_max = 10, effort = 0) plot(sim)"},{"path":"https://sizespectrum.org/mizer/dev/index.html","id":"dynamic-multi-species-size-spectrum-models","dir":"","previous_headings":"","what":"Dynamic multi-species size-spectrum models","title":"Multi-Species Dynamic Size Spectrum Modelling in R","text":"mizer model captures interactions multiple species. growth rates fish determined availability prey death rates influenced abundance predators, well fishing. model starts individual-level physiological rates species, well predation preferences, deduces population-level dynamics . Thus quantities like fish diets fisheries yields emerge dynamically can projected future. mizer model tracks size individuals grow several orders magnitude egg size maximum size, correctly tracks ontogenetic diet shifts. individual typically moves several trophic levels life time. often correctly captured multi-species models. mizer model can set small amount information uses allometric scaling relations size-based feeding rules choose sensible defaults unknown parameters. Setting new multi-species mizer model two-step process, similar may familiar Ecopath Ecosim: First one calibrates model describe steady state agreement current observations (Ecopath), one chooses additional parameters determine dynamics away steady state (Ecosim). model can used investigate future effects changes fishing policy environmental stressors.","code":""},{"path":"https://sizespectrum.org/mizer/dev/index.html","id":"modelling-environmental-change","dir":"","previous_headings":"","what":"Modelling environmental change","title":"Multi-Species Dynamic Size Spectrum Modelling in R","text":"mizer model good tool studying effect environmental changes, like climate change, mechanistic model can deduce complex population-level changes one interested simpler changes physiological rates feeding interactions individual fish species.","code":""},{"path":"https://sizespectrum.org/mizer/dev/index.html","id":"smooth-traffic-on-the-biomass-highway","dir":"","previous_headings":"","what":"Smooth traffic on the biomass highway","title":"Multi-Species Dynamic Size Spectrum Modelling in R","text":"interesting think marine ecosystem transport system moves biomass size primary producers (mostly unicellular plankton) sizes fish humans like consume. fish grows egg size maturity eating smaller individuals like car biomass highway. yield fisheries depend traffic flowing smoothly without traffic jams. analogy road traffic may helpful: road traffic, traffic density gets high section highway, drivers slow , leads pile-producing even higher traffic density, leading slow-potentially vicious cycle known traffic jam. Traffic management ignores traffic density affects traffic speed fails. Luckily mathematical understanding transport equations made practical contributions managing traffic ways produce smoother traffic flow hence higher throughput. Mizer implements transport equations marine ecosystems. potential traffic jams : example high density predators particular size, preference prey particular smaller size, due competition prey growth predators slows , leading pile-leads depletion prey, leading slow-, potentially vicious cycle. Luckily natural ecosystem evolved facilitate smooth traffic biomass highway resultant high productivity. state characterised approximate power-law shape biomass size spectrum. purpose mizer allow us understand various stressors, like fishing climate change, affect size spectrum hence flow biomass productivity resilience marine ecosystem. Mizer allows us investigate size-based fisheries management strategies can used keep ecosystem close natural productive state.","code":""},{"path":"https://sizespectrum.org/mizer/dev/index.html","id":"a-model-one-can-understand","dir":"","previous_headings":"","what":"A model one can understand","title":"Multi-Species Dynamic Size Spectrum Modelling in R","text":"One big advantage mizer model based strong mathematical foundation. allows degree priori understanding behaviour model absent many multi-species models. theoretical foundation well presented book “Fish Ecology, Evolution, Exploitation” Ken Andersen.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/BevertonHoltRDD.html","id":null,"dir":"Reference","previous_headings":"","what":"Beverton Holt function to calculate density-dependent reproduction rate — BevertonHoltRDD","title":"Beverton Holt function to calculate density-dependent reproduction rate — BevertonHoltRDD","text":"Takes density-independent rates \\(R_{di}\\) egg production (calculated getRDI()) returns reduced, density-dependent reproduction rates \\(R_{dd}\\) given $$R_{dd} = R_{di} \\frac{R_{max}}{R_{di} + R_{max}}$$ \\(R_{max}\\) maximum possible reproduction rates must specified column species parameter dataframe. (quantities equation species-specific dropped species index simplicity.)","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/BevertonHoltRDD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beverton Holt function to calculate density-dependent reproduction rate — BevertonHoltRDD","text":"","code":"BevertonHoltRDD(rdi, species_params, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/BevertonHoltRDD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Beverton Holt function to calculate density-dependent reproduction rate — BevertonHoltRDD","text":"rdi Vector density-independent reproduction rates \\(R_{di}\\) species. species_params species parameter dataframe. Must contain column R_max holding maximum reproduction rate \\(R_{max}\\) species. ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/BevertonHoltRDD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Beverton Holt function to calculate density-dependent reproduction rate — BevertonHoltRDD","text":"Vector density-dependent reproduction rates.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/BevertonHoltRDD.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Beverton Holt function to calculate density-dependent reproduction rate — BevertonHoltRDD","text":"one example density-dependence. can write function based example, returning different density-dependent reproduction rates. Three examples provided RickerRDD(), SheperdRDD(), noRDD() constantRDD(). explanation see setReproduction().","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/MizerParams-class.html","id":null,"dir":"Reference","previous_headings":"","what":"A class to hold the parameters for a size based model. — MizerParams-class","title":"A class to hold the parameters for a size based model. — MizerParams-class","text":"Although possible build MizerParams object hand recommended several constructors available. Dynamic simulations performed using project() function objects class. user never need access slots inside MizerParams object directly.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/MizerParams-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A class to hold the parameters for a size based model. — MizerParams-class","text":"MizerParams class fairly complex large number slots, many multidimensional arrays. dimensions arrays strictly enforced MizerParams objects consistent terms number species number size classes. MizerParams class hold dynamic information, e.g. abundances harvest effort time. held MizerSim objects.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/MizerParams-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A class to hold the parameters for a size based model. — MizerParams-class","text":"metadata list metadata information. See setMetadata(). mizer_version package version mizer (returned packageVersion(\"mizer\")) created last saved model. extensions named vector strings name name extension package needed run model value string giving information remotes package needs install correct version extension package, see https://remotes.r-lib.org/. time_created POSIXct date-time object creation time. time_modified POSIXct date-time object last modified time. w size grid fish part spectrum. increasing vector weights (grams) running smallest egg size largest asymptotic size. dw widths (grams) size bins w_full size grid full size range including resource spectrum. increasing vector weights (grams) running smallest resource size largest asymptotic size fish. last entries vector equal content w slot. dw_full width size bins full spectrum. last entries equal content dw slot. w_min_idx vector holding index weight egg size species maturity array (species x size) holds proportion individuals species size mature. enters calculation spawning stock biomass getSSB(). Set setReproduction(). psi array (species x size) holds allocation reproduction species size, \\(\\psi_i(w)\\). Changed setReproduction(). intake_max array (species x size) holds maximum intake species size. Changed setMaxIntakeRate(). search_vol array (species x size) holds search volume species size. Changed setSearchVolume(). metab array (species x size) holds metabolism species size. Changed setMetabolicRate(). mu_b array (species x size) holds external mortality rate \\(\\mu_{ext.}(w)\\). Changed setExtMort(). pred_kernel array (species x predator size x prey size) holds predation coefficient predator size prey size. NA following two slots used. Changed setPredKernel(). ft_pred_kernel_e array (species x log predator/prey size ratio) holds Fourier transform feeding kernel form appropriate evaluating encounter rate integral. NA pred_kernel used calculate available energy integral. Changed setPredKernel(). ft_pred_kernel_p array (species x log predator/prey size ratio) holds Fourier transform feeding kernel form appropriate evaluating predation mortality integral. NA pred_kernel used calculate integral. Changed setPredKernel(). rr_pp vector length w_full slot. size specific growth rate resource spectrum. Changed setResource(). cc_pp vector length w_full slot. size specific carrying capacity resource spectrum. Changed setResource(). resource_dynamics Name function projecting resource abundance density one timestep. default resource_semichemostat(). Changed setResource(). other_dynamics named list functions projecting values dynamical components ecosystem may modelled mizer extensions installed. names list entries names components. other_encounter named list functions calculating contribution encounter rate dynamical component. other_mort named list functions calculating contribution mortality rate dynamical components. other_params list containing parameters needed mizer extensions may installed model dynamical components ecosystem. rates_funcs named list names functions used calculate rates needed project(). default set names built-rate functions. sc community abundance scaling community species_params data.frame hold species specific parameters. See newMultispeciesParams() details. gear_params Data frame parameters gear selectivity. See setFishing() details. interaction species specific interaction matrix, \\(\\theta_{ij}\\). Changed setInteraction(). selectivity array (gear x species x w) holds selectivity gear species size, \\(S_{g,,w}\\). Changed setFishing(). catchability array (gear x species) holds catchability species gear, \\(Q_{g,}\\). Changed setFishing(). initial_effort vector containing initial fishing effort gear. Changed setFishing(). initial_n array (species x size) holds initial abundance species weight. initial_n_pp vector length w_full slot describes initial resource abundance weight. initial_n_other list initial abundances ecosystem components. length zero components. resource_params List parameters resource. See setResource(). Abundance multipliers. linecolour named vector colour values, named species. Used give consistent colours plots. linetype named vector linetypes, named species. Used give consistent line types plots. ft_mask array (species x w_full) zeros weights larger asymptotic weight species. Used efficiently minimize wrap-around errors Fourier transform calculations.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/MizerParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Alias for set_multispecies_model() — MizerParams","title":"Alias for set_multispecies_model() — MizerParams","text":"alias provided backward compatibility mizer version <= 1.0","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/MizerParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alias for set_multispecies_model() — MizerParams","text":"","code":"MizerParams(   species_params,   interaction = matrix(1, nrow = nrow(species_params), ncol = nrow(species_params)),   min_w_pp = 1e-10,   min_w = 0.001,   max_w = max(species_params$w_inf) * 1.1,   no_w = 100,   n = 2/3,   q = 0.8,   f0 = 0.6,   kappa = 1e+11,   lambda = 2 + q - n,   r_pp = 10,   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/MizerParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alias for set_multispecies_model() — MizerParams","text":"species_params data frame species-specific parameter values. interaction Optional interaction matrix species (predator species x prey species). default entries 1. See \"Setting interaction matrix\" section . min_w_pp smallest size resource spectrum. default set smallest value consumers can feed. min_w Sets size eggs species given w_min column species_params dataframe. max_w largest size consumer spectrum. default set largest w_inf specified species_params data frame. no_w number size bins consumer spectrum. n allometric growth exponent. can overruled individual species including n column species_params. q Allometric exponent search volume f0 Expected average feeding level. Used set gamma, coefficient search rate. Ignored gamma given explicitly. kappa Coefficient intrinsic resource carrying capacity lambda Scaling exponent intrinsic resource carrying capacity r_pp Coefficient intrinsic resource birth rate ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/MizerSim-class.html","id":null,"dir":"Reference","previous_headings":"","what":"A class to hold the results of a simulation — MizerSim-class","title":"A class to hold the results of a simulation — MizerSim-class","text":"class holds results projecting MizerParams object time using project().","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/MizerSim-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A class to hold the results of a simulation — MizerSim-class","text":"new MizerSim object can created MizerSim() constructor, never object created automatically project() needed. user never access slots MizerSim object directly. Instead range functions extract information. N() NResource() return arrays saved abundances species resource population size respectively. getEffort() returns fishing effort gear time. getTimes() returns vector times simulation results stored idxFinalT() returns index access specifically value final time arrays returned functions. getParams() returns MizerParams object passed project(). also several summary_functions plotting_functions available explore contents MizerSim object. arrays named dimensions. names time dimension denote time years. names w dimension weights grams rounded three significant figures. names sp dimension species name order specified species_params data frame. names gear dimension names gears, order specified setting MizerParams object. Extensions mizer can use n_other slot store abundances ecosystem components extensions provide functions accessing information. MizerSim class changed since previous versions mizer. use MizerSim object created previous version, need upgrade upgradeSim().","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/MizerSim-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A class to hold the results of a simulation — MizerSim-class","text":"params object type MizerParams. n Three-dimensional array (time x species x size) stores projected community number densities. n_pp array (time x size) stores projected resource number densities. n_other list array (time x component) stores projected values ecosystem components. effort array (time x gear) stores fishing effort time gear.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/MizerSim.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for the MizerSim class — MizerSim","title":"Constructor for the MizerSim class — MizerSim","text":"constructor MizerSim class. used project() create MizerSim objects right dimensions. necessary users use constructor.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/MizerSim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for the MizerSim class — MizerSim","text":"","code":"MizerSim(params, t_dimnames = NA, t_max = 100, t_save = 1)"},{"path":"https://sizespectrum.org/mizer/dev/reference/MizerSim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for the MizerSim class — MizerSim","text":"params MizerParams object t_dimnames Numeric vector used time dimensions slots. Default = NA. t_max maximum time step simulation. used t_dimnames = NA. Default value = 100. t_save often results simulation stored. used t_dimnames = NA. Default value = 1.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/MizerSim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for the MizerSim class — MizerSim","text":"object type MizerSim","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/N.html","id":null,"dir":"Reference","previous_headings":"","what":"Time series of size spectra — N","title":"Time series of size spectra — N","text":"Fetch simulation results size spectra time.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/N.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time series of size spectra — N","text":"","code":"N(sim)  NResource(sim)"},{"path":"https://sizespectrum.org/mizer/dev/reference/N.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time series of size spectra — N","text":"sim MizerSim object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/N.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time series of size spectra — N","text":"N(): three-dimensional array (time x species x size) number density consumers NResource(): array (time x size) number density resource","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/N.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time series of size spectra — N","text":"","code":"str(N(NS_sim)) #>  num [1:44, 1:12, 1:100] 1.67e+13 1.67e+13 1.69e+13 1.66e+13 1.65e+13 ... #>  - attr(*, \"dimnames\")=List of 3 #>   ..$ time: chr [1:44] \"1967\" \"1968\" \"1969\" \"1970\" ... #>   ..$ sp  : chr [1:12] \"Sprat\" \"Sandeel\" \"N.pout\" \"Herring\" ... #>   ..$ w   : chr [1:100] \"0.001\" \"0.00119\" \"0.00142\" \"0.0017\" ... str(NResource(NS_sim)) #>  num [1:44, 1:218] 4.88e+35 4.88e+35 4.88e+35 4.88e+35 4.88e+35 ... #>  - attr(*, \"dimnames\")=List of 2 #>   ..$ time: chr [1:44] \"1967\" \"1968\" \"1969\" \"1970\" ... #>   ..$ w   : chr [1:218] \"8.73e-13\" \"1.04e-12\" \"1.24e-12\" \"1.48e-12\" ..."},{"path":"https://sizespectrum.org/mizer/dev/reference/NOther.html","id":null,"dir":"Reference","previous_headings":"","what":"Time series of other components — NOther","title":"Time series of other components — NOther","text":"Fetch simulation results components time.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/NOther.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time series of other components — NOther","text":"","code":"NOther(sim)"},{"path":"https://sizespectrum.org/mizer/dev/reference/NOther.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time series of other components — NOther","text":"sim MizerSim object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/NOther.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time series of other components — NOther","text":"list array (time x component) stores projected values ecosystem components.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/NS_interaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Example interaction matrix for the North Sea example — NS_interaction","title":"Example interaction matrix for the North Sea example — NS_interaction","text":"interaction coefficient predator prey species North Sea.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/NS_interaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example interaction matrix for the North Sea example — NS_interaction","text":"","code":"NS_interaction"},{"path":"https://sizespectrum.org/mizer/dev/reference/NS_interaction.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example interaction matrix for the North Sea example — NS_interaction","text":"12 x 12 matrix.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/NS_interaction.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example interaction matrix for the North Sea example — NS_interaction","text":"Blanchard et al.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/NS_interaction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example interaction matrix for the North Sea example — NS_interaction","text":"","code":"if (FALSE) { params <- MizerParams(NS_species_params_gears,                       interaction = NS_inter) sim = project(params, effort = c(Industrial = 0, Pelagic = 1,                                   Beam = 0.5, Otter = 0.5)) plot(sim) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/NS_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Example MizerParams object for the North Sea example — NS_params","title":"Example MizerParams object for the North Sea example — NS_params","text":"MizerParams object created NS_species_params_gears species parameters inter interaction matrix together initial condition corresponding steady state obtained fishing effort effort = c(Industrial = 0, Pelagic = 1, Beam = 0.5, Otter = 0.5).","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/NS_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example MizerParams object for the North Sea example — NS_params","text":"","code":"NS_params"},{"path":"https://sizespectrum.org/mizer/dev/reference/NS_params.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example MizerParams object for the North Sea example — NS_params","text":"MizerParams object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/NS_params.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example MizerParams object for the North Sea example — NS_params","text":"Blanchard et al.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/NS_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example MizerParams object for the North Sea example — NS_params","text":"","code":"if (FALSE) { sim = project(NS_params, effort = c(Industrial = 0, Pelagic = 1,                                      Beam = 0.5, Otter = 0.5)) plot(sim) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/NS_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Example MizerSim object for the North Sea example — NS_sim","title":"Example MizerSim object for the North Sea example — NS_sim","text":"MizerSim object containing simulation historical fishing mortalities North Sea, created tutorial \"Multi-Species Model North Sea\".","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/NS_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example MizerSim object for the North Sea example — NS_sim","text":"","code":"NS_sim"},{"path":"https://sizespectrum.org/mizer/dev/reference/NS_sim.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example MizerSim object for the North Sea example — NS_sim","text":"MizerSim object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/NS_sim.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example MizerSim object for the North Sea example — NS_sim","text":"https://sizespectrum.org/mizer/articles/a_multispecies_model_of_the_north_sea.html","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/NS_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example MizerSim object for the North Sea example — NS_sim","text":"","code":"if (FALSE) { plotBiomass(NS_sim) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/NS_species_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Example species parameter set based on the North Sea — NS_species_params","title":"Example species parameter set based on the North Sea — NS_species_params","text":"data set based species North Sea (Blanchard et al.). data.frame contains necessary information used MizerParams() constructor. gear column, species assumed fished separate gear.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/NS_species_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example species parameter set based on the North Sea — NS_species_params","text":"","code":"NS_species_params"},{"path":"https://sizespectrum.org/mizer/dev/reference/NS_species_params.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example species parameter set based on the North Sea — NS_species_params","text":"data frame 12 rows 7 columns. row species. species Name species w_inf von Bertalanffy W_infinity parameter w_mat Size maturity beta Size preference ratio sigma Width size-preference R_max Maximum reproduction rate k_vb von Bertalanffy k parameter","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/NS_species_params.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example species parameter set based on the North Sea — NS_species_params","text":"Blanchard et al.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/NS_species_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example species parameter set based on the North Sea — NS_species_params","text":"","code":"if (FALSE) { params <- MizerParams(NS_species_params) sim = project(params) plot(sim) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/NS_species_params_gears.html","id":null,"dir":"Reference","previous_headings":"","what":"Example species parameter set based on the North Sea with different gears — NS_species_params_gears","title":"Example species parameter set based on the North Sea with different gears — NS_species_params_gears","text":"data set based species North Sea (Blanchard et al.). similar data set NS_species_params except one additional column specifying fishing gear operates species.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/NS_species_params_gears.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example species parameter set based on the North Sea with different gears — NS_species_params_gears","text":"","code":"NS_species_params_gears"},{"path":"https://sizespectrum.org/mizer/dev/reference/NS_species_params_gears.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example species parameter set based on the North Sea with different gears — NS_species_params_gears","text":"data frame 12 rows 8 columns. row species. species Name species w_inf von Bertalanffy W_infinity parameter w_mat Size maturity beta Size preference ratio sigma Width size-preference R_max Maximum reproduction rate k_vb von Bertalanffy k parameter gear Name fishing gear","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/NS_species_params_gears.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example species parameter set based on the North Sea with different gears — NS_species_params_gears","text":"Blanchard et al.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/NS_species_params_gears.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example species parameter set based on the North Sea with different gears — NS_species_params_gears","text":"","code":"if (FALSE) { params <- MizerParams(NS_species_params_gears) sim = project(params, effort = c(Industrial = 0, Pelagic = 1,                                   Beam = 0.5, Otter = 0.5)) plot(sim) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/RickerRDD.html","id":null,"dir":"Reference","previous_headings":"","what":"Ricker function to calculate density-dependent reproduction rate — RickerRDD","title":"Ricker function to calculate density-dependent reproduction rate — RickerRDD","text":"Takes density-independent rates \\(R_{di}\\) egg production returns reduced, density-dependent rates \\(R_{dd}\\) given $$R_{dd} = R_{di} \\exp(- b R_{di})$$","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/RickerRDD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ricker function to calculate density-dependent reproduction rate — RickerRDD","text":"","code":"RickerRDD(rdi, species_params, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/RickerRDD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ricker function to calculate density-dependent reproduction rate — RickerRDD","text":"rdi Vector density-independent reproduction rates \\(R_{di}\\) species. species_params species parameter dataframe. Must contain column ricker_b holding coefficient b. ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/RickerRDD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ricker function to calculate density-dependent reproduction rate — RickerRDD","text":"Vector density-dependent reproduction rates.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/SheperdRDD.html","id":null,"dir":"Reference","previous_headings":"","what":"Sheperd function to calculate density-dependent reproduction rate — SheperdRDD","title":"Sheperd function to calculate density-dependent reproduction rate — SheperdRDD","text":"Takes density-independent rates \\(R_{di}\\) egg production returns reduced, density-dependent rates \\(R_{dd}\\) given $$R_{dd} = \\frac{R_{di}}{1+(b\\ R_{di})^c}$$","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/SheperdRDD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sheperd function to calculate density-dependent reproduction rate — SheperdRDD","text":"","code":"SheperdRDD(rdi, species_params, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/SheperdRDD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sheperd function to calculate density-dependent reproduction rate — SheperdRDD","text":"rdi Vector density-independent reproduction rates \\(R_{di}\\) species. species_params species parameter dataframe. Must contain columns sheperd_b sheperd_c parameters b c. ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/SheperdRDD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sheperd function to calculate density-dependent reproduction rate — SheperdRDD","text":"Vector density-dependent reproduction rates.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/addSpecies.html","id":null,"dir":"Reference","previous_headings":"","what":"Add new species — addSpecies","title":"Add new species — addSpecies","text":"Takes MizerParams object adds additional species given parameters ecosystem. sets initial values new species steady-state solution given initial state existing ecosystem. close true steady state abundances new species sufficiently low. Hence abundances new species set 1/100th resource power law. reproductive efficiencies set keep low level.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/addSpecies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add new species — addSpecies","text":"","code":"addSpecies(   params,   species_params,   gear_params = data.frame(),   initial_effort,   interaction )"},{"path":"https://sizespectrum.org/mizer/dev/reference/addSpecies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add new species — addSpecies","text":"params mizer params object original system. species_params Data frame species parameters new species want add system. gear_params Data frame gear parameters new species. provided new species fished. initial_effort named vector effort new fishing gear introduced gear_params. New gear effort set via vector initial effort 0. include effort values existing gear. interaction Interaction matrix. square matrix giving either interaction coefficients species new species. latter case interaction old new species set 1. argument missing, interactions involving new species set 1.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/addSpecies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add new species — addSpecies","text":"object type MizerParams","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/addSpecies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add new species — addSpecies","text":"resulting MizerParams object use size grid possible, one new species needs larger range w (either new species egg size smaller existing species maximum size larger existing species) grid expanded arrays enlarged accordingly. rate arrays existing species set user values calculated default species parameters, preserved. rates new species calculated species parameters. adding new species, background species retuned system run steady state. done steady(). new species reproduction level 1/4, can changed setBevertonHolt()","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/addSpecies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add new species — addSpecies","text":"","code":"params <- newTraitParams() species_params <- data.frame(     species = \"Mullet\",     w_inf = 173,     w_mat = 15,     beta = 283,     sigma = 1.8,     k_vb = 0.6,     a = 0.0085,     b = 3.11 ) params <- addSpecies(params, species_params) #> No h provided for some species, so using f0 and k_vb to calculate it. plotSpectra(params)"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/animateSpectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Animation of the abundance spectra — animateSpectra","text":"","code":"animateSpectra(   sim,   species = NULL,   time_range,   wlim = c(NA, NA),   ylim = c(NA, NA),   power = 1,   total = FALSE,   resource = TRUE )"},{"path":"https://sizespectrum.org/mizer/dev/reference/animateSpectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Animation of the abundance spectra — animateSpectra","text":"sim MizerSim object species Name vector names species plotted. default species plotted. time_range time range animate . Either vector values vector min max time. Default entire time range simulation. wlim numeric vector length two providing lower upper limits w axis. Use NA refer existing minimum maximum. ylim numeric vector length two providing lower upper limits y axis. Use NA refer existing minimum maximum. values 1e-20 always cut . power abundance plotted number density times weight raised power. default power = 1 gives biomass density, whereas power = 2 gives biomass density respect logarithmic size bins. total boolean value determines whether total species system plotted well. Default FALSE. resource boolean value determines whether resource included. Default TRUE.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/animateSpectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Animation of the abundance spectra — animateSpectra","text":"plotly object","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/animateSpectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Animation of the abundance spectra — animateSpectra","text":"","code":"# \\donttest{ animateSpectra(NS_sim, power = 2, wlim = c(0.1, NA), time_range = 1997:2007)  {\"x\":{\"visdat\":{\"594853a0e39ad\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"594853a0e39ad\",\"attrs\":{\"594853a0e39ad\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"x\":{},\"y\":{},\"type\":\"scatter\",\"mode\":\"lines\",\"color\":{},\"colors\":[\"#815f00\",\"#6237e2\",\"#8da600\",\"#de53ff\",\"#0e4300\",\"#430079\",\"#6caa72\",\"#ee0053\",\"#007957\",\"#b42979\",\"#142300\",\"#a08dfb\",\"black\",\"green\",\"grey\",\"red\"],\"frame\":{},\"line\":{\"simplify\":false},\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"log\",\"exponentformat\":\"power\",\"title\":\"Size [g]\",\"range\":[-1.20071121566915,4.79633968978684]},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"log\",\"exponentformat\":\"power\",\"title\":\"Biomass density [g]\",\"range\":[6.93396617879701,12.0853411934923]},\"hovermode\":\"closest\",\"showlegend\":true,\"sliders\":[{\"currentvalue\":{\"prefix\":\"time: \",\"xanchor\":\"right\",\"font\":{\"size\":16,\"color\":\"rgba(204,204,204,1)\"}},\"steps\":[{\"method\":\"animate\",\"args\":[[\"1997\"],{\"transition\":{\"duration\":500,\"easing\":\"linear\"},\"frame\":{\"duration\":500,\"redraw\":false},\"mode\":\"immediate\"}],\"label\":\"1997\",\"value\":\"1997\"},{\"method\":\"animate\",\"args\":[[\"1998\"],{\"transition\":{\"duration\":500,\"easing\":\"linear\"},\"frame\":{\"duration\":500,\"redraw\":false},\"mode\":\"immediate\"}],\"label\":\"1998\",\"value\":\"1998\"},{\"method\":\"animate\",\"args\":[[\"1999\"],{\"transition\":{\"duration\":500,\"easing\":\"linear\"},\"frame\":{\"duration\":500,\"redraw\":false},\"mode\":\"immediate\"}],\"label\":\"1999\",\"value\":\"1999\"},{\"method\":\"animate\",\"args\":[[\"2000\"],{\"transition\":{\"duration\":500,\"easing\":\"linear\"},\"frame\":{\"duration\":500,\"redraw\":false},\"mode\":\"immediate\"}],\"label\":\"2000\",\"value\":\"2000\"},{\"method\":\"animate\",\"args\":[[\"2001\"],{\"transition\":{\"duration\":500,\"easing\":\"linear\"},\"frame\":{\"duration\":500,\"redraw\":false},\"mode\":\"immediate\"}],\"label\":\"2001\",\"value\":\"2001\"},{\"method\":\"animate\",\"args\":[[\"2002\"],{\"transition\":{\"duration\":500,\"easing\":\"linear\"},\"frame\":{\"duration\":500,\"redraw\":false},\"mode\":\"immediate\"}],\"label\":\"2002\",\"value\":\"2002\"},{\"method\":\"animate\",\"args\":[[\"2003\"],{\"transition\":{\"duration\":500,\"easing\":\"linear\"},\"frame\":{\"duration\":500,\"redraw\":false},\"mode\":\"immediate\"}],\"label\":\"2003\",\"value\":\"2003\"},{\"method\":\"animate\",\"args\":[[\"2004\"],{\"transition\":{\"duration\":500,\"easing\":\"linear\"},\"frame\":{\"duration\":500,\"redraw\":false},\"mode\":\"immediate\"}],\"label\":\"2004\",\"value\":\"2004\"},{\"method\":\"animate\",\"args\":[[\"2005\"],{\"transition\":{\"duration\":500,\"easing\":\"linear\"},\"frame\":{\"duration\":500,\"redraw\":false},\"mode\":\"immediate\"}],\"label\":\"2005\",\"value\":\"2005\"},{\"method\":\"animate\",\"args\":[[\"2006\"],{\"transition\":{\"duration\":500,\"easing\":\"linear\"},\"frame\":{\"duration\":500,\"redraw\":false},\"mode\":\"immediate\"}],\"label\":\"2006\",\"value\":\"2006\"},{\"method\":\"animate\",\"args\":[[\"2007\"],{\"transition\":{\"duration\":500,\"easing\":\"linear\"},\"frame\":{\"duration\":500,\"redraw\":false},\"mode\":\"immediate\"}],\"label\":\"2007\",\"value\":\"2007\"}],\"visible\":true,\"pad\":{\"t\":40}}],\"updatemenus\":[{\"type\":\"buttons\",\"direction\":\"right\",\"showactive\":false,\"y\":0,\"x\":0,\"yanchor\":\"top\",\"xanchor\":\"right\",\"pad\":{\"t\":60,\"r\":5},\"buttons\":[{\"label\":\"Play\",\"method\":\"animate\",\"args\":[null,{\"fromcurrent\":true,\"mode\":\"immediate\",\"transition\":{\"duration\":500,\"easing\":\"linear\"},\"frame\":{\"duration\":500,\"redraw\":false}}]}]}]},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780,5700,6800,8120,9690,11600,13800,16500,19600,23400,28000,33400],\"y\":[14814679.5789051,18024452.1917313,21745415.430917,26377987.424994,31775883.7212761,38011523.8859671,45644967.3260474,54381014.6575503,64388619.9088477,76284697.3744084,90314895.3455133,106349135.723411,124904672.416999,146829780.427026,169592725.282949,199982308.956799,231692182.67194,270098448.169875,313202536.182454,363216520.286389,421800061.679828,488036807.32225,566553162.602659,657126063.187963,760762232.706472,881164845.321902,1017171811.50554,1183557078.13088,1367222525.58232,1573999373.28905,1822352260.75782,2096294257.07096,2393268768.42134,2748787362.51346,3136819961.3015,3568577914.40252,4060776836.15281,4588447118.01761,5190188868.85104,5881092848.63608,6562399874.21057,7392463396.05207,8303574666.35271,9393444651.82081,10506099760.1755,11863143653.7432,13362687412.3451,15101334562.1969,17082964598.4589,19295296621.8079,21928029906.4485,24879844181.3804,28444184232.9894,34080424586.5287,43832892819.6222,56552814837.7637,66356064261.9376,73417558910.3453,80078386776.1435,86600577250.1001,92616671688.6788,97120911361.1616,100026915759.004,100857714347.987,98708542234.9509,93805303287.8721,84112760726.7609,71759755806.737,55728976358.2675,39017609690.5881,23187058560.2548,10419863626.9948],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1997\",\"line\":{\"color\":\"rgba(20,35,0,1)\",\"simplify\":false},\"name\":\"Cod\",\"marker\":{\"color\":\"rgba(20,35,0,1)\",\"line\":{\"color\":\"rgba(20,35,0,1)\"}},\"textfont\":{\"color\":\"rgba(20,35,0,1)\"},\"error_y\":{\"color\":\"rgba(20,35,0,1)\"},\"error_x\":{\"color\":\"rgba(20,35,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337],\"y\":[23442483.8075745,27720933.013672,32493207.1063618,38282889.5684648,44779034.7227172,51999778.7969759,60604514.9762247,70068988.8129975,80504558.9687402,92549736.3169187,106327453.926428,121511984.148215,138529795.658236,158113175.925665,177374422.247605,203225040.594622,228878163.909418,259516092.544247,292886320.014658,330825594.420266,374523690.215862,422863075.015128,479580074.75447,544151747.977741,617220925.977115,701722799.622263,797136590.754917,918248547.42205,1075145923.42961,1367258621.57004,1909953967.26891,2415299449.99451,2782425452.77318,3151996704.35759,3534246685.22971,3948756288.89588,4410220790.39688,4882698707.11823,5393437928.02916,5935146502.93447,6379202426.28281,6844512544.66127,7216404286.68404,7524126156.61818,7567602008.08152,5821967779.29548],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1997\",\"line\":{\"color\":\"rgba(14,67,0,1)\",\"simplify\":false},\"name\":\"Dab\",\"marker\":{\"color\":\"rgba(14,67,0,1)\",\"line\":{\"color\":\"rgba(14,67,0,1)\"}},\"textfont\":{\"color\":\"rgba(14,67,0,1)\"},\"error_y\":{\"color\":\"rgba(14,67,0,1)\"},\"error_x\":{\"color\":\"rgba(14,67,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683],\"y\":[3205397736.01575,3609919937.26383,4019003866.22769,4485564745.04121,4957450263.15437,5426048015.46726,5946532646.33337,6450574032.14371,6939204446.58289,7455148696.62287,7990440278.40844,8505912338.80743,9020585523.79531,9566252105.60263,9961256735.0834,10584831423.098,11048038662.9114,11602518741.2257,12121418416.8529,12667379771.6632,13260384449.8905,13835467773.3213,14489521956.462,15167669705.4585,15854578665.2761,16586780415.2751,17299624665.8626,18191966044.0781,18994965609.0351,19769484821.3692,20717638549.792,21733506580.7152,23495984138.1004,27864078339.0252,31685460956.2525,31450411745.5345,29312678958.6136,26433261756.9365,23461206627.7707,20565557130.6531,17537496317.2965,14948502489.8907,12610947328.3452,10663670912.878,8893300095.7331,7470790686.34024,6211180846.13058,5072105542.28043,3963533589.49547,2370529507.3503],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1997\",\"line\":{\"color\":\"rgba(238,0,83,1)\",\"simplify\":false},\"name\":\"Gurnard\",\"marker\":{\"color\":\"rgba(238,0,83,1)\",\"line\":{\"color\":\"rgba(238,0,83,1)\"}},\"textfont\":{\"color\":\"rgba(238,0,83,1)\"},\"error_y\":{\"color\":\"rgba(238,0,83,1)\"},\"error_x\":{\"color\":\"rgba(238,0,83,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780],\"y\":[3111291437.64933,3611062900.10924,4147681565.6893,4781155943.3093,5463734371.82892,6190456881.01539,7030837412.44595,7913047777.15411,8842081376.5783,9878576596.67094,11022745932.2092,12229259544.2802,13531384593.7956,14987610435.8681,16316513056.3896,18144386227.6973,19837728698.1144,21841824283.9466,23942832000.5199,26273496529.7012,28898706277.2499,31698171836.324,34911352198.1423,38438553612.6024,42256003644.2006,46472355539.4181,50912595586.6771,56171655992.5509,61437314836.7188,66837048670.503,72954511751.6242,78905576384.6738,84427302989.9291,90543005958.6458,96083411289.8474,101204108533.144,106150018401.555,110083959343.597,113895364346.662,118166358350.989,123478742439.696,139514536158.974,156048796477.858,157409293259.394,148538736343.773,139036341402.928,128750703078.825,118841054049.894,109059439765.071,99111345576.0356,89620923901.5856,79578921762.0427,69151247944.7289,58842440315.8054,46979512410.6503,35589771558.4853,24756148772.3823,14842874444.4463,7193015658.17088,2371499905.81633,244863944.046826],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1997\",\"line\":{\"color\":\"rgba(180,41,121,1)\",\"simplify\":false},\"name\":\"Haddock\",\"marker\":{\"color\":\"rgba(180,41,121,1)\",\"line\":{\"color\":\"rgba(180,41,121,1)\"}},\"textfont\":{\"color\":\"rgba(180,41,121,1)\"},\"error_y\":{\"color\":\"rgba(180,41,121,1)\"},\"error_x\":{\"color\":\"rgba(180,41,121,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337],\"y\":[2280579362.84947,2648138608.41729,3045770908.78202,3518829685.26663,4033806139.09214,4588711415.06073,5237118494.96283,5928015555.02893,6667253666.3336,7503080782.28626,8438939173.62487,9443220228.62904,10544284556.7547,11791098096.9832,12964113474.3519,14562936212.1851,16085547759.0662,17892197395.5698,19811778318.9675,21955005587.8471,24378977153.7783,26984678857.5319,29978112285.6042,33278248239.5331,36867707147.3764,40845950324.5797,45065705981.8756,50058423609.8003,55117889948.1317,60364043520.1489,66332154468.8649,72227013205.7155,77805500204.2631,84004937160.1975,89744740535.8809,95253846364.9163,101431323900.03,111525887584.532,141903938052.065,191616459067.536,186315653792.945,137339691514.288,84830718085.5326,44594389991.7822,18207290740.6107,4558992755.9232],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1997\",\"line\":{\"color\":\"rgba(222,83,255,1)\",\"simplify\":false},\"name\":\"Herring\",\"marker\":{\"color\":\"rgba(222,83,255,1)\",\"line\":{\"color\":\"rgba(222,83,255,1)\"}},\"textfont\":{\"color\":\"rgba(222,83,255,1)\"},\"error_y\":{\"color\":\"rgba(222,83,255,1)\"},\"error_x\":{\"color\":\"rgba(222,83,255,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117],\"y\":[15007092770.3052,16714699125.1559,18363839400.4382,20180735984.4156,21911614175.7563,23508742404.1944,25200598757.8009,26686094675.3703,27975134272.0314,29245611796.8607,30467992613.484,31504908748.696,32449123801.9665,33432914082.3707,33852936021.874,35029091025.9827,35671041357.3925,36632925982.1341,37523376569.3719,38555542909.3043,39796206542.1,41050281251.7914,42599200812.8796,44268268546.6189,45994316623.1079,47855550880.722,49639682401.2729,52019779220.9151,54668555029.179,60719714746.9015,79229080832.1945,99661086836.2252,94008475493.1316,74429481052.3748,52474829127.0638,32888640092.688,17605102684.699,7293889344.06667,1877783826.1921,55605421.4749589],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1997\",\"line\":{\"color\":\"rgba(141,166,0,1)\",\"simplify\":false},\"name\":\"N.pout\",\"marker\":{\"color\":\"rgba(141,166,0,1)\",\"line\":{\"color\":\"rgba(141,166,0,1)\"}},\"textfont\":{\"color\":\"rgba(141,166,0,1)\"},\"error_y\":{\"color\":\"rgba(141,166,0,1)\"},\"error_x\":{\"color\":\"rgba(141,166,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350],\"y\":[85073379690.7695,91684962537.6766,97662104611.5168,104261010865.246,110185952272.557,115282505759.149,120724996139.082,125092879698.466,128502791069.023,131805440913.812,134860121234.898,137058670362.005,138811173966.467,140662826983.491,140078650695.474,142520425986.461,142653383482.574,143940098226.153,144813267798.048,146124497508.075,148145274798.202,150204771225.462,153426695534.302,157268967340.849,161650816847.606,167025938693.795,172825816506.944,181121906512.95,189320143668.269,198076110301.054,209242036252.112,220363394242.62,230956781066.982,243976707693.985,256316861206.084,268501869490.227,281616089785.702,296403754891.372,327840413021.111,381386929112.804,399103278428.922,385719974479.691,358513314801.202,328930547218.382,293212099083.22,259209767301.412,224264078698.004,190652203887.736,158524021519.267,128180423246.913,101037132752.018,76317388984.6469,54658733225.3376,36709438251.4398,21765110053.2913,11214208462.5846,4620627127.79793,1248632971.18106,87334336.0964992],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1997\",\"line\":{\"color\":\"rgba(0,121,87,1)\",\"simplify\":false},\"name\":\"Plaice\",\"marker\":{\"color\":\"rgba(0,121,87,1)\",\"line\":{\"color\":\"rgba(0,121,87,1)\"}},\"textfont\":{\"color\":\"rgba(0,121,87,1)\"},\"error_y\":{\"color\":\"rgba(0,121,87,1)\"},\"error_x\":{\"color\":\"rgba(0,121,87,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82],\"y\":[46324543953.5398,44847148245.1303,43179346646.6356,41936728474.599,40591568082.7842,39166270061.5788,38093506482.4528,36922307236.728,35732375925.845,34770773595.3007,33980721851.6639,33197387790.9637,32511634999.6929,32026707961.2049,31146183198.587,31061464566.8551,30558924718.9333,30359804074.324,30092543635.5202,29900707822.2803,29800322112.7171,29617803100.9958,29537537721.4808,29411566418.4827,29189558844.6051,28921919041.9741],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1997\",\"line\":{\"color\":\"rgba(0,255,0,1)\",\"simplify\":false},\"name\":\"Resource\",\"marker\":{\"color\":\"rgba(0,255,0,1)\",\"line\":{\"color\":\"rgba(0,255,0,1)\"}},\"textfont\":{\"color\":\"rgba(0,255,0,1)\"},\"error_y\":{\"color\":\"rgba(0,255,0,1)\"},\"error_x\":{\"color\":\"rgba(0,255,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780,5700,6800,8120,9690,11600,13800,16500,19600,23400,28000,33400],\"y\":[312466144.820708,384946467.631513,470065427.939222,576865804.451598,702636296.762032,849326578.652303,1029859090.08694,1238032680.8849,1477905865.89597,1763851676.18211,2101783727.38936,2488667757.28777,2936283999.68542,3464017038.55739,4010984431.58143,4735936897.96561,5487017719.02484,6387441010.77908,7383886814.89673,8519872223.97356,9821533331.13075,11249582866.0345,12885753849.0191,14689242489.6841,16636386314.543,18747935897.8748,20923393122.1087,23371279052.6224,25711965418.9998,27948286552.652,30274576615.2188,32279317449.1601,33839455846.7271,35368307011.0975,36423963996.687,37125280726.644,37628125387.4823,37710354552.2922,37743050308.6819,37827828129.6603,37399295470.7411,37470194229.3983,37651106542.593,38396252849.905,39076728193.5297,40583407549.5846,42541154020.7206,45294061293.4941,48882455773.6533,53387490165.1768,59876952833.3572,70686152338.6944,90568629412.1438,113024594106.774,129413962137.249,146792250039.268,166496715257.54,185137963920.883,203875173261.105,221201424391.216,234655836884.97,240428369423.167,237620483632.658,225293552979.487,202862759213.152,173441539987.276,136863916934.198,100643975591.85,66093601778.7878,38404843347.7306,18528672627.0575,6552006288.73052],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1997\",\"line\":{\"color\":\"rgba(160,141,251,1)\",\"simplify\":false},\"name\":\"Saithe\",\"marker\":{\"color\":\"rgba(160,141,251,1)\",\"line\":{\"color\":\"rgba(160,141,251,1)\"}},\"textfont\":{\"color\":\"rgba(160,141,251,1)\"},\"error_y\":{\"color\":\"rgba(160,141,251,1)\"},\"error_x\":{\"color\":\"rgba(160,141,251,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4],\"y\":[2398055761.79215,2969381362.59863,3651606041.40703,4522659201.49553,5572563186.94284,6831046785.32346,8422118543.05057,10322751997.9948,12599326825.0235,15417892121.3008,18889600677.6537,23059026668.0056,28119562019.8785,34365594802.0051,41304324476.4028,50707246768.9199,61169884449.0841,74306460223.567,90480523865.3401,115391329703.914,169364625806.536,257276888780.238,335957135027.321,401310867387.559,464010692462.502,527652608403.258,588378798494.204,648746299223.319,692422257384.636,709884647233.939,689395958231.171,595236334330.133,396549986414.474,74597767240.0148],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1997\",\"line\":{\"color\":\"rgba(98,55,226,1)\",\"simplify\":false},\"name\":\"Sandeel\",\"marker\":{\"color\":\"rgba(98,55,226,1)\",\"line\":{\"color\":\"rgba(98,55,226,1)\"}},\"textfont\":{\"color\":\"rgba(98,55,226,1)\"},\"error_y\":{\"color\":\"rgba(98,55,226,1)\"},\"error_x\":{\"color\":\"rgba(98,55,226,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973],\"y\":[127068930.615893,151796848.391032,179846390.654178,214292362.490083,253634996.36533,298198699.602216,352054418.73048,412524954.631165,480579705.583152,560423994.748696,653321197.21334,757778688.490497,876922033.50676,1015956284.96832,1156687529.88843,1344549305.37092,1535524049.58353,1764273006.42526,2015871194.55004,2302793717.20795,2633166448.62785,2998626373.29503,3424720871.95105,3906421444.07949,4446173130.08435,5061824626.13072,5742712082.97916,6567593710.70032,7457981537.81528,8442236890.77531,9612989416.59017,10877233527.6123,12215877959.7994,13802632745.7416,15513398024.2087,17553817060.0623,20937506615.9801,27874138654.6744,35649265534.3537,39088662334.9524,39085454123.1491,37971076088.3843,35593727100.6907,32421142874.7009,28017607028.2102,23279653965.2346,18163283304.8672,13113915780.3097,8410076148.69674,4419796588.19466,1596358113.05832,151950380.823674],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1997\",\"line\":{\"color\":\"rgba(108,170,114,1)\",\"simplify\":false},\"name\":\"Sole\",\"marker\":{\"color\":\"rgba(108,170,114,1)\",\"line\":{\"color\":\"rgba(108,170,114,1)\"}},\"textfont\":{\"color\":\"rgba(108,170,114,1)\"},\"error_y\":{\"color\":\"rgba(108,170,114,1)\"},\"error_x\":{\"color\":\"rgba(108,170,114,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8],\"y\":[1300401439.52859,1471987794.20995,1649925438.47529,1856993162.02399,2072897814.05206,2294934389.6422,2547476482.25449,2802455843.42061,3060622677.69509,3341203298.54487,3641345519.80722,3943273149.04912,4255090306.16924,4591240112.75062,4862479076.30925,5251084812.56023,5562320518.53386,5912258004.00331,6217406065.62018,6471854518.03689,6642533937.54391,6688724673.67874,6684668416.95145,6629924735.55249,6547040549.22468,6557254055.16359,7118518630.06377,9102816891.16516,9440800285.82888,5937157282.52903,2515339309.91339,701211764.777623,93222819.7602706],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1997\",\"line\":{\"color\":\"rgba(129,95,0,1)\",\"simplify\":false},\"name\":\"Sprat\",\"marker\":{\"color\":\"rgba(129,95,0,1)\",\"line\":{\"color\":\"rgba(129,95,0,1)\"}},\"textfont\":{\"color\":\"rgba(129,95,0,1)\"},\"error_y\":{\"color\":\"rgba(129,95,0,1)\"},\"error_x\":{\"color\":\"rgba(129,95,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390],\"y\":[1109345805.71884,1276578837.84135,1452519759.34478,1657071498.00253,1872215111.90737,2095086649.92354,2347773932.64557,2604562813.955,2866080184.14661,3150754748.73089,3456965589.15344,3769245389.85938,4097155297.04676,4457312938.46524,4766093691.15754,5206482228.80113,5593827171.75004,6055378839.44485,6530594833.97157,7056293245.61497,7649592742.86034,8278645106.26843,9006840421.96729,9810603126.60234,10688910916.7772,11676478710.5554,12739560514.731,14053542328.8431,15423873106.3504,16906392009.3651,18678248544.7745,20548512191.5392,22487319252.2683,24826477766.6431,27365704702.573,30559601154.3982,36407762563.9918,47349352949.1645,57129648165.0603,61842380614.6074,63245238673.072,64143556745.6826,63876281210.8033,62880313429.8201,59761070422.9456,55630045515.422,49716574666.0368,42467306636.5714,34106643458.2441,25135311776.2689,16477452648.88,8795131794.06717,3103881753.47099,143827564.053035],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1997\",\"line\":{\"color\":\"rgba(67,0,121,1)\",\"simplify\":false},\"name\":\"Whiting\",\"marker\":{\"color\":\"rgba(67,0,121,1)\",\"line\":{\"color\":\"rgba(67,0,121,1)\"}},\"textfont\":{\"color\":\"rgba(67,0,121,1)\"},\"error_y\":{\"color\":\"rgba(67,0,121,1)\"},\"error_x\":{\"color\":\"rgba(67,0,121,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"frames\":[{\"name\":\"1997\",\"data\":[{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780,5700,6800,8120,9690,11600,13800,16500,19600,23400,28000,33400],\"y\":[14814679.5789051,18024452.1917313,21745415.430917,26377987.424994,31775883.7212761,38011523.8859671,45644967.3260474,54381014.6575503,64388619.9088477,76284697.3744084,90314895.3455133,106349135.723411,124904672.416999,146829780.427026,169592725.282949,199982308.956799,231692182.67194,270098448.169875,313202536.182454,363216520.286389,421800061.679828,488036807.32225,566553162.602659,657126063.187963,760762232.706472,881164845.321902,1017171811.50554,1183557078.13088,1367222525.58232,1573999373.28905,1822352260.75782,2096294257.07096,2393268768.42134,2748787362.51346,3136819961.3015,3568577914.40252,4060776836.15281,4588447118.01761,5190188868.85104,5881092848.63608,6562399874.21057,7392463396.05207,8303574666.35271,9393444651.82081,10506099760.1755,11863143653.7432,13362687412.3451,15101334562.1969,17082964598.4589,19295296621.8079,21928029906.4485,24879844181.3804,28444184232.9894,34080424586.5287,43832892819.6222,56552814837.7637,66356064261.9376,73417558910.3453,80078386776.1435,86600577250.1001,92616671688.6788,97120911361.1616,100026915759.004,100857714347.987,98708542234.9509,93805303287.8721,84112760726.7609,71759755806.737,55728976358.2675,39017609690.5881,23187058560.2548,10419863626.9948],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1997\",\"line\":{\"color\":\"rgba(20,35,0,1)\",\"simplify\":false},\"name\":\"Cod\",\"marker\":{\"color\":\"rgba(20,35,0,1)\",\"line\":{\"color\":\"rgba(20,35,0,1)\"}},\"textfont\":{\"color\":\"rgba(20,35,0,1)\"},\"error_y\":{\"color\":\"rgba(20,35,0,1)\"},\"error_x\":{\"color\":\"rgba(20,35,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337],\"y\":[23442483.8075745,27720933.013672,32493207.1063618,38282889.5684648,44779034.7227172,51999778.7969759,60604514.9762247,70068988.8129975,80504558.9687402,92549736.3169187,106327453.926428,121511984.148215,138529795.658236,158113175.925665,177374422.247605,203225040.594622,228878163.909418,259516092.544247,292886320.014658,330825594.420266,374523690.215862,422863075.015128,479580074.75447,544151747.977741,617220925.977115,701722799.622263,797136590.754917,918248547.42205,1075145923.42961,1367258621.57004,1909953967.26891,2415299449.99451,2782425452.77318,3151996704.35759,3534246685.22971,3948756288.89588,4410220790.39688,4882698707.11823,5393437928.02916,5935146502.93447,6379202426.28281,6844512544.66127,7216404286.68404,7524126156.61818,7567602008.08152,5821967779.29548],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1997\",\"line\":{\"color\":\"rgba(14,67,0,1)\",\"simplify\":false},\"name\":\"Dab\",\"marker\":{\"color\":\"rgba(14,67,0,1)\",\"line\":{\"color\":\"rgba(14,67,0,1)\"}},\"textfont\":{\"color\":\"rgba(14,67,0,1)\"},\"error_y\":{\"color\":\"rgba(14,67,0,1)\"},\"error_x\":{\"color\":\"rgba(14,67,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683],\"y\":[3205397736.01575,3609919937.26383,4019003866.22769,4485564745.04121,4957450263.15437,5426048015.46726,5946532646.33337,6450574032.14371,6939204446.58289,7455148696.62287,7990440278.40844,8505912338.80743,9020585523.79531,9566252105.60263,9961256735.0834,10584831423.098,11048038662.9114,11602518741.2257,12121418416.8529,12667379771.6632,13260384449.8905,13835467773.3213,14489521956.462,15167669705.4585,15854578665.2761,16586780415.2751,17299624665.8626,18191966044.0781,18994965609.0351,19769484821.3692,20717638549.792,21733506580.7152,23495984138.1004,27864078339.0252,31685460956.2525,31450411745.5345,29312678958.6136,26433261756.9365,23461206627.7707,20565557130.6531,17537496317.2965,14948502489.8907,12610947328.3452,10663670912.878,8893300095.7331,7470790686.34024,6211180846.13058,5072105542.28043,3963533589.49547,2370529507.3503],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1997\",\"line\":{\"color\":\"rgba(238,0,83,1)\",\"simplify\":false},\"name\":\"Gurnard\",\"marker\":{\"color\":\"rgba(238,0,83,1)\",\"line\":{\"color\":\"rgba(238,0,83,1)\"}},\"textfont\":{\"color\":\"rgba(238,0,83,1)\"},\"error_y\":{\"color\":\"rgba(238,0,83,1)\"},\"error_x\":{\"color\":\"rgba(238,0,83,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780],\"y\":[3111291437.64933,3611062900.10924,4147681565.6893,4781155943.3093,5463734371.82892,6190456881.01539,7030837412.44595,7913047777.15411,8842081376.5783,9878576596.67094,11022745932.2092,12229259544.2802,13531384593.7956,14987610435.8681,16316513056.3896,18144386227.6973,19837728698.1144,21841824283.9466,23942832000.5199,26273496529.7012,28898706277.2499,31698171836.324,34911352198.1423,38438553612.6024,42256003644.2006,46472355539.4181,50912595586.6771,56171655992.5509,61437314836.7188,66837048670.503,72954511751.6242,78905576384.6738,84427302989.9291,90543005958.6458,96083411289.8474,101204108533.144,106150018401.555,110083959343.597,113895364346.662,118166358350.989,123478742439.696,139514536158.974,156048796477.858,157409293259.394,148538736343.773,139036341402.928,128750703078.825,118841054049.894,109059439765.071,99111345576.0356,89620923901.5856,79578921762.0427,69151247944.7289,58842440315.8054,46979512410.6503,35589771558.4853,24756148772.3823,14842874444.4463,7193015658.17088,2371499905.81633,244863944.046826],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1997\",\"line\":{\"color\":\"rgba(180,41,121,1)\",\"simplify\":false},\"name\":\"Haddock\",\"marker\":{\"color\":\"rgba(180,41,121,1)\",\"line\":{\"color\":\"rgba(180,41,121,1)\"}},\"textfont\":{\"color\":\"rgba(180,41,121,1)\"},\"error_y\":{\"color\":\"rgba(180,41,121,1)\"},\"error_x\":{\"color\":\"rgba(180,41,121,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337],\"y\":[2280579362.84947,2648138608.41729,3045770908.78202,3518829685.26663,4033806139.09214,4588711415.06073,5237118494.96283,5928015555.02893,6667253666.3336,7503080782.28626,8438939173.62487,9443220228.62904,10544284556.7547,11791098096.9832,12964113474.3519,14562936212.1851,16085547759.0662,17892197395.5698,19811778318.9675,21955005587.8471,24378977153.7783,26984678857.5319,29978112285.6042,33278248239.5331,36867707147.3764,40845950324.5797,45065705981.8756,50058423609.8003,55117889948.1317,60364043520.1489,66332154468.8649,72227013205.7155,77805500204.2631,84004937160.1975,89744740535.8809,95253846364.9163,101431323900.03,111525887584.532,141903938052.065,191616459067.536,186315653792.945,137339691514.288,84830718085.5326,44594389991.7822,18207290740.6107,4558992755.9232],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1997\",\"line\":{\"color\":\"rgba(222,83,255,1)\",\"simplify\":false},\"name\":\"Herring\",\"marker\":{\"color\":\"rgba(222,83,255,1)\",\"line\":{\"color\":\"rgba(222,83,255,1)\"}},\"textfont\":{\"color\":\"rgba(222,83,255,1)\"},\"error_y\":{\"color\":\"rgba(222,83,255,1)\"},\"error_x\":{\"color\":\"rgba(222,83,255,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117],\"y\":[15007092770.3052,16714699125.1559,18363839400.4382,20180735984.4156,21911614175.7563,23508742404.1944,25200598757.8009,26686094675.3703,27975134272.0314,29245611796.8607,30467992613.484,31504908748.696,32449123801.9665,33432914082.3707,33852936021.874,35029091025.9827,35671041357.3925,36632925982.1341,37523376569.3719,38555542909.3043,39796206542.1,41050281251.7914,42599200812.8796,44268268546.6189,45994316623.1079,47855550880.722,49639682401.2729,52019779220.9151,54668555029.179,60719714746.9015,79229080832.1945,99661086836.2252,94008475493.1316,74429481052.3748,52474829127.0638,32888640092.688,17605102684.699,7293889344.06667,1877783826.1921,55605421.4749589],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1997\",\"line\":{\"color\":\"rgba(141,166,0,1)\",\"simplify\":false},\"name\":\"N.pout\",\"marker\":{\"color\":\"rgba(141,166,0,1)\",\"line\":{\"color\":\"rgba(141,166,0,1)\"}},\"textfont\":{\"color\":\"rgba(141,166,0,1)\"},\"error_y\":{\"color\":\"rgba(141,166,0,1)\"},\"error_x\":{\"color\":\"rgba(141,166,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350],\"y\":[85073379690.7695,91684962537.6766,97662104611.5168,104261010865.246,110185952272.557,115282505759.149,120724996139.082,125092879698.466,128502791069.023,131805440913.812,134860121234.898,137058670362.005,138811173966.467,140662826983.491,140078650695.474,142520425986.461,142653383482.574,143940098226.153,144813267798.048,146124497508.075,148145274798.202,150204771225.462,153426695534.302,157268967340.849,161650816847.606,167025938693.795,172825816506.944,181121906512.95,189320143668.269,198076110301.054,209242036252.112,220363394242.62,230956781066.982,243976707693.985,256316861206.084,268501869490.227,281616089785.702,296403754891.372,327840413021.111,381386929112.804,399103278428.922,385719974479.691,358513314801.202,328930547218.382,293212099083.22,259209767301.412,224264078698.004,190652203887.736,158524021519.267,128180423246.913,101037132752.018,76317388984.6469,54658733225.3376,36709438251.4398,21765110053.2913,11214208462.5846,4620627127.79793,1248632971.18106,87334336.0964992],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1997\",\"line\":{\"color\":\"rgba(0,121,87,1)\",\"simplify\":false},\"name\":\"Plaice\",\"marker\":{\"color\":\"rgba(0,121,87,1)\",\"line\":{\"color\":\"rgba(0,121,87,1)\"}},\"textfont\":{\"color\":\"rgba(0,121,87,1)\"},\"error_y\":{\"color\":\"rgba(0,121,87,1)\"},\"error_x\":{\"color\":\"rgba(0,121,87,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82],\"y\":[46324543953.5398,44847148245.1303,43179346646.6356,41936728474.599,40591568082.7842,39166270061.5788,38093506482.4528,36922307236.728,35732375925.845,34770773595.3007,33980721851.6639,33197387790.9637,32511634999.6929,32026707961.2049,31146183198.587,31061464566.8551,30558924718.9333,30359804074.324,30092543635.5202,29900707822.2803,29800322112.7171,29617803100.9958,29537537721.4808,29411566418.4827,29189558844.6051,28921919041.9741],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1997\",\"line\":{\"color\":\"rgba(0,255,0,1)\",\"simplify\":false},\"name\":\"Resource\",\"marker\":{\"color\":\"rgba(0,255,0,1)\",\"line\":{\"color\":\"rgba(0,255,0,1)\"}},\"textfont\":{\"color\":\"rgba(0,255,0,1)\"},\"error_y\":{\"color\":\"rgba(0,255,0,1)\"},\"error_x\":{\"color\":\"rgba(0,255,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780,5700,6800,8120,9690,11600,13800,16500,19600,23400,28000,33400],\"y\":[312466144.820708,384946467.631513,470065427.939222,576865804.451598,702636296.762032,849326578.652303,1029859090.08694,1238032680.8849,1477905865.89597,1763851676.18211,2101783727.38936,2488667757.28777,2936283999.68542,3464017038.55739,4010984431.58143,4735936897.96561,5487017719.02484,6387441010.77908,7383886814.89673,8519872223.97356,9821533331.13075,11249582866.0345,12885753849.0191,14689242489.6841,16636386314.543,18747935897.8748,20923393122.1087,23371279052.6224,25711965418.9998,27948286552.652,30274576615.2188,32279317449.1601,33839455846.7271,35368307011.0975,36423963996.687,37125280726.644,37628125387.4823,37710354552.2922,37743050308.6819,37827828129.6603,37399295470.7411,37470194229.3983,37651106542.593,38396252849.905,39076728193.5297,40583407549.5846,42541154020.7206,45294061293.4941,48882455773.6533,53387490165.1768,59876952833.3572,70686152338.6944,90568629412.1438,113024594106.774,129413962137.249,146792250039.268,166496715257.54,185137963920.883,203875173261.105,221201424391.216,234655836884.97,240428369423.167,237620483632.658,225293552979.487,202862759213.152,173441539987.276,136863916934.198,100643975591.85,66093601778.7878,38404843347.7306,18528672627.0575,6552006288.73052],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1997\",\"line\":{\"color\":\"rgba(160,141,251,1)\",\"simplify\":false},\"name\":\"Saithe\",\"marker\":{\"color\":\"rgba(160,141,251,1)\",\"line\":{\"color\":\"rgba(160,141,251,1)\"}},\"textfont\":{\"color\":\"rgba(160,141,251,1)\"},\"error_y\":{\"color\":\"rgba(160,141,251,1)\"},\"error_x\":{\"color\":\"rgba(160,141,251,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4],\"y\":[2398055761.79215,2969381362.59863,3651606041.40703,4522659201.49553,5572563186.94284,6831046785.32346,8422118543.05057,10322751997.9948,12599326825.0235,15417892121.3008,18889600677.6537,23059026668.0056,28119562019.8785,34365594802.0051,41304324476.4028,50707246768.9199,61169884449.0841,74306460223.567,90480523865.3401,115391329703.914,169364625806.536,257276888780.238,335957135027.321,401310867387.559,464010692462.502,527652608403.258,588378798494.204,648746299223.319,692422257384.636,709884647233.939,689395958231.171,595236334330.133,396549986414.474,74597767240.0148],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1997\",\"line\":{\"color\":\"rgba(98,55,226,1)\",\"simplify\":false},\"name\":\"Sandeel\",\"marker\":{\"color\":\"rgba(98,55,226,1)\",\"line\":{\"color\":\"rgba(98,55,226,1)\"}},\"textfont\":{\"color\":\"rgba(98,55,226,1)\"},\"error_y\":{\"color\":\"rgba(98,55,226,1)\"},\"error_x\":{\"color\":\"rgba(98,55,226,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973],\"y\":[127068930.615893,151796848.391032,179846390.654178,214292362.490083,253634996.36533,298198699.602216,352054418.73048,412524954.631165,480579705.583152,560423994.748696,653321197.21334,757778688.490497,876922033.50676,1015956284.96832,1156687529.88843,1344549305.37092,1535524049.58353,1764273006.42526,2015871194.55004,2302793717.20795,2633166448.62785,2998626373.29503,3424720871.95105,3906421444.07949,4446173130.08435,5061824626.13072,5742712082.97916,6567593710.70032,7457981537.81528,8442236890.77531,9612989416.59017,10877233527.6123,12215877959.7994,13802632745.7416,15513398024.2087,17553817060.0623,20937506615.9801,27874138654.6744,35649265534.3537,39088662334.9524,39085454123.1491,37971076088.3843,35593727100.6907,32421142874.7009,28017607028.2102,23279653965.2346,18163283304.8672,13113915780.3097,8410076148.69674,4419796588.19466,1596358113.05832,151950380.823674],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1997\",\"line\":{\"color\":\"rgba(108,170,114,1)\",\"simplify\":false},\"name\":\"Sole\",\"marker\":{\"color\":\"rgba(108,170,114,1)\",\"line\":{\"color\":\"rgba(108,170,114,1)\"}},\"textfont\":{\"color\":\"rgba(108,170,114,1)\"},\"error_y\":{\"color\":\"rgba(108,170,114,1)\"},\"error_x\":{\"color\":\"rgba(108,170,114,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8],\"y\":[1300401439.52859,1471987794.20995,1649925438.47529,1856993162.02399,2072897814.05206,2294934389.6422,2547476482.25449,2802455843.42061,3060622677.69509,3341203298.54487,3641345519.80722,3943273149.04912,4255090306.16924,4591240112.75062,4862479076.30925,5251084812.56023,5562320518.53386,5912258004.00331,6217406065.62018,6471854518.03689,6642533937.54391,6688724673.67874,6684668416.95145,6629924735.55249,6547040549.22468,6557254055.16359,7118518630.06377,9102816891.16516,9440800285.82888,5937157282.52903,2515339309.91339,701211764.777623,93222819.7602706],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1997\",\"line\":{\"color\":\"rgba(129,95,0,1)\",\"simplify\":false},\"name\":\"Sprat\",\"marker\":{\"color\":\"rgba(129,95,0,1)\",\"line\":{\"color\":\"rgba(129,95,0,1)\"}},\"textfont\":{\"color\":\"rgba(129,95,0,1)\"},\"error_y\":{\"color\":\"rgba(129,95,0,1)\"},\"error_x\":{\"color\":\"rgba(129,95,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390],\"y\":[1109345805.71884,1276578837.84135,1452519759.34478,1657071498.00253,1872215111.90737,2095086649.92354,2347773932.64557,2604562813.955,2866080184.14661,3150754748.73089,3456965589.15344,3769245389.85938,4097155297.04676,4457312938.46524,4766093691.15754,5206482228.80113,5593827171.75004,6055378839.44485,6530594833.97157,7056293245.61497,7649592742.86034,8278645106.26843,9006840421.96729,9810603126.60234,10688910916.7772,11676478710.5554,12739560514.731,14053542328.8431,15423873106.3504,16906392009.3651,18678248544.7745,20548512191.5392,22487319252.2683,24826477766.6431,27365704702.573,30559601154.3982,36407762563.9918,47349352949.1645,57129648165.0603,61842380614.6074,63245238673.072,64143556745.6826,63876281210.8033,62880313429.8201,59761070422.9456,55630045515.422,49716574666.0368,42467306636.5714,34106643458.2441,25135311776.2689,16477452648.88,8795131794.06717,3103881753.47099,143827564.053035],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1997\",\"line\":{\"color\":\"rgba(67,0,121,1)\",\"simplify\":false},\"name\":\"Whiting\",\"marker\":{\"color\":\"rgba(67,0,121,1)\",\"line\":{\"color\":\"rgba(67,0,121,1)\"}},\"textfont\":{\"color\":\"rgba(67,0,121,1)\"},\"error_y\":{\"color\":\"rgba(67,0,121,1)\"},\"error_x\":{\"color\":\"rgba(67,0,121,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true}],\"traces\":[0,1,2,3,4,5,6,7,8,9,10,11,12]},{\"name\":\"1998\",\"data\":[{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780,5700,6800,8120,9690,11600,13800,16500,19600,23400,28000,33400],\"y\":[14885925.5663331,18125607.1700071,21886205.4024085,26572917.4304645,32041167.518585,38366443.2624436,46116851.0630384,54997156.4514604,65179812.7319059,77290329.1227151,91577814.0196786,107907988.326053,126799857.211172,149105311.207646,172239009.118983,203075554.985618,235184267.886014,273989958.435909,317422596.99363,367676627.697421,426373797.427181,492524170.476634,570730027.830073,660689790.069471,763348882.226727,882363423.790991,1016522907.6837,1180551801.8898,1361353852.07349,1564777965.02119,1809204012.67017,2078786984.25722,2371090350.66631,2721358624.26333,3103823383.14029,3529561964.75898,4014972376.90949,4535129643.79557,5127856464.73651,5807612523.19893,6476412076.23267,7290145903.93184,8181586145.04667,9246686225.44542,10331724065.0519,11654705241.5935,13115429779.774,14808785720.1978,16738390578.5488,18891727164.8157,21453332392.4806,24321761434.9638,27780056215.8596,33244329440.9586,42680111337.6239,54909469516.7387,64175398669.2137,70663208351.0021,76658464438.7575,82438259117.477,87687436621.62,91496971854.5637,93827170868.278,94256732849.9135,91957640649.073,87158536055.8302,77996623936.8158,66480720226.0048,51672433336.3892,36293969707.4705,21690818915.6372,9818063697.99111],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1998\",\"line\":{\"color\":\"rgba(20,35,0,1)\",\"simplify\":false},\"name\":\"Cod\",\"marker\":{\"color\":\"rgba(20,35,0,1)\",\"line\":{\"color\":\"rgba(20,35,0,1)\"}},\"textfont\":{\"color\":\"rgba(20,35,0,1)\"},\"error_y\":{\"color\":\"rgba(20,35,0,1)\"},\"error_x\":{\"color\":\"rgba(20,35,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337],\"y\":[23762493.890738,28136040.9519591,33024046.5581919,38961504.1745036,45635573.2925277,53067056.8900452,61931446.343815,71695594.5545746,82473289.5016109,94917649.8711607,109152744.673387,124838725.726306,142404132.310551,162588511.177542,182404018.223869,208934098.133063,235170507.990724,266404275.720954,300279249.851585,338633554.733152,382631468.338677,431076965.615269,487727507.176309,551994387.007064,624491109.713336,708163215.577002,802479154.642947,922319824.675295,1077748862.11772,1368115901.59114,1908319543.38827,2411413502.48629,2778302057.40476,3150118083.2043,3537223185.29913,3959148618.66332,4430683976.84999,4916353106.45188,5445173666.82013,6012367250.20411,6488907152.84286,6991274143.97501,7385620562.5993,7662468245.21111,7565696535.96107,5660890175.35358],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1998\",\"line\":{\"color\":\"rgba(14,67,0,1)\",\"simplify\":false},\"name\":\"Dab\",\"marker\":{\"color\":\"rgba(14,67,0,1)\",\"line\":{\"color\":\"rgba(14,67,0,1)\"}},\"textfont\":{\"color\":\"rgba(14,67,0,1)\"},\"error_y\":{\"color\":\"rgba(14,67,0,1)\"},\"error_x\":{\"color\":\"rgba(14,67,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683],\"y\":[3251966411.2407,3669074497.43421,4092589314.37384,4576435181.28661,5067430303.81788,5556423487.0284,6099443374.40439,6625772466.30184,7135382169.53841,7670937270.61211,8222777555.43179,8748872338.15263,9266942261.08666,9807696766.93828,10183359221.3995,10780264048.8235,11200085056.2586,11698401308.4549,12146761304.9195,12609310855.1578,13107326394.2395,13579066185.8098,14123177853.8448,14689440927.1437,15267499034.8857,15897007085.6642,16520045882.6233,17329798616.8481,18072498496.6357,18808361734.0809,19731083357.6577,20742342536.0153,22499056190.1089,26821055151.6151,30740266438.6942,30832085117.2898,29094717384.4811,26586579979.1662,23891408260.4714,21139908600.0724,18102203395.0416,15385040566.7169,12836507892.5885,10646398469.8261,8646973359.21953,7047728278.97337,5697382351.63673,4553918388.8048,3498375033.85452,2084850457.33503],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1998\",\"line\":{\"color\":\"rgba(238,0,83,1)\",\"simplify\":false},\"name\":\"Gurnard\",\"marker\":{\"color\":\"rgba(238,0,83,1)\",\"line\":{\"color\":\"rgba(238,0,83,1)\"}},\"textfont\":{\"color\":\"rgba(238,0,83,1)\"},\"error_y\":{\"color\":\"rgba(238,0,83,1)\"},\"error_x\":{\"color\":\"rgba(238,0,83,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780],\"y\":[3140408164.81646,3649193878.00191,4196811227.98666,4844254079.51543,5543453547.49058,6289451869.74692,7152877133.29899,8060531610.00027,9016911030.34849,10082995090.0108,11257812478.7711,12493300111.1723,13821067076.4881,15297829143.1172,16632858272.9283,18460365609.0449,20129977864.3239,22088974350.2113,24114469286.6481,26334677562.1982,28808282877.7769,31410153056.5136,34374359937.0418,37600141836.6661,41067042067.0217,44888096830.0854,48907163452.089,53713702915.0396,58553631580.1268,63580900226.9842,69382479494.7768,75149634543.9698,80660032652.6503,86911182886.7081,92792616185.9739,98442607969.6242,104076103987.634,108836606612.099,113557706558.328,118797932800.579,125156460745.24,142600369850.718,160874237013.099,163627450300.023,155653305551.356,146888472817.588,137209149168.152,127874729268.931,118641918596.432,109191946714.801,100210517631.054,90569286671.2821,80407850029.344,70236626148.4935,57879889778.0007,45511946399.5953,33028323985.0476,20748627936.067,10572322969.5971,3674133943.84776,398033896.933018],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1998\",\"line\":{\"color\":\"rgba(180,41,121,1)\",\"simplify\":false},\"name\":\"Haddock\",\"marker\":{\"color\":\"rgba(180,41,121,1)\",\"line\":{\"color\":\"rgba(180,41,121,1)\"}},\"textfont\":{\"color\":\"rgba(180,41,121,1)\"},\"error_y\":{\"color\":\"rgba(180,41,121,1)\"},\"error_x\":{\"color\":\"rgba(180,41,121,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337],\"y\":[2303132346.18933,2677386180.81881,3083155861.6196,3566549201.36163,4093834034.74161,4663065083.23538,5328716696.74467,6038841946.65925,6799042015.47727,7657981440.50205,8618412948.18811,9646890910.10654,10770789289.4435,12038072483.8717,13222203552.0244,14829832191.442,16345811085.8766,18133148098.5816,20014176175.4779,22097469788.1033,24437076461.9261,26931655050.0733,29786827404.8786,32923698648.2005,36331475195.4099,40119201346.0836,44158567288.9938,48992381243.3624,53957079157.0325,59202694585.8998,65289578243.7652,71472130768.1207,77536152000.8526,84436883345.3691,91105166470.5855,97761850921.975,105331233001.423,117306960423.503,151677718383.483,209482779062.116,209252917157.767,158500160671.103,100125732651.872,53206329110.7573,21530103327.9974,5213868864.58932],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1998\",\"line\":{\"color\":\"rgba(222,83,255,1)\",\"simplify\":false},\"name\":\"Herring\",\"marker\":{\"color\":\"rgba(222,83,255,1)\",\"line\":{\"color\":\"rgba(222,83,255,1)\"}},\"textfont\":{\"color\":\"rgba(222,83,255,1)\"},\"error_y\":{\"color\":\"rgba(222,83,255,1)\"},\"error_x\":{\"color\":\"rgba(222,83,255,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117],\"y\":[15063414321.5774,16827398357.3569,18548579727.703,20456797301.8572,22296288036.1914,24017048508.7997,25850473834.5505,27485057752.5078,28924526415.1695,30345841510.3572,31711389074.1623,32869492644.0713,33907152902.6532,34953243246.0689,35368116864.8929,36522420835.5723,37061506064.3192,37868964854.4276,38533133935.7777,39270712979.8535,40145987975.3703,40961220863.7022,41999909764.781,43090224851.8114,44178218944.4618,45349122615.0429,46413584621.9981,48008451349.4704,49822353553.8296,54644483579.8356,70310746872.6131,87258151537.7098,81660709310.6183,64654648934.1759,45995586267.9806,29383498979.3212,16218719423.7473,7022059739.99842,1917253238.58879,60345114.8042932],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1998\",\"line\":{\"color\":\"rgba(141,166,0,1)\",\"simplify\":false},\"name\":\"N.pout\",\"marker\":{\"color\":\"rgba(141,166,0,1)\",\"line\":{\"color\":\"rgba(141,166,0,1)\"}},\"textfont\":{\"color\":\"rgba(141,166,0,1)\"},\"error_y\":{\"color\":\"rgba(141,166,0,1)\"},\"error_x\":{\"color\":\"rgba(141,166,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350],\"y\":[83899649070.6213,90759924236.4965,97031254994.3093,103952162329.785,110223822509.457,115674139498.978,121465795736.404,126156238991.365,129843554897.881,133372137840.979,136588949895.076,138868759631.484,140621042812.768,142396252288.469,141632217587.173,143858849243.642,143694165289.174,144644730535.635,145145632718.099,146067678624.739,147695262902.239,149372970560.851,152231310981.187,155739209109.969,159822305298.701,164928565205.148,170487723841.801,178524009420.626,186448993303.678,194868077322.591,205548660649.618,216014914405.144,225737651257.157,237550777663.939,248379081154.147,258722960811.047,269628755651.17,281795371061.925,309264435864.285,356692850637.123,370086864802.488,354873851516.681,327455986388.638,298334534954.3,264031643890.599,231613306861.749,198676114923.176,167269809436.742,137546148272.953,109815574973.409,85364400958.2134,63597011454.7127,45041037036.2821,30064352538.534,17817607293.9992,9206558659.23234,3798040468.59766,1021585252.71434,70778228.5343057],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1998\",\"line\":{\"color\":\"rgba(0,121,87,1)\",\"simplify\":false},\"name\":\"Plaice\",\"marker\":{\"color\":\"rgba(0,121,87,1)\",\"line\":{\"color\":\"rgba(0,121,87,1)\"}},\"textfont\":{\"color\":\"rgba(0,121,87,1)\"},\"error_y\":{\"color\":\"rgba(0,121,87,1)\"},\"error_x\":{\"color\":\"rgba(0,121,87,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82],\"y\":[46710921941.2543,45251482226.4512,43595597230.3256,42363972779.5751,41023183428.6981,39595160504.7285,38516971916.342,37332541306.2938,36122478685.4446,35136758940.4923,34318187665.2965,33500667987.7008,32776549153.6158,32250413427.561,31322745988.2693,31192861323.0779,30641634311.5349,30394489747.3665,30080194460.7611,29844081624.043,29703646823.7983,29487656236.5963,29381649538.8202,29239961931.3525,29013815510.0215,28753650201.6673],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1998\",\"line\":{\"color\":\"rgba(0,255,0,1)\",\"simplify\":false},\"name\":\"Resource\",\"marker\":{\"color\":\"rgba(0,255,0,1)\",\"line\":{\"color\":\"rgba(0,255,0,1)\"}},\"textfont\":{\"color\":\"rgba(0,255,0,1)\"},\"error_y\":{\"color\":\"rgba(0,255,0,1)\"},\"error_x\":{\"color\":\"rgba(0,255,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780,5700,6800,8120,9690,11600,13800,16500,19600,23400,28000,33400],\"y\":[313330933.318824,386351892.568005,472241948.069029,580149458.138701,707425229.920086,856096051.005092,1039248138.79751,1250667805.31915,1494427669.48715,1784966929.00151,2128076844.88351,2520326387.41805,2973078710.76196,3505139236.74244,4053836048.99818,4778208439.02245,5523105375.19627,6410715019.77781,7385104446.7965,8487630402.35446,9742078523.22707,11107854300.0709,12665139160.3408,14374346841.7818,16215344208.2646,18213798231.9856,20279969539.3631,22625851841.3362,24894967235.465,27100804733.9876,29440053687.7671,31516871497.6696,33206757469.8609,34905020714.4912,36161503872.0227,37071637567.4326,37768878207.4288,38009531479.6647,38149833360.1435,38281966505.1352,37827705606.8686,37810449540.0542,37837245407.0815,38365359103.6874,38766425937.432,39926450781.6315,41467944825.5679,43722062190.1849,46720049443.97,50536229979.6838,56174056275.379,65782072940.554,83698185706.333,103975986509.113,119011619866.703,135725649407.059,155886233234.278,176963691806.739,200682561993.297,226140558362.403,251019454738.832,270624046460.512,282267731326.474,282434320079.515,267587123725.733,239386141755.179,196205428002.656,148639642284.145,99811273823.341,59021949831.3665,28978822325.6164,10479535787.3567],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1998\",\"line\":{\"color\":\"rgba(160,141,251,1)\",\"simplify\":false},\"name\":\"Saithe\",\"marker\":{\"color\":\"rgba(160,141,251,1)\",\"line\":{\"color\":\"rgba(160,141,251,1)\"}},\"textfont\":{\"color\":\"rgba(160,141,251,1)\"},\"error_y\":{\"color\":\"rgba(160,141,251,1)\"},\"error_x\":{\"color\":\"rgba(160,141,251,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4],\"y\":[2413569820.52889,2989026024.89158,3676232020.15819,4553616270.23025,5611056095.97733,6878305037.96456,8479892120.07762,10392036718.6822,12680588496.2048,15511067531.9404,18992673180.4158,23166145183.0822,28219555720.454,34438528865.2239,41315182649.5425,50599659170.3237,60854772954.7338,73639983662.3229,89234726624.2583,113083468431.8,164434985216.45,246303784637.399,315881618768.892,369512362964.323,417479450558.566,463226726104.772,503762649784.395,542079873207.798,565912805294.55,570037768808.53,548282566695.456,475337981324.224,325196224531.899,63897625580.4527],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1998\",\"line\":{\"color\":\"rgba(98,55,226,1)\",\"simplify\":false},\"name\":\"Sandeel\",\"marker\":{\"color\":\"rgba(98,55,226,1)\",\"line\":{\"color\":\"rgba(98,55,226,1)\"}},\"textfont\":{\"color\":\"rgba(98,55,226,1)\"},\"error_y\":{\"color\":\"rgba(98,55,226,1)\"},\"error_x\":{\"color\":\"rgba(98,55,226,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973],\"y\":[128806042.756171,154052614.696004,182735819.658893,217994542.138489,258321713.580702,304060498.82647,359376407.668973,421552065.771063,491581756.471174,573768518.803303,669405312.585373,776949830.55073,899579786.963048,1042599904.81809,1187289995.7778,1380228842.64645,1576177627.61369,1810665447.52476,2068341640.30539,2362013478.07914,2700071775.5313,3074073116.71026,3510434978.79016,4004329333.60798,4558693730.56832,5192340334.32066,5894875469.59868,6747686831.21762,7670622303.90119,8692962929.47045,9910044341.85207,11225720518.9352,12619541008.0048,14270296384.8804,16049473864.7682,18170076924.268,21682434314.822,28876672645.5273,36943236250.0435,40516169016.3426,40498084132.0173,39266957496.3236,36625512777.6721,33037878244.756,28093803550.9529,22798136213.7674,17247244071.7817,12019202441.5148,7448136690.16545,3814993780.52875,1362177768.78713,129816125.785794],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1998\",\"line\":{\"color\":\"rgba(108,170,114,1)\",\"simplify\":false},\"name\":\"Sole\",\"marker\":{\"color\":\"rgba(108,170,114,1)\",\"line\":{\"color\":\"rgba(108,170,114,1)\"}},\"textfont\":{\"color\":\"rgba(108,170,114,1)\"},\"error_y\":{\"color\":\"rgba(108,170,114,1)\"},\"error_x\":{\"color\":\"rgba(108,170,114,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8],\"y\":[1379148333.55724,1566716759.09036,1762444918.24079,1990792859.40089,2230203051.38141,2477764136.08627,2759826346.49031,3046055417.70346,3337105029.23429,3653823200.74327,3993068830.72688,4335235962.09774,4689038054.58214,5070264609.15749,5380042458.80829,5819518261.34318,6172011041.16193,6563174368.86514,6893152065.65651,7141685828.78344,7258494797.09904,7202120586.03726,7070337271.12479,6877882706.96398,6658447307.71291,6538496278.10501,6957725964.93747,8725178983.43519,8995669268.50556,5788553765.58379,2592242613.11852,785205057.974692,115186251.215209],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1998\",\"line\":{\"color\":\"rgba(129,95,0,1)\",\"simplify\":false},\"name\":\"Sprat\",\"marker\":{\"color\":\"rgba(129,95,0,1)\",\"line\":{\"color\":\"rgba(129,95,0,1)\"}},\"textfont\":{\"color\":\"rgba(129,95,0,1)\"},\"error_y\":{\"color\":\"rgba(129,95,0,1)\"},\"error_x\":{\"color\":\"rgba(129,95,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390],\"y\":[1124591574.66099,1296208400.67403,1477359466.48401,1688385819.50715,1911043763.49107,2142421339.9927,2405097847.87389,2672692337.49918,2945638190.82201,3242605445.12198,3561593976.41357,3886184506.60335,4225605425.32238,4596254739.56062,4911075854.52435,5357675144.80367,5744818656.35551,6202291968.29559,6666790913.95323,7174918496.99049,7742929913.31988,8337709542.66821,9022651683.05468,9773658229.9768,10590170409.3089,11507743750.6023,12495106218.9576,13727009905.1667,15016946023.7964,16425184450.4832,18130138906.6606,19953966332.1929,21876082102.5241,24228473171.3208,26828460700.4291,30140199818.2161,36192780434.9462,47587611402.532,58211075674.18,63975131468.1691,66469819727.8473,68526922168.3425,69425281085.6931,69619363018.7037,67523623419.9739,64275398559.8916,58834458669.0326,51490703809.3066,42297123150.2789,31754179737.4092,21089505564.6208,11353481990.3514,4042635225.52052,189833386.049999],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1998\",\"line\":{\"color\":\"rgba(67,0,121,1)\",\"simplify\":false},\"name\":\"Whiting\",\"marker\":{\"color\":\"rgba(67,0,121,1)\",\"line\":{\"color\":\"rgba(67,0,121,1)\"}},\"textfont\":{\"color\":\"rgba(67,0,121,1)\"},\"error_y\":{\"color\":\"rgba(67,0,121,1)\"},\"error_x\":{\"color\":\"rgba(67,0,121,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true}],\"traces\":[0,1,2,3,4,5,6,7,8,9,10,11,12]},{\"name\":\"1999\",\"data\":[{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780,5700,6800,8120,9690,11600,13800,16500,19600,23400,28000,33400],\"y\":[14944582.2901477,18191650.375021,21957344.4389234,26646087.7050586,32109966.9075355,38421202.7139754,46144156.1959832,54977526.9863004,65087607.699831,77091559.0823265,91228502.8021812,107355078.882858,125978576.559066,147935455.457399,170654630.254505,200943121.098023,232429213.142048,270482510.70328,313066743.941911,362367381.12337,420013335.118888,485075998.981561,562154354.848803,651041565.794076,752787025.328095,871146052.294997,1005108038.09984,1169471898.77249,1351552085.37983,1557427586.15435,1805753727.15274,2081123659.56369,2381311857.3534,2741886291.80842,3137024144.14623,3577738325.76731,4080300428.24006,4618711906.86407,5230398764.06909,5928715204.46183,6611711080.56788,7436171170.4128,8330642794.33273,9389452899.73082,10452805613.5489,11737748627.9267,13138602861.8151,14746443262.9587,16560480035.7403,18564998056.6512,20938360140.4682,23578430185.222,26757189432.8954,31821661621.4305,40600286266.8,51929499023.7045,60405932519.7903,66278314197.7074,71714063405.4579,76956365193.6078,81681309712.8075,85013697142.203,86904066808.7018,86972601303.6228,84493019063.9624,79731631539.6475,71047427284.1438,60332198881.1366,46768627960.8257,32821527151.2899,19649265895.051,8934283934.41734],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1999\",\"line\":{\"color\":\"rgba(20,35,0,1)\",\"simplify\":false},\"name\":\"Cod\",\"marker\":{\"color\":\"rgba(20,35,0,1)\",\"line\":{\"color\":\"rgba(20,35,0,1)\"}},\"textfont\":{\"color\":\"rgba(20,35,0,1)\"},\"error_y\":{\"color\":\"rgba(20,35,0,1)\"},\"error_x\":{\"color\":\"rgba(20,35,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337],\"y\":[24091064.4762246,28482284.243039,33374403.5049093,39302816.2542593,45945355.9639204,53317905.9675264,62093446.5012541,71731318.8459945,82343185.7620965,94579744.9888183,108563901.080032,123961672.915516,141208526.642232,161051990.698119,180555094.064421,206759856.569049,232767178.614627,263861532.071978,297768203.488053,336375794.881186,380920942.707193,430300454.204219,488357335.031544,554611171.502902,629775149.162266,716910855.809182,815561224.438374,940960215.244508,1103616420.86321,1406101897.34686,1968367370.94301,2494337255.00214,2878371277.52928,3264368225.35446,3662058817.88567,4091510685.79936,4568592057.93049,5058158647.25624,5592376244.3067,6169266436.4979,6660118244.34606,7187901196.41828,7613871976.70455,7908342879.15874,7744838487.61822,5651160224.70455],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1999\",\"line\":{\"color\":\"rgba(14,67,0,1)\",\"simplify\":false},\"name\":\"Dab\",\"marker\":{\"color\":\"rgba(14,67,0,1)\",\"line\":{\"color\":\"rgba(14,67,0,1)\"}},\"textfont\":{\"color\":\"rgba(14,67,0,1)\"},\"error_y\":{\"color\":\"rgba(14,67,0,1)\"},\"error_x\":{\"color\":\"rgba(14,67,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683],\"y\":[3259336833.4212,3673056330.72474,4091290744.99418,4567548337.83044,5048270193.41735,5524100913.13893,6050523058.02909,6557213970.28381,7044487059.05736,7554952549.73544,8079689882.03699,8578452435.84537,9070121996.06507,9586421339.98344,9945801536.55398,10527677300.5217,10944937530.7245,11448951733.1718,11915407661.8881,12407636481.7207,12946452520.5249,13469624784.8794,14072485638.3687,14701942035.822,15343070426.3371,16030577532.6367,16700882706.9836,17544720507.1366,18301714645.1702,19030771253.3082,19928013959.1787,20894727394.7233,22588423306.9258,26813901392.8977,30594414622.8403,30579621525.7126,28810310973.134,26343969611.9535,23741220366.126,21100557670.1655,18153704277.3901,15473965577.2177,12891919602.1286,10600930935.1109,8457106600.23139,6705218152.6508,5239963185.47585,4053086343.54337,3032715754.68186,1788164289.05209],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1999\",\"line\":{\"color\":\"rgba(238,0,83,1)\",\"simplify\":false},\"name\":\"Gurnard\",\"marker\":{\"color\":\"rgba(238,0,83,1)\",\"line\":{\"color\":\"rgba(238,0,83,1)\"}},\"textfont\":{\"color\":\"rgba(238,0,83,1)\"},\"error_y\":{\"color\":\"rgba(238,0,83,1)\"},\"error_x\":{\"color\":\"rgba(238,0,83,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780],\"y\":[3149081707.29194,3657762625.03311,4204216755.51294,4849044771.50281,5543461572.34593,6281819158.55744,7133809627.28794,8025415706.78921,8960306712.92601,9998211221.6854,11137173825.7455,12328992101.6048,13604731069.2518,15020312648.2157,16291473162.0617,18041310296.6064,19635699858.5719,21515364801.0705,23467668624.4301,25623602378.6691,28047652604.0319,30626677171.6957,33598670451.7744,36876303413.0217,40450068273.0215,44440941909.4053,48701709164.2106,53824648210.2809,59056043495.7169,64537340225.543,70848852861.0598,77141884808.5092,83140588674.1307,89817751233.7333,95968018740.4716,101676002743.141,107113578469.678,111364430124.549,115269036850.744,119379402335.333,124247920269.942,139479349775.333,154669856337.072,154596505453.513,144719299138.621,134729016564.583,124577551778.546,115409971946.039,106953049437.286,98840350819.4534,91590732400.3496,84054796830.8732,76205128567.8481,68367962176.0164,58213113981.832,47594577436.0637,36145790401.614,23910385959.293,12899133985.7992,4766569557.42231,547034731.675312],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1999\",\"line\":{\"color\":\"rgba(180,41,121,1)\",\"simplify\":false},\"name\":\"Haddock\",\"marker\":{\"color\":\"rgba(180,41,121,1)\",\"line\":{\"color\":\"rgba(180,41,121,1)\"}},\"textfont\":{\"color\":\"rgba(180,41,121,1)\"},\"error_y\":{\"color\":\"rgba(180,41,121,1)\"},\"error_x\":{\"color\":\"rgba(180,41,121,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337],\"y\":[2317600611.37808,2689944774.22636,3091958678.61376,3569312991.94527,4087509000.14011,4643979941.24079,5292222239.20696,5979761775.59412,6711621386.71527,7535286048.80942,8452813641.41381,9431148660.49915,10497342099.6653,11698649020.6982,12816401485.6719,14343814099.7438,15784459392.2265,17492974520.2525,19302185118.1472,21322167933.0381,23611268270.6603,26078383394.1251,28929678767.4562,32096110600.2285,35573119101.8785,39471616354.9302,43666657731.0342,48693515212.3864,53888197832.9009,59385042862.5477,65730496933.0344,72156081867.9039,78418033317.325,85456022579.0744,92167295617.6545,98763282101.386,106174909650.753,117911200325.862,151976326568.893,209644784881.986,210434160113.395,161310660118.727,103672977522.624,56098776931.3553,22952450198.9627,5516700149.3606],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1999\",\"line\":{\"color\":\"rgba(222,83,255,1)\",\"simplify\":false},\"name\":\"Herring\",\"marker\":{\"color\":\"rgba(222,83,255,1)\",\"line\":{\"color\":\"rgba(222,83,255,1)\"}},\"textfont\":{\"color\":\"rgba(222,83,255,1)\"},\"error_y\":{\"color\":\"rgba(222,83,255,1)\"},\"error_x\":{\"color\":\"rgba(222,83,255,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117],\"y\":[15466895678.5481,17251281187.4287,18976456604.9012,20873330782.1441,22675895179.1712,24330025408.9734,26066938296.3134,27569574826.8438,28843274295.7414,30067066748.7616,31206335609.8594,32118132499.8958,32897549841.7755,33679765393.9687,33862804585.9123,34774360091.8832,35133302723.0732,35796135250.0735,36387747934.195,37128838726.6462,38096628896.3594,39120348420.8551,40487639369.6927,42053285210.2153,43781186657.305,45770812623.1991,47843574513.3725,50678612063.8502,54000441231.8085,61054286171.6343,81732288277.2402,106588427984.857,104818102526.277,86674466396.6342,63902322156.9581,42005552749.5917,23740287694.5084,10516027330.076,2953736576.15882,96088786.3972346],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1999\",\"line\":{\"color\":\"rgba(141,166,0,1)\",\"simplify\":false},\"name\":\"N.pout\",\"marker\":{\"color\":\"rgba(141,166,0,1)\",\"line\":{\"color\":\"rgba(141,166,0,1)\"}},\"textfont\":{\"color\":\"rgba(141,166,0,1)\"},\"error_y\":{\"color\":\"rgba(141,166,0,1)\"},\"error_x\":{\"color\":\"rgba(141,166,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350],\"y\":[82135910360.8857,88371202779.6482,93934759643.2677,100034148039.411,105425988296.147,109972901625.885,114807059407.128,118590317258.43,121457072142.703,124234147418.833,126808833997.841,128631905848.869,130111436735.123,131777706546.143,131271879375.361,133725036460.281,134144576435.206,135785750504.499,137175990578.716,139116496605.452,141863998745.187,144769314007.436,148902468610.452,153729684743.846,159149786278.936,165581405864.521,172426767671.606,181715468143.241,190804143067.08,200282336716.91,211959188646.214,223282173965.366,233690352897.436,246109099342.182,257346042800.388,267909470958.446,278865531027.485,290899337308.004,318365008746.816,365632311576.05,377119088644.396,358968878197.822,328465096994.663,296553906624.747,259993531622.019,225884847171.926,191861237027.366,159880003107.467,130026497571.024,102552190155.114,78632796255.6112,57706748762.5167,40252330939.7733,26520280951.9331,15587719896.4762,8032135916.6049,3314188953.99855,889865564.449779,61266177.6985333],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1999\",\"line\":{\"color\":\"rgba(0,121,87,1)\",\"simplify\":false},\"name\":\"Plaice\",\"marker\":{\"color\":\"rgba(0,121,87,1)\",\"line\":{\"color\":\"rgba(0,121,87,1)\"}},\"textfont\":{\"color\":\"rgba(0,121,87,1)\"},\"error_y\":{\"color\":\"rgba(0,121,87,1)\"},\"error_x\":{\"color\":\"rgba(0,121,87,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82],\"y\":[46438998435.7376,44922161795.6085,43212530208.7677,41926042930.7213,40534465784.1535,39060843585.1355,37937022485.4636,36713853577.6612,35471968279.7718,34457571104.3085,33614732375.6942,32781335786.5448,32048602732.4631,31519458154.1205,30608810495.8331,30489606486.2578,29971399105.3734,29764525856.2196,29507089985.5433,29342677056.8176,29290116491.1256,29181786427.0798,29201747398.4601,29205972936.6809,29143998101.9296,29063015415.645],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1999\",\"line\":{\"color\":\"rgba(0,255,0,1)\",\"simplify\":false},\"name\":\"Resource\",\"marker\":{\"color\":\"rgba(0,255,0,1)\",\"line\":{\"color\":\"rgba(0,255,0,1)\"}},\"textfont\":{\"color\":\"rgba(0,255,0,1)\"},\"error_y\":{\"color\":\"rgba(0,255,0,1)\"},\"error_x\":{\"color\":\"rgba(0,255,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780,5700,6800,8120,9690,11600,13800,16500,19600,23400,28000,33400],\"y\":[312696578.548479,385473281.541511,470981110.780575,578269592.189231,704586443.011619,851805223.658403,1032745050.78443,1240961599.45678,1480195630.34247,1764380091.84925,2098787067.54403,2479577224.32165,2917533066.27577,3430751177.62623,3957831639.73848,4654268947.85382,5369283077.43956,6223101035.52625,7163390967.74371,8233390877.2398,9460513046.98723,10811101294.8052,12370488470.1786,14109177777.2676,16017525021.4811,18131757392.9031,20373220569.5702,22965496987.3945,25556070510.8394,28157263951.1554,30970216558.1079,33569837519.2794,35795964865.9698,38043273049.2681,39789991264.0308,41099877580.2621,42085042515.2395,42443611430.9032,42550363767.0803,42494041828.2598,41630360724.0457,41094581386.106,40457282196.2488,40211462338.3762,39701062649.39,39847126999.9488,40254882120.3208,41242294809.4497,42822548058.9593,45051778158.1368,48789312105.3198,55760024503.6539,69343016847.3903,84522887997.7212,95503639529.6195,108238280615.598,124394554643.552,142322468140.733,163925059594.445,189182997678.109,216962482276.814,243760536903.436,266989638419.112,282136430413.676,283130831613.804,268200610518.201,231919532145.114,184169634059.109,128563282989.143,78370928121.0941,39426510108.8756,14587710696.3759],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1999\",\"line\":{\"color\":\"rgba(160,141,251,1)\",\"simplify\":false},\"name\":\"Saithe\",\"marker\":{\"color\":\"rgba(160,141,251,1)\",\"line\":{\"color\":\"rgba(160,141,251,1)\"}},\"textfont\":{\"color\":\"rgba(160,141,251,1)\"},\"error_y\":{\"color\":\"rgba(160,141,251,1)\"},\"error_x\":{\"color\":\"rgba(160,141,251,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4],\"y\":[2429420598.7752,3007446425.49956,3697193693.41741,4577240065.3017,5637005612.82616,6905941630.71855,8508510158.30323,10420138612.5617,12706157420.6185,15531589000.1992,19004759942.2737,23165419701.8044,28200670766.4352,34394814429.3018,41239627815.6572,50480655544.7523,60681138279.3457,73392530881.1245,88885113260.5862,112561755353.868,163497031311.257,244394444542.769,312287726360.331,363117131225.53,406427705680.755,444735443071.365,474242374470.98,497064469469.507,502036166309.333,486656734745.187,449934097806.127,377633405712.919,255542331709.024,51120855175.5761],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1999\",\"line\":{\"color\":\"rgba(98,55,226,1)\",\"simplify\":false},\"name\":\"Sandeel\",\"marker\":{\"color\":\"rgba(98,55,226,1)\",\"line\":{\"color\":\"rgba(98,55,226,1)\"}},\"textfont\":{\"color\":\"rgba(98,55,226,1)\"},\"error_y\":{\"color\":\"rgba(98,55,226,1)\"},\"error_x\":{\"color\":\"rgba(98,55,226,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973],\"y\":[129890639.9301,155063307.428128,183569082.877149,218529563.332546,258395692.307063,303484323.690278,357926322.773293,418991571.625965,487674813.508987,568266663.285503,662089301.847379,767704205.869116,888392596.116724,1029590371.59629,1173071738.14353,1365197133.06329,1561671556.77637,1798147813.52121,2059974603.01353,2360474502.97043,2708675626.91061,3096693851.27758,3551605161.05085,4068950133.02321,4651778530.87969,5319048778.14172,6059530600.04215,6956042017.21853,7924840046.46327,8994356525.85185,10261460655.0785,11624735248.2151,13061030977.5305,14753485195.029,16567168601.3723,18719745343.2958,22285788623.8293,29593412839.5004,37734277809.6929,41244111269.0697,41085411022.748,39689902118.8883,36852804563.8042,33030616214.694,27811053553.2435,22222061635.0747,16426191805.5538,11086949000.9466,6607833333.73249,3252606583.78367,1125833806.78958,105709103.987366],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1999\",\"line\":{\"color\":\"rgba(108,170,114,1)\",\"simplify\":false},\"name\":\"Sole\",\"marker\":{\"color\":\"rgba(108,170,114,1)\",\"line\":{\"color\":\"rgba(108,170,114,1)\"}},\"textfont\":{\"color\":\"rgba(108,170,114,1)\"},\"error_y\":{\"color\":\"rgba(108,170,114,1)\"},\"error_x\":{\"color\":\"rgba(108,170,114,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8],\"y\":[1464327760.19547,1654793054.11249,1851416954.52187,2079698174.77366,2316869111.67797,2560064832.64374,2836726213.80993,3115972857.31591,3399304292.2615,3708913937.49648,4042690707.90979,4382226273.80104,4738076945.2087,5128169641.81757,5454635698.83191,5924090461.19318,6320510621.21528,6779082305.20062,7212176484.44555,7625141819.09681,7991210331.49403,8255846916.92338,8488427882.8432,8668785608.34143,8811526022.12527,9077494717.03126,10144548101.0226,13424585905.5564,14506526314.6137,9623067314.90909,4414627860.11456,1385197781.10951,215446143.046819],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1999\",\"line\":{\"color\":\"rgba(129,95,0,1)\",\"simplify\":false},\"name\":\"Sprat\",\"marker\":{\"color\":\"rgba(129,95,0,1)\",\"line\":{\"color\":\"rgba(129,95,0,1)\"}},\"textfont\":{\"color\":\"rgba(129,95,0,1)\"},\"error_y\":{\"color\":\"rgba(129,95,0,1)\"},\"error_x\":{\"color\":\"rgba(129,95,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390],\"y\":[1137793851.49359,1310319690.66066,1491804679.61851,1702564361.24645,1923914556.40581,2152668937.70681,2411213566.59648,2672752940.84581,2937512935.42786,3223895130.16959,3529647351.22393,3838379478.27042,4159281581.90032,4508595717.19096,4801371911.74335,5221616820.70355,5583164381.53749,6013327629.33881,6451590334.49611,6934641517.27747,7479506957.05842,8055670415.03954,8726002608.36489,9469045759.89382,10286109050.2208,11213570791.4838,12222712008.2727,13487162063.3558,14825008666.7205,16295826662.7985,18077357292.1047,19992019588.6672,22014618985.7682,24474427236.8909,27182204415.3019,30605342542.7584,36804476594.084,48418785701.9701,59203424308.2821,65016640213.5289,67543610825.9002,69738780254.2707,70940789443.0329,71670089139.9274,70314864470.6585,68015369114.8854,63579557808.1549,57111438257.5446,48368244003.2692,37546121560.8623,25786849028.9397,14310824924.8206,5228883541.6176,250610949.745219],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"1999\",\"line\":{\"color\":\"rgba(67,0,121,1)\",\"simplify\":false},\"name\":\"Whiting\",\"marker\":{\"color\":\"rgba(67,0,121,1)\",\"line\":{\"color\":\"rgba(67,0,121,1)\"}},\"textfont\":{\"color\":\"rgba(67,0,121,1)\"},\"error_y\":{\"color\":\"rgba(67,0,121,1)\"},\"error_x\":{\"color\":\"rgba(67,0,121,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true}],\"traces\":[0,1,2,3,4,5,6,7,8,9,10,11,12]},{\"name\":\"2000\",\"data\":[{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780,5700,6800,8120,9690,11600,13800,16500,19600,23400,28000,33400],\"y\":[14883945.5398423,18127756.5018622,21893531.6229648,26586254.5639186,32060545.534925,38390483.3230365,46142191.7875431,55016695.6626391,65181527.7810226,77255293.1262763,91477412.2239158,107701777.09894,126432242.548426,148500662.515698,171315066.732472,201694268.019742,233224614.515901,271274775.39638,313779536.221306,362908970.614706,420275197.704688,484938479.595043,561501360.974953,649780595.200503,750884371.119878,868667078.340539,1002293242.95515,1166775266.80671,1349830234.6632,1557997153.80495,1810555716.84642,2092846255.00673,2403465827.44547,2779321503.72001,3195420219.71515,3663918470.04186,4202357196.99405,4784475226.19286,5448933244.71341,6209360895.45889,6957482539.10204,7855755697.96429,8826432006.77818,9965930121.60695,11100414562.63,12455312866.6948,13912855913.4758,15563432603.3935,17399389179.5023,19397408532.4548,21736336641.5607,24301111137.1837,27361672692.2687,32262578728.7272,40757395579.5603,51546446399.1815,59260767848.9398,64272954300.237,68782471941.9751,73069926291.9767,76871090214.6396,79406513267.5912,80663807005.8698,80298852678.6044,77636440608.855,72917750325.4268,64657500109.858,54623103350.0682,42125551096.5986,29430647868.9785,17569055484.9535,7986635663.52133],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2000\",\"line\":{\"color\":\"rgba(20,35,0,1)\",\"simplify\":false},\"name\":\"Cod\",\"marker\":{\"color\":\"rgba(20,35,0,1)\",\"line\":{\"color\":\"rgba(20,35,0,1)\"}},\"textfont\":{\"color\":\"rgba(20,35,0,1)\"},\"error_y\":{\"color\":\"rgba(20,35,0,1)\"},\"error_x\":{\"color\":\"rgba(20,35,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337],\"y\":[24063508.3619859,28503217.3168526,33463479.3422379,39484427.9773643,46246291.3011932,53766467.3963255,62724656.5057925,72575035.9413061,83426688.1005448,95933288.5253016,110211971.233397,125911778.411426,143458571.471936,163591191.613046,183302092.399758,209711114.557287,235782114.441564,266835234.327502,300525167.072442,338719023.03107,382617575.7364,431075312.910547,487918137.725184,552648248.39588,625995826.118696,711062657.224246,807506250.537894,930576703.457952,1090926215.42982,1390530000.2607,1950165636.60315,2480610585.84643,2879157723.9604,3290405058.92518,3725343423.95709,4204660839.07711,4743617518.58624,5302534157.8545,5909751441.42652,6557600214.69837,7104148490.88369,7678951323.48605,8137698860.9422,8450595712.23703,8238191641.34005,5890974559.69541],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2000\",\"line\":{\"color\":\"rgba(14,67,0,1)\",\"simplify\":false},\"name\":\"Dab\",\"marker\":{\"color\":\"rgba(14,67,0,1)\",\"line\":{\"color\":\"rgba(14,67,0,1)\"}},\"textfont\":{\"color\":\"rgba(14,67,0,1)\"},\"error_y\":{\"color\":\"rgba(14,67,0,1)\"},\"error_x\":{\"color\":\"rgba(14,67,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683],\"y\":[3246561595.67694,3665875867.32597,4092778562.30253,4581413369.4705,5078796181.07858,5575844575.22862,6128850051.60406,6666783976.43883,7189339541.61361,7739145562.52345,8306043800.97933,8846920860.93351,9378807833.29673,9931819162.04772,10314688511.966,10917558544.3817,11335876386.8328,11827395469.6067,12261289008.9827,12701901794.8853,13170476299.6146,13605466108.9524,14107106616.8013,14627210012.6311,15158944125.2083,15746323746.0377,16337638290.1798,17130396857.2736,17880455604.0399,18653412376.7891,19646375232.4263,20766429280.7056,22681991776.0236,27274436605.8003,31567078898.2431,31962650222.0245,30418723643.632,28004077925.1456,25330304645.5805,22538535679.285,19375228650.7965,16473171508.3713,13657239814.5078,11129439306.2253,8737642323.13194,6747478750.82388,5075020096.68564,3747441866.88271,2679860257.07527,1535391955.7295],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2000\",\"line\":{\"color\":\"rgba(238,0,83,1)\",\"simplify\":false},\"name\":\"Gurnard\",\"marker\":{\"color\":\"rgba(238,0,83,1)\",\"line\":{\"color\":\"rgba(238,0,83,1)\"}},\"textfont\":{\"color\":\"rgba(238,0,83,1)\"},\"error_y\":{\"color\":\"rgba(238,0,83,1)\"},\"error_x\":{\"color\":\"rgba(238,0,83,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780],\"y\":[3114526284.32166,3620663089.94517,4166319612.79754,4812358740.98403,5511405208.0834,6258826798.10982,7125220674.31453,8037985586.54457,9001667595.3789,10077141309.0043,11263398819.3539,12512065858.4809,13854241346.6003,15346132299.6448,16695171739.3418,18536938885.0578,20217627543.7519,22185506493.6326,24216141698.0546,26438168323.4275,28911035781.865,31510756037.2348,34475239735.2926,37708379334.3326,41197190083.6674,45065693994.3109,49171296679.6744,54125383200.0024,59191677310.5724,64548394548.3854,70817967378.6048,77201828814.0257,83479871557.7013,90680924089.6821,97627214347.3411,104403697060.375,111148105322.723,116821709750.094,122168770562.965,127634397549.725,133665981139.354,150405951684.329,166126274845.455,164068101843.979,150503236695.441,136245942285.106,121723811614.817,108497013324.317,96611567391.6907,85968187496.2451,77138681894.9734,69158168653.2992,61945845047.6363,55602146232.0364,47979943634.0748,40251289063.4723,31729632392.8381,22014645340.0936,12571296262.8591,4954639522.58248,605363330.004359],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2000\",\"line\":{\"color\":\"rgba(180,41,121,1)\",\"simplify\":false},\"name\":\"Haddock\",\"marker\":{\"color\":\"rgba(180,41,121,1)\",\"line\":{\"color\":\"rgba(180,41,121,1)\"}},\"textfont\":{\"color\":\"rgba(180,41,121,1)\"},\"error_y\":{\"color\":\"rgba(180,41,121,1)\"},\"error_x\":{\"color\":\"rgba(180,41,121,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337],\"y\":[2308875988.6933,2684257229.90088,3091326988.15596,3576325576.2666,4105430108.32109,4676663550.31133,5344606129.91987,6057065806.1732,6819515358.62933,7680564840.56344,8642703281.85603,9672051123.01827,10795660148.8524,12061135239.0033,13241073259.6521,14842396953.2382,16348863922.6305,18123416164.2176,19988209656.364,22051934838.2658,24369106272.8645,26840003641.5103,29671986635.0465,32790275899.8203,36190123011.9584,39988949844.0524,44071269722.9663,48996351799.6264,54124586130.7947,59633464661.6492,66123445107.2,72883633281.8435,79732377128.4989,87690846192.1621,95688542724.0902,103964085542.984,113515794764.546,128254048855.119,168754363348.278,238470248429.322,244456693997.047,190379880922.671,124003621181.136,68043814647.4808,28237494062.4903,6836024685.85012],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2000\",\"line\":{\"color\":\"rgba(222,83,255,1)\",\"simplify\":false},\"name\":\"Herring\",\"marker\":{\"color\":\"rgba(222,83,255,1)\",\"line\":{\"color\":\"rgba(222,83,255,1)\"}},\"textfont\":{\"color\":\"rgba(222,83,255,1)\"},\"error_y\":{\"color\":\"rgba(222,83,255,1)\"},\"error_x\":{\"color\":\"rgba(222,83,255,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117],\"y\":[15011831899.6977,16775697293.3371,18500668080.8881,20416711081.8958,22269216189.6842,24008189170.1616,25864543682.48,27525827579.4401,28993877432.734,30443850474.8508,31835634712.6094,33014124452.6742,34063701529.3318,35111097440.9456,35511582931.3813,36639685586.4179,37134517522.4649,37882020768.0072,38470228254.9231,39117311066.1588,39889190812.5068,40592742847.215,41514119437.4503,42488993933.8982,43472131817.3906,44556971812.1074,45568342709.4086,47144153361.7998,48992839440.1435,53887041649.3926,69707486803.2124,87408886457.3741,83241029902.8527,67625396691.0672,49796319518.721,33197114054.1677,19250128939.7248,8806064596.32389,2559352009.90873,85671292.27625],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2000\",\"line\":{\"color\":\"rgba(141,166,0,1)\",\"simplify\":false},\"name\":\"N.pout\",\"marker\":{\"color\":\"rgba(141,166,0,1)\",\"line\":{\"color\":\"rgba(141,166,0,1)\"}},\"textfont\":{\"color\":\"rgba(141,166,0,1)\"},\"error_y\":{\"color\":\"rgba(141,166,0,1)\"},\"error_x\":{\"color\":\"rgba(141,166,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350],\"y\":[84809307613.1109,91636381481.8433,97817811929.0306,104593471253.218,110646297589.793,115800584376.567,121217552001.843,125454769780.607,128619404196.313,131557444927.633,134124328875.914,135719259573.618,136762143564.935,137803872248.309,136389152661.935,137866847049.694,137077189103.906,137397662149.586,137351620324.452,137783802591.184,138978937051.089,140340874644.688,142957821161.041,146361789650.465,150521061878.026,155902999212.799,162021024405.554,170863975401.805,180033247025.646,190156299413.951,203019938632.961,216240284410.613,229254406705.061,244895514786.999,259947703488.453,274768106660.256,290297587263.058,307150182567.861,340697805029.011,396172078520.922,412657270903.396,395253649668.977,362539102335.773,326884545739.255,285226145223.152,245906843116.719,206779130569.662,170289857517.451,136692880188.397,106297852046.03,80274744254.6321,57950574927.9753,39719786892.0206,25715601160.5491,14888220470.7831,7594053037.28752,3118583147.93595,835379264.717728,57282519.9191704],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2000\",\"line\":{\"color\":\"rgba(0,121,87,1)\",\"simplify\":false},\"name\":\"Plaice\",\"marker\":{\"color\":\"rgba(0,121,87,1)\",\"line\":{\"color\":\"rgba(0,121,87,1)\"}},\"textfont\":{\"color\":\"rgba(0,121,87,1)\"},\"error_y\":{\"color\":\"rgba(0,121,87,1)\"},\"error_x\":{\"color\":\"rgba(0,121,87,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82],\"y\":[46635188224.0475,45153587273.0916,43471756085.0105,42208267790.9172,40830890613.3101,39361841964.5055,38235756222.3496,36999704188.2926,35734910958.6194,34689622989.67,33807665968.2443,32926451800.8456,32138537511.9672,31547827313.9983,30570346725.1314,30379369063.4237,29788128067.0631,29506219591.5145,29176173461.8912,28943108698.8426,28828444037.7494,28670869458.5322,28655737706.737,28646382679.5081,28598530568.991,28563388350.5658],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2000\",\"line\":{\"color\":\"rgba(0,255,0,1)\",\"simplify\":false},\"name\":\"Resource\",\"marker\":{\"color\":\"rgba(0,255,0,1)\",\"line\":{\"color\":\"rgba(0,255,0,1)\"}},\"textfont\":{\"color\":\"rgba(0,255,0,1)\"},\"error_y\":{\"color\":\"rgba(0,255,0,1)\"},\"error_x\":{\"color\":\"rgba(0,255,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780,5700,6800,8120,9690,11600,13800,16500,19600,23400,28000,33400],\"y\":[312419448.366389,385351056.431728,471148268.166627,578918826.326156,705974303.401164,854248163.896793,1036644984.5829,1246719306.34291,1488172631.58266,1774864524.76873,2111811410.35045,2494648609.70267,2933451356.6919,3445293511.6076,3967080227.3532,4652776792.20054,5349008655.74657,6173096213.77083,7069841110.81392,8078961252.50215,9224222768.95316,10470473433.5253,11899499055.3584,13483573073.9397,15217966028.2721,17145873975.4698,19206938801.2459,21631865346.764,24114933506.0046,26698781750.6411,29608641544.3531,32473402413.2591,35159968089.2428,38069061610.2832,40682707954.7465,43033955390.8667,45194056819.5173,46773175969.5831,48098948794.0127,49202181771.99,49253557708.629,49514508626.5539,49437948085.2022,49593419768.7939,49152199997.6104,49236796741.1781,49345818769.07,49851744889.5092,50739346560.0147,52034032777.8366,54639181406.9404,60187787579.1295,71555723556.0629,82881277325.7914,88917545795.0147,96005719192.8287,105839209375.742,117299109036.693,132442216723.914,151836026614.602,175375369091.261,201164702422.281,227847482609.133,251787697524.455,266545579220.752,267780142004.602,245914659113.941,206811634379.188,151889947131.731,96525051287.2039,50137504157.4266,19017281468.1576],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2000\",\"line\":{\"color\":\"rgba(160,141,251,1)\",\"simplify\":false},\"name\":\"Saithe\",\"marker\":{\"color\":\"rgba(160,141,251,1)\",\"line\":{\"color\":\"rgba(160,141,251,1)\"}},\"textfont\":{\"color\":\"rgba(160,141,251,1)\"},\"error_y\":{\"color\":\"rgba(160,141,251,1)\"},\"error_x\":{\"color\":\"rgba(160,141,251,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4],\"y\":[2438195021.96185,3019293031.47586,3713069859.35058,4598606789.80416,5665466019.12021,6943375837.66592,8557539626.16051,10483155465.2084,12785472232.4603,15629492239.7333,19122164170.6804,23299716844.6321,28343885591.9624,34529507903.2239,41329552986.5391,50466178962.6245,60458113613.1952,72790160674.2828,87625590468.8582,110064204910.262,157899513331.51,231554585811.099,288564689771.074,325780340312.749,352821616171.605,372631623948.564,382867526798.199,386130819360.343,374510470641.432,347322592083.329,305445531603.215,242681223986.256,156425077908.629,30730893506.3539],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2000\",\"line\":{\"color\":\"rgba(98,55,226,1)\",\"simplify\":false},\"name\":\"Sandeel\",\"marker\":{\"color\":\"rgba(98,55,226,1)\",\"line\":{\"color\":\"rgba(98,55,226,1)\"}},\"textfont\":{\"color\":\"rgba(98,55,226,1)\"},\"error_y\":{\"color\":\"rgba(98,55,226,1)\"},\"error_x\":{\"color\":\"rgba(98,55,226,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973],\"y\":[130196446.218296,155733155.813703,184725330.484416,220331104.611297,261006690.764323,307073667.28853,362706684.330269,425123240.982792,495286424.129928,577486408.365457,672971469.125839,780143419.237293,902158276.845678,1044307382.73648,1187850068.45178,1379427161.08383,1573866361.09198,1806809933.95874,2063144345.89221,2355969509.94874,2694108026.76171,3069760440.27593,3510151283.87998,4011609349.59865,4578535523.51296,5231684637.7911,5962895218.76905,6857471089.21644,7837682077.61082,8936752861.44496,10256944352.8336,11703398626.2795,13257157599.9097,15108197319.8326,17122858373.4665,19529680467.1367,23472513106.7188,31480938853.4581,40509600390.6988,44581495747.9544,44606624954.4804,43194524995.0172,40136397772.7123,35944066986.6436,30178981121.9248,23969213671.8598,17517343792.4809,11595071781.2519,6707280457.60665,3174430589.81719,1054113488.04143,96111536.8939723],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2000\",\"line\":{\"color\":\"rgba(108,170,114,1)\",\"simplify\":false},\"name\":\"Sole\",\"marker\":{\"color\":\"rgba(108,170,114,1)\",\"line\":{\"color\":\"rgba(108,170,114,1)\"}},\"textfont\":{\"color\":\"rgba(108,170,114,1)\"},\"error_y\":{\"color\":\"rgba(108,170,114,1)\"},\"error_x\":{\"color\":\"rgba(108,170,114,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8],\"y\":[1502975713.13752,1709527461.0748,1925275832.70297,2176887020.2939,2440739987.29931,2713530277.39983,3023995413.89214,3338775486.46012,3658430509.33207,4005673715.51521,4376933571.92876,4750617973.14973,5136230944.30986,5551079847.13939,5887049516.26723,6364442472.18633,6746329046.3869,7169837367.42503,7524197700.28227,7783466130.6812,7889462243.69191,7801043367.1354,7634053631.54527,7413209264.38377,7181289685.93183,7080918232.70135,7609827828.06908,9771054161.28312,10545185012.9786,7223586092.97952,3484704157.92827,1155466760.63535,190118556.869881],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2000\",\"line\":{\"color\":\"rgba(129,95,0,1)\",\"simplify\":false},\"name\":\"Sprat\",\"marker\":{\"color\":\"rgba(129,95,0,1)\",\"line\":{\"color\":\"rgba(129,95,0,1)\"}},\"textfont\":{\"color\":\"rgba(129,95,0,1)\"},\"error_y\":{\"color\":\"rgba(129,95,0,1)\"},\"error_x\":{\"color\":\"rgba(129,95,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390],\"y\":[1128949789.93644,1301745452.77879,1484236862.39254,1696861541.46173,1921285432.73465,2154557145.18346,2419351977.29496,2689089959.80994,2964135408.71817,3263191128.15577,3584144305.23917,3910351977.82591,4250967080.44339,4622333987.88946,4936763117.1539,5382689128.26259,5767734741.10482,6222099275.64531,6682042345.39663,7184099930.98623,7744337999.94554,8329493152.40471,9002892642.93033,9740463315.41502,10541808045.4144,11442653595.7849,12412460435.3877,13625956038.5905,14898896197.8067,16292735317.1034,17986394645.5001,19805374386.0644,21730248539.9429,24090468103.4237,26703022643.2564,30035662900.7258,36120489668.1955,47588146618.1097,58372000849.9553,64371115293.1476,67148992383.1618,69553156103.1817,70868343036.653,71587987824.5844,70130329295.7995,67720852827.0079,63295653253.877,57067777703.7078,48810503295.5071,38566193709.653,27177876969.8077,15569408365.0716,5885134841.02874,289891662.097625],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2000\",\"line\":{\"color\":\"rgba(67,0,121,1)\",\"simplify\":false},\"name\":\"Whiting\",\"marker\":{\"color\":\"rgba(67,0,121,1)\",\"line\":{\"color\":\"rgba(67,0,121,1)\"}},\"textfont\":{\"color\":\"rgba(67,0,121,1)\"},\"error_y\":{\"color\":\"rgba(67,0,121,1)\"},\"error_x\":{\"color\":\"rgba(67,0,121,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true}],\"traces\":[0,1,2,3,4,5,6,7,8,9,10,11,12]},{\"name\":\"2001\",\"data\":[{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780,5700,6800,8120,9690,11600,13800,16500,19600,23400,28000,33400],\"y\":[14935137.0151288,18201074.8051304,21994141.3022519,26721098.4278409,32235370.7083386,38609942.1871393,46411660.6685863,55335830.8012262,65544995.2492485,77652760.1959796,91887782.2148765,108087450.527549,126737323.56251,148644465.15104,171184260.801109,201131653.927705,232032460.567744,269178581.933085,310444871.125371,357902024.556798,413041552.070647,474832373.026389,547666433.088992,631225065.075418,726459397.43921,836979641.359727,961882029.652165,1115487737.59118,1286011196.63393,1479829929.33944,1715472960.14682,1979423859.97081,2271036012.45644,2626100918.52784,3022228101.87885,3472515527.81998,3995584492.85301,4568782882.60839,5231522056.59933,5999943117.11751,6771910140.41336,7707453214.43166,8733680726.60108,9948428252.39884,11179938983.5403,12654908578.6666,14255043986.668,16071567549.4434,18094948712.1151,20297170047.4665,22860419267.2083,25657881816.1135,28966477709.1324,34202818629.3995,43205689921.0177,54517019425.5136,62362933375.7755,67123655546.0484,71121303334.0693,74662925196.2283,77514972705.9545,78966266480.7313,79115285097.797,77738719297.3353,74291515258.1103,69083659062.3276,60746635684.6568,50953779560.4858,39046569662.224,27121698697.4396,16110863563.5197,7300521864.8558],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2001\",\"line\":{\"color\":\"rgba(20,35,0,1)\",\"simplify\":false},\"name\":\"Cod\",\"marker\":{\"color\":\"rgba(20,35,0,1)\",\"line\":{\"color\":\"rgba(20,35,0,1)\"}},\"textfont\":{\"color\":\"rgba(20,35,0,1)\"},\"error_y\":{\"color\":\"rgba(20,35,0,1)\"},\"error_x\":{\"color\":\"rgba(20,35,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337],\"y\":[24054561.6643902,28519171.6368243,33506499.5247024,39553206.5033176,46332489.4688029,53851842.6906154,62778224.1620093,72546650.8673671,83243865.5130327,95494060.0790963,109377795.852032,124506400.548179,141258375.635664,160310505.267624,178673160.417832,203240932.379658,227115986.755017,255402877.535865,285801352.651507,320067072.376111,359308598.302759,402447244.503468,453081626.951346,510785693.905994,576329034.291981,652710619.149308,739818186.028878,851888616.703504,999089763.08456,1275829862.33569,1796345539.54384,2299516834.63731,2692162828.62828,3110350166.61278,3568027734.57786,4089969785.83775,4697661728.03878,5358645912.94731,6106284526.12339,6934768439.59707,7685581277.53772,8478499216.37905,9131330167.6954,9583728239.54082,9372938136.99223,6616932301.40297],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2001\",\"line\":{\"color\":\"rgba(14,67,0,1)\",\"simplify\":false},\"name\":\"Dab\",\"marker\":{\"color\":\"rgba(14,67,0,1)\",\"line\":{\"color\":\"rgba(14,67,0,1)\"}},\"textfont\":{\"color\":\"rgba(14,67,0,1)\"},\"error_y\":{\"color\":\"rgba(14,67,0,1)\"},\"error_x\":{\"color\":\"rgba(14,67,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683],\"y\":[3302343707.16114,3731647933.79094,4168376583.87266,4667192055.16607,5173526890.37109,5677407267.63145,6235319847.03995,6774059058.3705,7292491279.70023,7833015679.12493,8384409945.69392,8902473770.8322,9404076759.43993,9919192359.97019,10257434022.9622,10807716158.9361,11169170280.9424,11598167600.1602,11967266308.0238,12341141930.9397,12741602634.0486,13110195695.2004,13544413025.2314,13998005436.7849,14464521051.9959,14985857074.8682,15512893340.2245,16233894592.4417,16919734431.915,17637643240.0616,18581607717.4436,19674951836.4257,21571693990.7376,26128717126.3132,30615962398.6077,31536622928.8452,30645103510.7693,28862252473.8304,26703936520.0702,24249671362.4333,21189202039.0119,18215203146.9236,15176510983.1099,12344541119.1934,9594364482.13052,7254475245.78419,5263547239.00283,3686954974.3587,2474437565.7617,1344699519.18004],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2001\",\"line\":{\"color\":\"rgba(238,0,83,1)\",\"simplify\":false},\"name\":\"Gurnard\",\"marker\":{\"color\":\"rgba(238,0,83,1)\",\"line\":{\"color\":\"rgba(238,0,83,1)\"}},\"textfont\":{\"color\":\"rgba(238,0,83,1)\"},\"error_y\":{\"color\":\"rgba(238,0,83,1)\"},\"error_x\":{\"color\":\"rgba(238,0,83,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780],\"y\":[3152469026.76237,3667990192.08866,4224227159.57293,4882833127.63231,5595645727.3213,6357679474.93129,7240248628.14337,8169018215.67004,9147786044.35608,10237338887.7592,11435214165.2851,12690491553.4329,14032556291.5965,15515595624.779,16841034515.4675,18646685771.6759,20269611144.91,22156236997.6467,24077101730.6813,26156213379.2313,28447517148.8796,30825022049.4423,33518883206.1517,36432804632.7776,39555262894.7204,43009191094.5883,46665875915.7643,51116036697.0407,55678907806.7085,60547995095.5978,66335920776.9788,72328741758.8788,78359028265.0612,85433725485.0812,92487812707.8088,99636731505.3213,107040189472.404,113706079355.931,120335847277.652,127351311317.597,135217907333.01,154471045098.43,173359245588.16,173688471638.616,161038613108.003,146531665717.255,130607027747.774,115069057531.506,100201647272.148,86226851546.6697,74076298252.7415,63156665698.8292,53732005433.9189,46082572240.0118,38498300071.6725,31854993765.8347,25295059290.2195,18047204937.5001,10791722782.9764,4520146307.32057,588559953.506653],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2001\",\"line\":{\"color\":\"rgba(180,41,121,1)\",\"simplify\":false},\"name\":\"Haddock\",\"marker\":{\"color\":\"rgba(180,41,121,1)\",\"line\":{\"color\":\"rgba(180,41,121,1)\"}},\"textfont\":{\"color\":\"rgba(180,41,121,1)\"},\"error_y\":{\"color\":\"rgba(180,41,121,1)\"},\"error_x\":{\"color\":\"rgba(180,41,121,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337],\"y\":[2324189764.1278,2704294859.50489,3116561423.02105,3607389303.36981,4142343160.41199,4718921334.49812,5391515718.6948,6106572754.35436,6868526711.30896,7724987956.36652,8676727721.32078,9687783849.45713,10783184527.4527,12007985680.862,13133698014.8189,14660870750.7155,16075519541.263,17733602386.4553,19458276769.9361,21354512559.5406,23473979153.9265,25720846378.4118,28295769011.0158,31129869878.2983,34224268951.141,37697969778.0794,41452639203.5324,46027780132.0607,50839370577.6443,56075854530.161,62328722834.7892,68961642423.9471,75837849679.5791,83974348158.5964,92408577228.7214,101433620475.22,112123534761.585,128624020915.285,172979128952.145,253003349977.325,270813552741.255,220375446192.897,149289649955.269,84603696834.2694,36005308041.3656,8867290893.84219],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2001\",\"line\":{\"color\":\"rgba(222,83,255,1)\",\"simplify\":false},\"name\":\"Herring\",\"marker\":{\"color\":\"rgba(222,83,255,1)\",\"line\":{\"color\":\"rgba(222,83,255,1)\"}},\"textfont\":{\"color\":\"rgba(222,83,255,1)\"},\"error_y\":{\"color\":\"rgba(222,83,255,1)\"},\"error_x\":{\"color\":\"rgba(222,83,255,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117],\"y\":[15179895962.1169,16989069225.0686,18763108755.6739,20734511650.4902,22643955326.1352,24438791494.8158,26352094404.9252,28063353873.4377,29571519312.1611,31052288528.9004,32461711929.4546,33638573757.5862,34666154312.498,35670839770.5934,35996522252.9155,37036009073.0827,37410615566.7374,38016338204.3661,38439897910.1444,38903164122.5415,39474730512.9378,39968181136.4458,40671818199.4542,41430371523.5409,42208265908.3714,43105333260.1249,43961088947.1289,45397005847.4956,47139795090.0448,51863005558.9145,67171310520.5674,84313006773.9836,80142104134.9403,64691413463.4656,47150615010.6678,31104712135.9379,17945560134.0507,8263358808.34292,2456320496.40951,84888225.1720465],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2001\",\"line\":{\"color\":\"rgba(141,166,0,1)\",\"simplify\":false},\"name\":\"N.pout\",\"marker\":{\"color\":\"rgba(141,166,0,1)\",\"line\":{\"color\":\"rgba(141,166,0,1)\"}},\"textfont\":{\"color\":\"rgba(141,166,0,1)\"},\"error_y\":{\"color\":\"rgba(141,166,0,1)\"},\"error_x\":{\"color\":\"rgba(141,166,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350],\"y\":[95825076332.8129,103472066176.986,110310053486.707,117710361315.759,124160420826.827,129441803055.677,134832498325.61,138709521189.239,141198479104.455,143239179608.455,144682122313.693,144905037537.626,144400282545.543,143785719275.48,140558818737.709,140289114086.693,137712853795.882,136299367544.584,134590257462.317,133443956294.533,133141538347.283,133116691652.157,134408122050.338,136569894689.753,139579730219.237,143883664122.307,149054604408.953,156959044135.922,165454940139.463,175210389540.18,188001017380.938,201794888685.396,216246544212.242,234251178780.924,253007455718.492,273055551551.43,295537717833.723,321401954333.316,368030327560.821,444377763599.868,481977306781.854,480150355275.4,456434467634.306,424302136974.787,379249397817.219,332514488038.98,282208152307.587,232859231687.24,186047533006.974,143209181522.805,106586101056.144,75581402360.9531,50760179897.9216,32152113262.2171,18215870716.8983,9120104517.21095,3697271532.70898,983264311.450196,67104795.3805028],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2001\",\"line\":{\"color\":\"rgba(0,121,87,1)\",\"simplify\":false},\"name\":\"Plaice\",\"marker\":{\"color\":\"rgba(0,121,87,1)\",\"line\":{\"color\":\"rgba(0,121,87,1)\"}},\"textfont\":{\"color\":\"rgba(0,121,87,1)\"},\"error_y\":{\"color\":\"rgba(0,121,87,1)\"},\"error_x\":{\"color\":\"rgba(0,121,87,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82],\"y\":[47175041053.883,45684623729.3707,43984777733.6705,42701412994.8704,41296022171.9937,39791177942.9062,38626187362.0478,37343126508.4586,36024270294.9774,34919834041.8134,33972579344.1361,33018786235.5295,32151414239.0581,31473934914.6937,30404429442.3605,30110515784.7507,29412939251.2321,29015294825.5723,28565236257.8541,28206615918.7229,27961099902.7451,27674036519.349,27527383669.3386,27392537162.1038,27232051231.0991,27100413861.8966],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2001\",\"line\":{\"color\":\"rgba(0,255,0,1)\",\"simplify\":false},\"name\":\"Resource\",\"marker\":{\"color\":\"rgba(0,255,0,1)\",\"line\":{\"color\":\"rgba(0,255,0,1)\"}},\"textfont\":{\"color\":\"rgba(0,255,0,1)\"},\"error_y\":{\"color\":\"rgba(0,255,0,1)\"},\"error_x\":{\"color\":\"rgba(0,255,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780,5700,6800,8120,9690,11600,13800,16500,19600,23400,28000,33400],\"y\":[314567715.397695,388431325.401385,475513524.702588,585115900.57844,714671774.848064,866302802.838913,1053303088.41317,1269371554.95584,1518488623.58367,1815001136.70258,2164214477.88638,2561668765.60259,3017456579.18418,3548567101.69002,4088901752.14583,4795383951.13219,5507391263.49304,6342248168.80991,7238500355.69277,8231130435.47388,9337172182.89667,10512875329.8625,11831494411.6649,13255257348.7521,14770533233.672,16411508883.7938,18115132098.7967,20095958030.1887,22070223394.619,24091373246.0929,26379920141.9101,28628802692.6021,30758897294.4293,33161300595.5732,35425364014.0277,37620641927.1775,39843142990.1051,41770626413.265,43698703448.5864,45652492064.8511,46828775550.4529,48367673485.2357,49710339629.1653,51383638640.8019,52484423127.1176,54144637588.842,55797405681.025,57823983831.6685,60183053438.9255,62872794139.1894,66962290662.2872,74452914008.4749,88765599968.6149,102085715253.441,107458192128.321,112469255461.067,118879994418.291,125301159987.664,134092375206.782,146118387408.292,161977228882.404,181142952820.366,204014792269.497,228934480394.533,250957733266.924,265277647843.981,259151783757.317,233028964252.921,182820198668.972,123304001148.69,67256149298.3449,26469075200.6917],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2001\",\"line\":{\"color\":\"rgba(160,141,251,1)\",\"simplify\":false},\"name\":\"Saithe\",\"marker\":{\"color\":\"rgba(160,141,251,1)\",\"line\":{\"color\":\"rgba(160,141,251,1)\"}},\"textfont\":{\"color\":\"rgba(160,141,251,1)\"},\"error_y\":{\"color\":\"rgba(160,141,251,1)\"},\"error_x\":{\"color\":\"rgba(160,141,251,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4],\"y\":[2450306267.86824,3034798264.70939,3732528208.52782,4622834369.02236,5694954525.23118,6978342424.13919,8598172299.34448,10528541911.7393,12833665572.2818,15677311944.1054,19164121862.0791,23326978782.2917,28343509746.0474,34482764232.1016,41211865396.3989,50239576204.6451,60078540943.8557,72192317442.1262,86721622382.6323,108665846361.264,155400766286.758,226867849581.341,281017115431.412,314660573238.871,336864724368.214,349973480456.02,351350156282.338,343290160282.821,319371022601.857,281016399003.554,231769871951.854,170606668706.012,101049420523.133,18703531513.2109],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2001\",\"line\":{\"color\":\"rgba(98,55,226,1)\",\"simplify\":false},\"name\":\"Sandeel\",\"marker\":{\"color\":\"rgba(98,55,226,1)\",\"line\":{\"color\":\"rgba(98,55,226,1)\"}},\"textfont\":{\"color\":\"rgba(98,55,226,1)\"},\"error_y\":{\"color\":\"rgba(98,55,226,1)\"},\"error_x\":{\"color\":\"rgba(98,55,226,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973],\"y\":[129868899.748731,155438904.042356,184451280.002904,220031750.428298,260595456.541288,306400223.350326,361522271.052801,423065835.629254,491843310.462129,571927950.054274,664312272.119472,767141606.247615,883221806.280379,1017377494.45898,1151045889.44129,1329096361.63334,1507471522.28811,1720159707.98625,1952415646.24056,2216525684.36053,2520667424.08909,2857589392.42048,3252883716.93572,3703473579.40393,4214106047.28075,4804861524.05279,5469586133.36765,6288334236.03479,7192379444.16852,8215591214.76328,9456627656.68727,10834302918.0222,12338060998.4547,14153780686.979,16168302228.3223,18612579147.3433,22620503525.6567,30783446521.7153,40332410793.0059,45228420153.8754,46047864122.3961,45244633099.8146,42500192815.7958,38317049162.3696,32249972090.8183,25564125321.2071,18553284190.6508,12114994549.2733,6849107451.68621,3130441146.84048,993189024.148558,86814148.8153125],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2001\",\"line\":{\"color\":\"rgba(108,170,114,1)\",\"simplify\":false},\"name\":\"Sole\",\"marker\":{\"color\":\"rgba(108,170,114,1)\",\"line\":{\"color\":\"rgba(108,170,114,1)\"}},\"textfont\":{\"color\":\"rgba(108,170,114,1)\"},\"error_y\":{\"color\":\"rgba(108,170,114,1)\"},\"error_x\":{\"color\":\"rgba(108,170,114,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8],\"y\":[1445908339.41231,1645138445.56559,1852861205.31906,2094478229.31635,2346941783.91194,2606733808.94874,2901087901.95007,3197608514.24392,3496590274.1217,3819562013.80902,4162984825.33165,4506433407.19021,4859342262.83188,5238668663.57545,5543399664.15102,5982304660.07613,6334055330.6279,6730090230.89584,7070562535.85124,7337370226.66212,7480370594.07524,7455458331.42691,7359967248.54281,7205015669.23074,7021496585.43655,6939956134.46834,7429788553.50403,9361447258.24187,9691902139.71802,6334636172.8491,2972009387.49256,989938375.583455,168735586.924016],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2001\",\"line\":{\"color\":\"rgba(129,95,0,1)\",\"simplify\":false},\"name\":\"Sprat\",\"marker\":{\"color\":\"rgba(129,95,0,1)\",\"line\":{\"color\":\"rgba(129,95,0,1)\"}},\"textfont\":{\"color\":\"rgba(129,95,0,1)\"},\"error_y\":{\"color\":\"rgba(129,95,0,1)\"},\"error_x\":{\"color\":\"rgba(129,95,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390],\"y\":[1135829151.17564,1310762789.53156,1495536183.87812,1710626690.45388,1937397060.97299,2172646351.07801,2438961198.03695,2709203353.02592,2983367373.56314,3279847259.07368,3595994907.24148,3914575021.86886,4244243108.13209,4600720453.64497,4896339044.93112,5317600176.51554,5673453170.14379,6092093724.09988,6510558831.01165,6964509852.70452,7469414061.29666,7993413301.32886,8597905657.2212,9260450707.39663,9981946023.1138,10797910792.3727,11681632835.5639,12799411226.9553,13981651661.5025,15289759139.7022,16895312128.8442,18638149091.5876,20502700779.3725,22802006488.5089,25364419797.6623,28638202869.3563,34577745445.3032,45746638316.0334,56322767402.3941,62272426513.5352,65036461778.9723,67351361755.9362,68518892717.5981,69002810409.2309,67264600035.9264,64488467072.6818,59707052803.6757,53247200889.3919,45075459352.1883,35393506003.86,24991404271.5018,14509439047.6941,5622843764.1968,284307043.22138],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2001\",\"line\":{\"color\":\"rgba(67,0,121,1)\",\"simplify\":false},\"name\":\"Whiting\",\"marker\":{\"color\":\"rgba(67,0,121,1)\",\"line\":{\"color\":\"rgba(67,0,121,1)\"}},\"textfont\":{\"color\":\"rgba(67,0,121,1)\"},\"error_y\":{\"color\":\"rgba(67,0,121,1)\"},\"error_x\":{\"color\":\"rgba(67,0,121,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true}],\"traces\":[0,1,2,3,4,5,6,7,8,9,10,11,12]},{\"name\":\"2002\",\"data\":[{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780,5700,6800,8120,9690,11600,13800,16500,19600,23400,28000,33400],\"y\":[14756097.7251969,17980640.8146179,21726082.2117237,26394411.419006,31840979.1195943,38137917.6232985,45844978.3912246,54660695.8271028,64744650.862304,76701337.98193,90754120.1855693,106738872.509453,125130445.239326,146719492.136798,168908413.607676,198373442.66645,228736537.866485,265204543.460149,305669068.015389,352155285.634175,406113451.125333,466511304.418279,537644169.359711,619173839.736293,712008787.084011,819660658.054162,941216480.148264,1090655019.40918,1256420935.73604,1444746009.53734,1673737737.66794,1930263366.53988,2213807776.85426,2559421010.12806,2945507674.36164,3385184634.81481,3897071152.39758,4459658049.88513,5112112684.98557,5871108946.32904,6637566002.87919,7569042177.04656,8595031684.08209,9812773683.98839,11053754397.6696,12542638907.0329,14163444803.652,16007770878.2805,18067737354.6662,20317334068.1906,22941929259.2301,25818881558.0545,29233255926.1558,34632632804.3292,43935076509.9529,55746461758.0916,64181797008.2247,69545515960.4047,74146954557.3039,78222384576.2179,81434296890.3294,82947221468.3551,82813072558.8748,80811544326.7209,76470505713.481,70272229776.6396,61018989968.8433,50567634424.7773,38338634235.2615,26393595250.4382,15567994335.0091,7019686112.3205],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2002\",\"line\":{\"color\":\"rgba(20,35,0,1)\",\"simplify\":false},\"name\":\"Cod\",\"marker\":{\"color\":\"rgba(20,35,0,1)\",\"line\":{\"color\":\"rgba(20,35,0,1)\"}},\"textfont\":{\"color\":\"rgba(20,35,0,1)\"},\"error_y\":{\"color\":\"rgba(20,35,0,1)\"},\"error_x\":{\"color\":\"rgba(20,35,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337],\"y\":[22738527.2020168,26977722.4991023,31739186.3620467,37544726.1155211,44101794.3245427,51436435.6101725,60208927.936225,69905305.0818908,80633288.4795454,93024490.6769545,107189337.749435,122773433.284479,140167101.59542,160057855.534679,179453935.520362,205262031.799574,230517201.4142,260330328.749795,292297955.222059,328112874.19409,368786431.246882,413047980.049716,464384075.796868,522098764.736349,586670446.2067,660784342.130578,743892466.099582,849718695.822817,987315722.374272,1246766089.0102,1730806734.99729,2180522848.46372,2512439238.36798,2860775582.86934,3242908342.0144,3687615306.20669,4222887630.3467,4831542552.56224,5559132271.30482,6419036401.28492,7280489265.6535,8261896130.2377,9175244418.00852,9911861929.58983,9901813709.9593,7006608289.31804],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2002\",\"line\":{\"color\":\"rgba(14,67,0,1)\",\"simplify\":false},\"name\":\"Dab\",\"marker\":{\"color\":\"rgba(14,67,0,1)\",\"line\":{\"color\":\"rgba(14,67,0,1)\"}},\"textfont\":{\"color\":\"rgba(14,67,0,1)\"},\"error_y\":{\"color\":\"rgba(14,67,0,1)\"},\"error_x\":{\"color\":\"rgba(14,67,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683],\"y\":[3235233372.35057,3654089962.72084,4080046948.64558,4566636789.83889,5060491542.47883,5551944494.30858,6096351746.40364,6622303440.1347,7128941535.61185,7658025014.69214,8198963158.66289,8708951888.53552,9204884374.2363,9716449812.05028,10057232323.8488,10608383251.9013,10976263602.0198,11411583770.2641,11787610717.2796,12165898972.5539,12565369554.4949,12925303833.3623,13338418129.4279,13755575676.0233,14167215525.8361,14611753041.9892,15039641721.201,15632518050.6819,16169591231.4796,16719705024.1021,17471281147.8831,18356253164.2154,19985904216.8221,24071477829.5678,28134592724.1289,29055798745.5689,28482948814.0763,27240787004.9977,25754223895.261,24019149924.1521,21619147039.4874,19148438443.6024,16391828070.2883,13618932130.8685,10716121585.6117,8102115369.03101,5777353288.9301,3885176078.86202,2440622597.69078,1234559475.13119],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2002\",\"line\":{\"color\":\"rgba(238,0,83,1)\",\"simplify\":false},\"name\":\"Gurnard\",\"marker\":{\"color\":\"rgba(238,0,83,1)\",\"line\":{\"color\":\"rgba(238,0,83,1)\"}},\"textfont\":{\"color\":\"rgba(238,0,83,1)\"},\"error_y\":{\"color\":\"rgba(238,0,83,1)\"},\"error_x\":{\"color\":\"rgba(238,0,83,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780],\"y\":[3144510090.98357,3654496412.98869,4202790887.5688,4849957355.5694,5547137014.55663,6288439345.38191,7143248776.9755,8036865129.00553,8972072288.3148,10007452359.2382,11139353765.2372,12317375345.4306,13569867470.9519,14949129206.3882,16168584893.2226,17842145418.3785,19335625528.4964,21078394842.438,22854227446.7425,24784065014.8478,26921736794.609,29150500136.023,31689836883.0651,34449169485.3119,37416316339.8246,40703935614.3671,44183948271.4605,48406809967.1956,52716948396.804,57286401781.9493,62686233544.7815,68238585320.8808,73792284972.9677,80315126802.5003,86843256610.797,93550522627.9988,100677804299.291,107405705908.98,114524321934.6,122590732316.51,132292952447.261,154700133294.927,179306953924.752,186813406397.08,180913384894.784,172324677833.083,160770117607.016,147841867646.637,133584006721.411,118167799720.398,102999174770.076,87633124619.2294,73012569981.5687,60222682098.3696,47787681532.4931,37510359587.7175,28630096549.6121,20145593977.7493,12263439535.2821,5389878388.62725,747267308.193844],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2002\",\"line\":{\"color\":\"rgba(180,41,121,1)\",\"simplify\":false},\"name\":\"Haddock\",\"marker\":{\"color\":\"rgba(180,41,121,1)\",\"line\":{\"color\":\"rgba(180,41,121,1)\"}},\"textfont\":{\"color\":\"rgba(180,41,121,1)\"},\"error_y\":{\"color\":\"rgba(180,41,121,1)\"},\"error_x\":{\"color\":\"rgba(180,41,121,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337],\"y\":[2256085172.47633,2624516045.17451,3024677245.51842,3501898249.26208,4023129556.11618,4586368362.96236,5245006944.3806,5947601378.22687,6699092922.48454,7546671901.04417,8492065578.52914,9501059455.47808,10599115231.9039,11831619399.1005,12974101403.7818,14521615118.0845,15966587029.0543,17661790075.0932,19431024328.5221,21377320194.6535,23549874702.9228,25848223620.4545,28467447359.4752,31329459971.1791,34423484885.6891,37854362971.15,41505846973.7119,45897586301.7727,50424287513.0816,55256991959.4817,60963514233.4165,66912610508.248,72986483223.5125,80190764974.7814,87647277165.1208,95711931521.0123,105496517046.965,121055815129.591,163795589451.045,244335372199.273,271547537157.6,232694546748.771,167386674408.033,100932973863.326,45525262370.7158,11772699019.1194],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2002\",\"line\":{\"color\":\"rgba(222,83,255,1)\",\"simplify\":false},\"name\":\"Herring\",\"marker\":{\"color\":\"rgba(222,83,255,1)\",\"line\":{\"color\":\"rgba(222,83,255,1)\"}},\"textfont\":{\"color\":\"rgba(222,83,255,1)\"},\"error_y\":{\"color\":\"rgba(222,83,255,1)\"},\"error_x\":{\"color\":\"rgba(222,83,255,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117],\"y\":[15399294174.3868,17176526806.8944,18895395483.7546,20786354295.6222,22585186124.0403,24238650251.4232,25977739106.8145,27486990323.5,28771652046.3362,30009797041.5603,31165910055.9707,32095407080.2884,32890593336.2392,33683293629.5969,33867440924.8684,34766297705.8704,35093750821.5421,35700591298.9166,36206651048.4872,36826481380.8773,37630731448.427,38445799069.7789,39551294423.7446,40801581016.1358,42162469383.3199,43734340049.8407,45355664131.0042,47675735813.1155,50447272541.0172,56678506011.6051,75401402294.6054,97906113139.5161,96482730748.7522,80702203261.644,60864683571.3374,41459248703.6158,24632023258.6944,11657991598.0581,3569011728.56649,127359250.434019],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2002\",\"line\":{\"color\":\"rgba(141,166,0,1)\",\"simplify\":false},\"name\":\"N.pout\",\"marker\":{\"color\":\"rgba(141,166,0,1)\",\"line\":{\"color\":\"rgba(141,166,0,1)\"}},\"textfont\":{\"color\":\"rgba(141,166,0,1)\"},\"error_y\":{\"color\":\"rgba(141,166,0,1)\"},\"error_x\":{\"color\":\"rgba(141,166,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350],\"y\":[86597766768.7379,94242363290.9862,101466706602.135,109570614116.768,117189726158.046,124110172519.959,131543301957.446,137887169756.574,143170419758.33,148247856727.79,152881974617.963,156296004338.702,158872268037.632,161169221245.424,160235491808.101,162289189210.495,161224166763.134,160981703974.682,159807016674.523,158678593939.16,157909606766.846,156813480998.232,156603535879.751,156734917720.466,157171012721.765,158400634083.212,159937131130.158,163744822091.414,167518249890.472,171991252004.981,178893985404.469,186263743848.557,193910222128.931,204526322003.741,215721839851.608,228157848242.271,242967189677.483,261092009361.92,296805615017.949,358048085432.556,391190728514.37,395641004536.521,384189033464.708,366313363289.749,336402516976.025,302823572070.071,263069338916.319,221062431460.902,178692597152.409,138130466041.538,102469806577.638,71928406882.8706,47544791518.7351,29512835226.7864,16345428467.607,8001163582.08943,3182356397.53513,835211056.685009,56566933.2523988],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2002\",\"line\":{\"color\":\"rgba(0,121,87,1)\",\"simplify\":false},\"name\":\"Plaice\",\"marker\":{\"color\":\"rgba(0,121,87,1)\",\"line\":{\"color\":\"rgba(0,121,87,1)\"}},\"textfont\":{\"color\":\"rgba(0,121,87,1)\"},\"error_y\":{\"color\":\"rgba(0,121,87,1)\"},\"error_x\":{\"color\":\"rgba(0,121,87,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82],\"y\":[46974283823.7624,45544771970.7229,43901621495.9195,42669329447.928,41310574451.1302,39847677126.3804,38720934468.2733,37472136521.4549,36183813414.4509,35107615642.2182,34186640384.2675,33256378431.2061,32410335875.2031,31752779199.9282,30696133446.9053,30418528402.8103,29728552464.3295,29336055905.1592,28883841518.428,28516079903.7998,28253255196.4654,27937622806.9714,27751494581.6984,27563718139.8983,27335924165.7413,27122841224.0139],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2002\",\"line\":{\"color\":\"rgba(0,255,0,1)\",\"simplify\":false},\"name\":\"Resource\",\"marker\":{\"color\":\"rgba(0,255,0,1)\",\"line\":{\"color\":\"rgba(0,255,0,1)\"}},\"textfont\":{\"color\":\"rgba(0,255,0,1)\"},\"error_y\":{\"color\":\"rgba(0,255,0,1)\"},\"error_x\":{\"color\":\"rgba(0,255,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780,5700,6800,8120,9690,11600,13800,16500,19600,23400,28000,33400],\"y\":[315906093.082868,389847386.769428,476863876.508947,586189739.030417,715128934.801241,865672138.142004,1050947810.62994,1264498002.87383,1510169207.1325,1802146948.6392,2145675632.74583,2536467071.21185,2984866917.2843,3508272273.19243,4042247926.28356,4743194540.5492,5453896479.30634,6292371760.85593,7199888522.65812,8213323995.96096,9351745505.11323,10572768872.0257,11950394894.9068,13445697941.7812,15041592958.3001,16767098805.4667,18549203537.9403,20596090420.8864,22602893042.3605,24608550440.6321,26821783349.44,28914293579.8001,30797133974.6905,32856314770.8086,34681897830.8337,36354141986.9765,37982181671.2605,39282655028.8459,40565979008.264,41882451791.2332,42530239695.9591,43581692577.7302,44553054200.5419,45940146893.4075,46955992337.7615,48633042616.7474,50484540603.0772,52877233683.3083,55802966078.1339,59292604552.7963,64417593325.0277,73319889967.3258,89935884402.0553,106779518321.155,115988102644.217,124785330021.457,134582519903.113,143170644136.136,152509550291.797,162916313125.275,174633230169.461,187307000929.49,202546644500.94,220845859658.35,240198106965.322,258317968518.31,262925491907.66,250911077529.429,211220952438.098,153325012963.317,89619539970.5332,37415782419.1954],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2002\",\"line\":{\"color\":\"rgba(160,141,251,1)\",\"simplify\":false},\"name\":\"Saithe\",\"marker\":{\"color\":\"rgba(160,141,251,1)\",\"line\":{\"color\":\"rgba(160,141,251,1)\"}},\"textfont\":{\"color\":\"rgba(160,141,251,1)\"},\"error_y\":{\"color\":\"rgba(160,141,251,1)\"},\"error_x\":{\"color\":\"rgba(160,141,251,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4],\"y\":[2429095120.34255,3008593386.53903,3700749245.86233,4584499414.79679,5649563281.09185,6925653893.30943,8537665503.66642,10460748208.169,12759650499.4979,15598343131.4303,19082315887.5048,23245623005.8257,28266234440.2566,34412915157.0195,41152701432.6052,50188455095.9776,60027811358.2924,72120065235.6586,86583937271.2658,108364018017.375,154608956208.188,224735298968.913,276550749368.229,306953003734.496,325004624559.54,333121796790.203,328967593607.434,314876992547.907,285172322112.305,241835661521.875,189262340586.95,129226987655.2,68962175651.4277,11551974803.4225],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2002\",\"line\":{\"color\":\"rgba(98,55,226,1)\",\"simplify\":false},\"name\":\"Sandeel\",\"marker\":{\"color\":\"rgba(98,55,226,1)\",\"line\":{\"color\":\"rgba(98,55,226,1)\"}},\"textfont\":{\"color\":\"rgba(98,55,226,1)\"},\"error_y\":{\"color\":\"rgba(98,55,226,1)\"},\"error_x\":{\"color\":\"rgba(98,55,226,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973],\"y\":[123351511.436994,147864483.754513,175869959.968461,210450937.723305,250229407.214273,295603032.008159,350693157.69554,412921685.934613,483290710.315971,566039535.418443,662427912.574743,770838680.415342,894237162.640319,1037615566.43464,1181926332.65725,1372967767.79356,1564988035.56393,1792390377.33766,2038832219.05615,2315706012.1137,2629755272.45854,2971208540.1395,3364089281.54883,3802156103.70864,4287140382.66378,4836263583.99545,5440290189.65085,6175835214.03833,6972565143.06431,7863581374.87395,8943845314.53326,10138604567.2685,11444977343.8743,13044313142.8801,14843416516.6779,17071201393.847,20799758210.6704,28530643522.2783,37946309593.9724,43446053594.4018,45334790035.0668,45742882738.2827,44124856372.0601,40771247693.0133,35033716587.2093,28198513635.4825,20640864889.2044,13483625349.777,7548054099.35783,3370243894.3146,1027675125.10627,85761318.9402129],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2002\",\"line\":{\"color\":\"rgba(108,170,114,1)\",\"simplify\":false},\"name\":\"Sole\",\"marker\":{\"color\":\"rgba(108,170,114,1)\",\"line\":{\"color\":\"rgba(108,170,114,1)\"}},\"textfont\":{\"color\":\"rgba(108,170,114,1)\"},\"error_y\":{\"color\":\"rgba(108,170,114,1)\"},\"error_x\":{\"color\":\"rgba(108,170,114,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8],\"y\":[1358463202.10901,1547100359.31534,1746097621.92987,1980224592.4442,2228670804.65847,2488917417.78615,2787831284.90577,3095160506.59813,3411430294.58848,3757721120.64727,4130552530.09034,4508956714.92156,4900868384.84096,5321633593.57791,5666038473.28105,6144897082.04008,6530461041.11476,6960080539.52068,7342421435.58098,7685517514.94095,7967523981.85092,8139831532.89657,8276043438.99751,8361423745.08582,8416441880.61966,8599224041.37686,9549167214.69785,12601346683.0361,13691217060.2276,9225113183.12084,4353367677.47139,1436872117.45182,244085312.367673],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2002\",\"line\":{\"color\":\"rgba(129,95,0,1)\",\"simplify\":false},\"name\":\"Sprat\",\"marker\":{\"color\":\"rgba(129,95,0,1)\",\"line\":{\"color\":\"rgba(129,95,0,1)\"}},\"textfont\":{\"color\":\"rgba(129,95,0,1)\"},\"error_y\":{\"color\":\"rgba(129,95,0,1)\"},\"error_x\":{\"color\":\"rgba(129,95,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390],\"y\":[1103172784.72936,1271816747.56709,1449808369.94166,1657013349.52624,1875388894.00052,2101893894.52376,2358452127.336,2618922336.20901,2883469510.09466,3170097199.23549,3476550020.29834,3786560136.22368,4108976384.00075,4459609374.45552,4754060768.26973,5174068118.92926,5534751171.25473,5961615615.89652,6393910471.1335,6867108807.75644,7397029654.18132,7952439619.81867,8594408294.92864,9300485631.85465,10070799352.8761,10939984129.0383,11879333899.0491,13055079050.7068,14292726274.6035,15651797809.9648,17305337900.0679,19086947397.5398,20978722694.0239,23300441295.4302,25877392597.0246,29171302342.5701,35171601877.7891,46485063255.5535,57268555572.9913,63544727523.0209,66838963517.1754,69967395609.4593,72204453600.1589,73988967229.8278,73559264812.9575,72008694819.6644,68051088910.4239,61825108341.7525,53146518625.5757,42241121422.865,30165569861.8109,17788189429.3984,7075106599.1205,369083381.310045],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2002\",\"line\":{\"color\":\"rgba(67,0,121,1)\",\"simplify\":false},\"name\":\"Whiting\",\"marker\":{\"color\":\"rgba(67,0,121,1)\",\"line\":{\"color\":\"rgba(67,0,121,1)\"}},\"textfont\":{\"color\":\"rgba(67,0,121,1)\"},\"error_y\":{\"color\":\"rgba(67,0,121,1)\"},\"error_x\":{\"color\":\"rgba(67,0,121,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true}],\"traces\":[0,1,2,3,4,5,6,7,8,9,10,11,12]},{\"name\":\"2003\",\"data\":[{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780,5700,6800,8120,9690,11600,13800,16500,19600,23400,28000,33400],\"y\":[14850908.446925,18089588.4669863,21850310.2622471,26537694.8195979,32007174.8792331,38333178.8475539,46081431.4955932,54953620.5410583,65116680.3431854,77187324.9648565,91402008.5087412,107609436.649353,126303997.66514,148302137.757829,170994251.981557,201154806.020314,232338453.693153,269835331.380994,311503759.040822,359390790.586085,414946184.903902,477059050.720081,550032108.838868,633391201.485262,727885091.89523,836861646.062344,959074673.740541,1108357013.78401,1272422106.67762,1457010223.14197,1679609019.62031,1926083546.36672,2195108310.54617,2520468908.20306,2879695997.6243,3284782026.92421,3752891144.26616,4262641041.20441,4851297927.75196,5534464488.64929,6219655790.37208,7056422050.84689,7980527983.2039,9085103051.09317,10217855094.8565,11591392395.3012,13104003159.9222,14846743740.8444,16819386859.3874,19004863338.798,21584099947.6246,24450139772.4476,27882090580.7068,33290395561.7763,42611301464.7926,54609571706.544,63516986630.9577,69519734303.5849,74854743851.4857,79742191006.9571,83814025885.902,86152746306.0126,86713790993.0063,85149781124.5147,80852078432.7438,74276184390.0922,64209249272.6948,52774140401.5722,39579162540.3741,26929722377.5115,15713086190.2671,7025253708.69811],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2003\",\"line\":{\"color\":\"rgba(20,35,0,1)\",\"simplify\":false},\"name\":\"Cod\",\"marker\":{\"color\":\"rgba(20,35,0,1)\",\"line\":{\"color\":\"rgba(20,35,0,1)\"}},\"textfont\":{\"color\":\"rgba(20,35,0,1)\"},\"error_y\":{\"color\":\"rgba(20,35,0,1)\"},\"error_x\":{\"color\":\"rgba(20,35,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337],\"y\":[23362209.1884651,27637322.1481899,32410606.928417,38205754.5065865,44713912.220326,51953614.405962,60583259.893877,70076933.5559078,80541058.640754,92606324.856006,106383219.995295,121527324.966465,138439738.643709,157817661.218041,176737782.499265,202034072.361774,226882526.852006,256353395.161511,288122276.198006,323898876.184689,364725550.689408,409385322.125083,461365283.415569,520004581.268384,585785956.185999,661374351.422281,746174761.746967,853884440.73348,993498999.956183,1255446233.32792,1742005892.47119,2189302820.96042,2510191911.84638,2836073436.23441,3180307287.38721,3567380044.87489,4021601994.91778,4527625374.78684,5136726831.8871,5880272185.98265,6673172491.67795,7672743640.18926,8756868614.72943,9843080553.328,10284759808.9963,7506938441.15514],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2003\",\"line\":{\"color\":\"rgba(14,67,0,1)\",\"simplify\":false},\"name\":\"Dab\",\"marker\":{\"color\":\"rgba(14,67,0,1)\",\"line\":{\"color\":\"rgba(14,67,0,1)\"}},\"textfont\":{\"color\":\"rgba(14,67,0,1)\"},\"error_y\":{\"color\":\"rgba(14,67,0,1)\"},\"error_x\":{\"color\":\"rgba(14,67,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683],\"y\":[3272698453.39209,3696920340.31343,4128770420.70863,4622710142.3955,5125095326.07825,5626522844.17127,6183523859.89131,6724115825.56036,7247657843.86909,7796724994.62545,8360547852.66265,8895116980.61846,9416865364.76853,9955062870.30634,10317053733.4162,10891824965.9996,11273332831.3295,11716619045.7524,12089234612.3589,12452245760.1457,12823086108.5507,13138361093.2078,13491510560.1522,13831941906.9726,14150175687.3865,14484960020.842,14787528922.823,15236018849.7909,15613209471.2955,15986401939.5362,16532866486.1431,17181192900.1194,18486335036.4654,21964063454.6463,25294993653.1839,25774416344.41,25014242342.0415,23810387014.6485,22563312929.3448,21269864275.0582,19523500530.8059,17779239447.4763,15744057512.5177,13568593375.4282,11055946408.8537,8594076482.41903,6210964990.24116,4131974618.24623,2477749127.4922,1161982245.63912],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2003\",\"line\":{\"color\":\"rgba(238,0,83,1)\",\"simplify\":false},\"name\":\"Gurnard\",\"marker\":{\"color\":\"rgba(238,0,83,1)\",\"line\":{\"color\":\"rgba(238,0,83,1)\"}},\"textfont\":{\"color\":\"rgba(238,0,83,1)\"},\"error_y\":{\"color\":\"rgba(238,0,83,1)\"},\"error_x\":{\"color\":\"rgba(238,0,83,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780],\"y\":[3180335153.63112,3697637643.47082,4254450695.5896,4912368662.68832,5622294191.72465,6378645177.4801,7252285998.10992,8167956949.85896,9128928755.81678,10195273080.6033,11363782660.3787,12583306443.0979,13882691687.4538,15315089615.4468,16585785139.9341,18322783446.7054,19872976574.8742,21673949172.3096,23499063799.6554,25467018857.2448,27626052513.5656,29847901196.0474,32347466679.174,35020245291.1156,37841505265.2144,40912085761.3659,44090026751.4137,47910127166.6784,51707431070.531,55647384797.625,60276632078.0509,64936797756.5194,69504450954.4995,74917300001.8565,80305412664.3042,85886799870.946,91947685698.4405,97819418020.2652,104318260309.187,112067565494.078,121881511114.372,144518039873.505,171310509835.934,184141351645.195,185520683763.86,185325855292.37,182692761769.223,178685896896.428,172592017600.364,163673831331.645,152907268324.7,138822440314.815,122208356208.473,104771098019.933,84449499169.402,65566637816.6032,48402207371.8514,32718189858.8328,19458452847.8423,8666049645.65096,1257628305.70769],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2003\",\"line\":{\"color\":\"rgba(180,41,121,1)\",\"simplify\":false},\"name\":\"Haddock\",\"marker\":{\"color\":\"rgba(180,41,121,1)\",\"line\":{\"color\":\"rgba(180,41,121,1)\"}},\"textfont\":{\"color\":\"rgba(180,41,121,1)\"},\"error_y\":{\"color\":\"rgba(180,41,121,1)\"},\"error_x\":{\"color\":\"rgba(180,41,121,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337],\"y\":[2299688094.42944,2672114078.51958,3075628658.29032,3556153603.07462,4079938031.9859,4644932526.27477,5305222808.55514,6008825057.70779,6761019530.47871,7609767407.47815,8557168529.16279,9569229325.57996,10672158007.2223,11912197905.462,13063841192.4551,14625962336.8132,16087662108.5821,17804278861.6015,19597983174.0524,21571995886.2405,23774976157.9166,26104044069.2278,28754234413.6904,31644203340.6096,34759932502.6655,38203419548.6419,41852567409.3589,46225041780.6953,50702642173.1499,55447802453.2672,61015275690.6419,66753052328.4833,72526995099.9543,79317035578.0568,86229855914.4072,93598835616.2429,102485112367.02,116737974615.417,156560301156.032,231489904949.436,257412599616.847,224751027159.339,168320262032.248,107755383284.474,52274834904.1194,14584894404.3452],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2003\",\"line\":{\"color\":\"rgba(222,83,255,1)\",\"simplify\":false},\"name\":\"Herring\",\"marker\":{\"color\":\"rgba(222,83,255,1)\",\"line\":{\"color\":\"rgba(222,83,255,1)\"}},\"textfont\":{\"color\":\"rgba(222,83,255,1)\"},\"error_y\":{\"color\":\"rgba(222,83,255,1)\"},\"error_x\":{\"color\":\"rgba(222,83,255,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117],\"y\":[15184426278.0207,16974546538.4324,18722440000.1564,20659412484.5033,22526410211.9004,24271691456.6316,26127726524.8007,27778089729.908,29224760800.5366,30644609620.271,31997423150.8654,33127950541.8973,34121928789.046,35106802006.6641,35438974967.3591,36490775434.6815,36904387493.4063,37561211236.4364,38050505760.857,38586965419.1884,39233160019.9964,39796938608.3835,40557329631.4219,41351607318.4753,42135920768.3087,43002528029.0092,43785874960.8366,45099569449.4009,46667275098.5907,51110910957.825,65785595199.3902,82001424987.4796,77704402691.9995,63032030168.1918,46647456611.9298,31588931582.2279,18895402028.5273,9102319676.12468,2861294973.80592,105024536.221566],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2003\",\"line\":{\"color\":\"rgba(141,166,0,1)\",\"simplify\":false},\"name\":\"N.pout\",\"marker\":{\"color\":\"rgba(141,166,0,1)\",\"line\":{\"color\":\"rgba(141,166,0,1)\"}},\"textfont\":{\"color\":\"rgba(141,166,0,1)\"},\"error_y\":{\"color\":\"rgba(141,166,0,1)\"},\"error_x\":{\"color\":\"rgba(141,166,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350],\"y\":[87905861547.6138,94599528522.3916,100620537486.097,107266255973.805,113205163125.746,118284216531.799,123712639240.485,128037667245.354,131384702059.547,134627798473.91,137625464822.118,139759708087.862,141451271468.211,143256341034.345,142593315691.053,145020416941.863,145103315312.684,146358707416.18,147182916206.171,148429251632.879,150356744359.125,152263968079.76,155265327995.826,158780027275.946,162691497379.589,167416629180.316,172342464390.708,179484413393.957,186216477720.465,193168063678.855,202123937327.877,210708466248.17,218548577973.854,228559028576.544,237975398378.779,247548393251.074,258567024833.677,272050769356.09,302363608682.26,356333597006.274,381642991697.596,381236958296.363,369209316659.986,354757733557.195,331551802032.729,306191456069.289,274359357052.98,238301456886.52,198827102548.142,157886933710.276,119404953466.919,84625379448.8096,55884785919.0721,34305815968.9287,18629986470.6268,8892630178.30488,3445204930.85325,884086143.168233,58987500.4999557],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2003\",\"line\":{\"color\":\"rgba(0,121,87,1)\",\"simplify\":false},\"name\":\"Plaice\",\"marker\":{\"color\":\"rgba(0,121,87,1)\",\"line\":{\"color\":\"rgba(0,121,87,1)\"}},\"textfont\":{\"color\":\"rgba(0,121,87,1)\"},\"error_y\":{\"color\":\"rgba(0,121,87,1)\"},\"error_x\":{\"color\":\"rgba(0,121,87,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82],\"y\":[46660460370.4639,45208611433.2266,43557077394.6689,42324839031.2463,40977828226.4963,39537023738.8055,38437977539.3063,37224622272.0711,35977214577.0476,34944528958.6345,34069051596.2109,33185810966.0118,32386912060.2599,31775870383.4438,30763585935.8687,30529799573.9825,29879563609.7179,29524785782.3969,29105947961.7743,28767518705.7352,28529651525.8588,28232291450.295,28058618321.846,27874929670.5657,27641026640.2474,27410804011.3369],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2003\",\"line\":{\"color\":\"rgba(0,255,0,1)\",\"simplify\":false},\"name\":\"Resource\",\"marker\":{\"color\":\"rgba(0,255,0,1)\",\"line\":{\"color\":\"rgba(0,255,0,1)\"}},\"textfont\":{\"color\":\"rgba(0,255,0,1)\"},\"error_y\":{\"color\":\"rgba(0,255,0,1)\"},\"error_x\":{\"color\":\"rgba(0,255,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780,5700,6800,8120,9690,11600,13800,16500,19600,23400,28000,33400],\"y\":[313960619.111859,387503656.366979,474128278.592798,583073655.236524,711744295.625356,862233847.511633,1047776753.44432,1262151806.79792,1509453823.94266,1804198300.97905,2152088150.41424,2549358364.71433,3007019486.02966,3543370744.94113,4094089180.05685,4818477254.72553,5558221428.95675,6434404235.07068,7388325248.94016,8458814552.38488,9666657765.40556,10968882808.6094,12442611477.848,14047425593.7904,15764357127.3425,17621552541.2751,19538603580.6193,21729601188.5545,23865977942.4058,25979420716.8763,28279197315.084,30406691478.1583,32258113848.747,34228217794.1703,35880102989.7528,37293887923.9279,38579606932.233,39451497619.268,40229699720.2023,40967721675.2527,40993935115.951,41364434461.2217,41620991728.591,42237088762.1744,42499381263.6917,43364263958.0822,44402721721.7879,45957825940.3145,48044233797.0537,50722425607.4653,54954307524.7633,62653621437.1628,77475645157.2796,93510427652.7867,104111746008.693,115619472358.881,129385521669.95,143164761776.815,158422214191.551,174780469706.253,191413415738.899,206613902152.853,221128253804.381,235515364267.888,249372324045.531,263749484212.087,269825377801.694,265770110811.507,236461457763.534,184355202710.392,116523990140.137,52499148418.8783],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2003\",\"line\":{\"color\":\"rgba(160,141,251,1)\",\"simplify\":false},\"name\":\"Saithe\",\"marker\":{\"color\":\"rgba(160,141,251,1)\",\"line\":{\"color\":\"rgba(160,141,251,1)\"}},\"textfont\":{\"color\":\"rgba(160,141,251,1)\"},\"error_y\":{\"color\":\"rgba(160,141,251,1)\"},\"error_x\":{\"color\":\"rgba(160,141,251,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4],\"y\":[2445037187.67393,3026937003.17234,3721369303.5803,4607415359.81174,5674367062.72669,6951710465.89657,8564398112.21286,10487060153.0722,12784342023.5775,15620384023.122,19100904050.1586,23260663908.7669,28279391985.04,34429085283.1189,41181910143.28,50250996410.0323,60157080914.6488,72374057828.1716,87057443507.629,109257091319.982,156558560408.902,229117655906.46,284446748760.208,318929858919.512,341282672063.589,353320893053.11,351710392098.601,338045721057.937,305541878302.044,256173101769.677,195339197966.578,126872156921.632,61807907884.6337,9203227791.84668],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2003\",\"line\":{\"color\":\"rgba(98,55,226,1)\",\"simplify\":false},\"name\":\"Sandeel\",\"marker\":{\"color\":\"rgba(98,55,226,1)\",\"line\":{\"color\":\"rgba(98,55,226,1)\"}},\"textfont\":{\"color\":\"rgba(98,55,226,1)\"},\"error_y\":{\"color\":\"rgba(98,55,226,1)\"},\"error_x\":{\"color\":\"rgba(98,55,226,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973],\"y\":[126083302.635262,150596219.260936,178406258.957131,212566985.25831,251594510.771868,295814604.203862,349268970.580138,409303349.755998,476877485.464724,556157705.887631,648385060.604021,752056506.914674,870241642.812914,1008060693.37318,1147404918.97168,1333270085.85176,1521904002.38861,1747558253.42976,1995296778.68823,2277293513.60555,2601338538.50601,2958851000.64472,3374619015.31251,3843081865.74853,4365891242.38847,4959608150.86406,5612612121.47386,6400432004.34752,7245011219.79986,8173049129.07983,9273723781.46348,10458012421.3252,11711339311.826,13207049214.3217,14837461067.5662,16818403808.4936,20162094658.6635,27150488639.1338,35495519536.726,40227449180.9907,41952048262.0902,42730132052.564,41980095985.5863,39772705106.3039,35178045234.4269,29165069444.8946,21933063201.0726,14635352179.7521,8292348126.9422,3697915693.53848,1105382628.01252,89018080.6157771],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2003\",\"line\":{\"color\":\"rgba(108,170,114,1)\",\"simplify\":false},\"name\":\"Sole\",\"marker\":{\"color\":\"rgba(108,170,114,1)\",\"line\":{\"color\":\"rgba(108,170,114,1)\"}},\"textfont\":{\"color\":\"rgba(108,170,114,1)\"},\"error_y\":{\"color\":\"rgba(108,170,114,1)\"},\"error_x\":{\"color\":\"rgba(108,170,114,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8],\"y\":[1423297970.86109,1612352202.86471,1808945119.72201,2038246075.02953,2278249110.29908,2526238049.08598,2809379658.68377,3097153400.76234,3390756867.81541,3711961823.46924,4058243410.69052,4410423947.0623,4778136432.63089,5178307071.55536,5510609650.31982,5981774525.65807,6370599629.54276,6807917526.87224,7194037278.69146,7514064338.4882,7720970296.58005,7766311061.16559,7743173479.7741,7659080528.47135,7547478457.26915,7555952009.13022,8229852389.21477,10685238299.1197,11596097299.932,7965297566.74275,3873936419.64432,1314191117.4365,227043378.109203],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2003\",\"line\":{\"color\":\"rgba(129,95,0,1)\",\"simplify\":false},\"name\":\"Sprat\",\"marker\":{\"color\":\"rgba(129,95,0,1)\",\"line\":{\"color\":\"rgba(129,95,0,1)\"}},\"textfont\":{\"color\":\"rgba(129,95,0,1)\"},\"error_y\":{\"color\":\"rgba(129,95,0,1)\"},\"error_x\":{\"color\":\"rgba(129,95,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390],\"y\":[1128121748.69459,1300413067.03841,1482182019.38955,1693758728.49764,1916729704.86536,2148026691.13536,2410085052.29011,2676194909.56192,2946482061.09866,3239226254.80417,3551904641.2336,3867556162.6761,4194744990.33456,4548974488.17783,4843434033.67375,5262403196.21492,5616590982.65063,6032469840.81248,6447195882.51286,6895428467.86883,7391669233.58521,7903415056.53803,8490259058.41112,9128728664.70799,9818383712.85531,10592794421.8784,11424462669.6907,12474286803.8833,13575650307.2914,14788743985.3367,16280560312.5112,17899250763.1846,19636191047.38,21799687320.958,24237295078.3819,27399005428.3572,33199357483.1513,44241878597.8027,55137615177.3887,62035070111.0572,66289535308.696,70633806910.9873,74372074684.1093,78001447968.6644,79692196868.6392,80550838900.8548,78986867533.3069,74769285222.125,67127449325.1805,55710434737.4613,41433819607.5807,25373985206.7136,10494626167.5244,568688781.329183],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2003\",\"line\":{\"color\":\"rgba(67,0,121,1)\",\"simplify\":false},\"name\":\"Whiting\",\"marker\":{\"color\":\"rgba(67,0,121,1)\",\"line\":{\"color\":\"rgba(67,0,121,1)\"}},\"textfont\":{\"color\":\"rgba(67,0,121,1)\"},\"error_y\":{\"color\":\"rgba(67,0,121,1)\"},\"error_x\":{\"color\":\"rgba(67,0,121,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true}],\"traces\":[0,1,2,3,4,5,6,7,8,9,10,11,12]},{\"name\":\"2004\",\"data\":[{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780,5700,6800,8120,9690,11600,13800,16500,19600,23400,28000,33400],\"y\":[14885379.680828,18139458.9469342,21918851.4197634,26628906.7896804,32123462.9377382,38475076.8731784,46248305.736106,55139047.9061092,65308648.0768655,77367701.6574416,91543036.1066366,107671608.120409,126236148.91474,148039634.810271,170467763.885802,200267131.943459,231011115.837488,267969544.532229,309027413.032111,356246264.023922,411108786.996609,472582575.649631,545024898.124498,628091977.638574,722684614.575577,832319927.500303,955984608.523521,1107735796.83672,1275610793.05306,1465609027.40899,1695616064.61391,1951643053.01805,2232347722.73306,2571969896.59106,2947322512.5806,3369949393.47554,3856430895.04356,4383332655.22866,4987029764.73406,5681136741.8812,6367992318.33178,7197817721.51706,8101282068.77123,9169092278.3704,10243816367.2706,11536012356.9135,12940518729.4284,14545375604.7446,16348760099.7452,18334754746.1304,20680082244.7764,23285653106.2325,26423529860.597,31431677286.3346,40141739940.788,51453210915.9451,60041624512.4408,66135725844.5394,71867144059.9249,77446548823.5278,82492572109.4947,86035372521.7311,87915751682.1476,87640656444.713,84407769511.8894,78503888305.3143,68490635813.9269,56564204570.5217,42403952656.0251,28693394391.6019,16589492442.8248,7341106902.99092],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2004\",\"line\":{\"color\":\"rgba(20,35,0,1)\",\"simplify\":false},\"name\":\"Cod\",\"marker\":{\"color\":\"rgba(20,35,0,1)\",\"line\":{\"color\":\"rgba(20,35,0,1)\"}},\"textfont\":{\"color\":\"rgba(20,35,0,1)\"},\"error_y\":{\"color\":\"rgba(20,35,0,1)\"},\"error_x\":{\"color\":\"rgba(20,35,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337],\"y\":[23246319.1415231,27549777.7538394,32369626.0488524,38233212.5008744,44836839.0202786,52202637.5507124,60996223.30118,70692594.090366,81400308.8728948,93758000.8666493,107879307.883305,123414376.596196,140767350.767834,160643745.875797,180060953.467703,205973161.287107,231418291.012063,261555184.413489,294001275.962348,330487350.919057,372061375.716976,417464028.317428,470230646.222565,529661976.82012,596222230.748402,672591621.098446,758126397.424568,866683269.737081,1007274817.48072,1271199223.19598,1760872452.31556,2208357965.16803,2525721393.37952,2844912014.33087,3177571660.01434,3544933169.44258,3965708469.20673,4416978341.9018,4939654977.18383,5555642521.27597,6187782002.0123,7010800390.8154,7980220583.25971,9133894249.03492,9956587294.71499,7635946412.92039],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2004\",\"line\":{\"color\":\"rgba(14,67,0,1)\",\"simplify\":false},\"name\":\"Dab\",\"marker\":{\"color\":\"rgba(14,67,0,1)\",\"line\":{\"color\":\"rgba(14,67,0,1)\"}},\"textfont\":{\"color\":\"rgba(14,67,0,1)\"},\"error_y\":{\"color\":\"rgba(14,67,0,1)\"},\"error_x\":{\"color\":\"rgba(14,67,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683],\"y\":[3279976836.42131,3711732233.68315,4152250794.51558,4656001556.39323,5168582171.65702,5679820941.36899,6246005847.97258,6793574150.10588,7320930929.26582,7870203364.65391,8429718312.07106,8954562457.55588,9461177007.62197,9979177797.30055,10316453150.0741,10863467538.4759,11216264193.6156,11631410896.5804,11979558818.8756,12323826341.8982,12683645374.1386,12998050477.2411,13360480693.8801,13720897842.5038,14068584978.5353,14439341287.8213,14780417273.0264,15264540254.2718,15667907097.3683,16050356379.3207,16582171843.3728,17182438077.8428,18387180994.6669,21636358741.3581,24540300320.7678,24514286457.924,23259054532.8688,21629500017.9605,20062267691,18602343133.0612,16930045638.0483,15448998294.5455,13872671969.9644,12262588761.2165,10337600044.5045,8344239230.4868,6236570966.86822,4223307950.77776,2491410588.63496,1096522664.83706],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2004\",\"line\":{\"color\":\"rgba(238,0,83,1)\",\"simplify\":false},\"name\":\"Gurnard\",\"marker\":{\"color\":\"rgba(238,0,83,1)\",\"line\":{\"color\":\"rgba(238,0,83,1)\"}},\"textfont\":{\"color\":\"rgba(238,0,83,1)\"},\"error_y\":{\"color\":\"rgba(238,0,83,1)\"},\"error_x\":{\"color\":\"rgba(238,0,83,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780],\"y\":[3229980738.95437,3759274830.03593,4329202531.26814,5002058511.00316,5727290724.49026,6498331701.67411,7386219753.19997,8312825289.87473,9279783280.56185,10346168551.7407,11506320074.2062,12705978626.4633,13971985791.3314,15355328845.2836,16559091448.6765,18209151984.0771,19653344284.8157,21326221993.8102,23004545448.5372,24807216258.9249,26783965093.4928,28814906879.2911,31113812548.712,33586884254.3852,36219346720.8142,39117431583.4579,42155101836.7434,45852833586.073,49581719447.5705,53502510894.1833,58139543016.2867,62850131088.0103,67490179634.4887,72935766142.2887,78298395803.1625,83739805252.5603,89488619865.8235,94849111108.0341,100580635452.282,107253745642.405,115594816987.547,135579281886.35,158842102963.618,169128330641.333,169660435070.199,170055827646.969,169889188222.941,170382481651.618,170936098877.592,170595038707.178,169800598505.267,165950898350.193,158362016588.605,147455650131.1,128432364266.939,106223164315.061,81533645205.1759,55616530376.9888,32645687693.6081,14401092658.6852,2126847091.02707],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2004\",\"line\":{\"color\":\"rgba(180,41,121,1)\",\"simplify\":false},\"name\":\"Haddock\",\"marker\":{\"color\":\"rgba(180,41,121,1)\",\"line\":{\"color\":\"rgba(180,41,121,1)\"}},\"textfont\":{\"color\":\"rgba(180,41,121,1)\"},\"error_y\":{\"color\":\"rgba(180,41,121,1)\"},\"error_x\":{\"color\":\"rgba(180,41,121,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337],\"y\":[2312633269.26105,2691425947.29811,3102672537.51634,3592714029.35837,4127442817.78011,4704540883.52739,5378450705.16828,6096016710.38631,6861883480.99458,7723888771.44397,8683172033.32695,9704095419.60641,10812028712.2471,12052502889.5975,13196304921.8087,14746382788.4875,16186026963.4465,17872804270.5799,19627617046.3081,21554433245.2493,23702590342.1786,25971065929.1825,28556356594.07,31380451350.6262,34433348662.567,37820464895.503,41425379747.0921,45764619638.9596,50229284600.4922,54980871740.8239,60567761598.7602,66336738985.6261,72138488597.7807,78923312003.1578,85770499049.4093,92972792999.3567,101535066411.853,115167413863.149,153318461205.155,223687813073.702,244525809305.402,210803038521.802,158174414032.473,103881700150.556,53118629811.6,15963353693.0223],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2004\",\"line\":{\"color\":\"rgba(222,83,255,1)\",\"simplify\":false},\"name\":\"Herring\",\"marker\":{\"color\":\"rgba(222,83,255,1)\",\"line\":{\"color\":\"rgba(222,83,255,1)\"}},\"textfont\":{\"color\":\"rgba(222,83,255,1)\"},\"error_y\":{\"color\":\"rgba(222,83,255,1)\"},\"error_x\":{\"color\":\"rgba(222,83,255,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117],\"y\":[15526477212.506,17358370886.3267,19141912295.3541,21110609822.2337,22996182529.814,24742403887.1852,26582744984.4198,28191840529.8098,29570511132.3644,30897362366.5836,32131867204.6347,33120669051.5799,33954883759.9506,34767252123.4884,34929889957.7514,35806042761.0325,36068972318.2267,36594630911.9089,36992998799.3124,37485383172.0417,38144895104.1095,38797526290.1339,39728192996.3661,40792093168.6679,41958459943.9065,43330385099.9583,44750218233.9726,46858696499.71,49404844185.3543,55307442019.9351,73254434217.4797,94556342228.2234,92486220901.0054,76649143831.6136,57191453649.3555,38541361859.4386,22726913685.1422,10764267481.2069,3347470528.07787,122971965.327396],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2004\",\"line\":{\"color\":\"rgba(141,166,0,1)\",\"simplify\":false},\"name\":\"N.pout\",\"marker\":{\"color\":\"rgba(141,166,0,1)\",\"line\":{\"color\":\"rgba(141,166,0,1)\"}},\"textfont\":{\"color\":\"rgba(141,166,0,1)\"},\"error_y\":{\"color\":\"rgba(141,166,0,1)\"},\"error_x\":{\"color\":\"rgba(141,166,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350],\"y\":[87338882020.7399,94575237703.2967,101252245257.355,108664202154.301,115453827044.696,121431742748.738,127806681305.6,133046866963.957,137231441556.405,141228411433.05,144852822842.444,147416421001.334,149328977222.121,151153661709.954,150155027713.468,152184081366.439,151530401261.05,151898314383.852,151638299392.97,151669612345.398,152291048028.808,152836357187.232,154479377575.536,156691105347.06,159424294646.019,163160089119.078,167375613524.238,174102811232.687,180865399901.205,188332376765.283,198284182955.601,208403844129.106,218246504946.87,230600968446.848,242521051794.133,254503668062.88,267583650516.742,282504460742.492,313714585556.806,367053077177.135,387497130737.198,379512970895.156,359591229358.063,338674680410.254,312095615188.675,286821578046.03,258570907917.534,228410744890.656,195528947817.146,160157705308.035,125068015233.456,91208857970.3546,61507519848.3153,38141915241.3786,20665561831.1625,9724966097.42718,3682363491.92944,920925729.1426,60186562.5484262],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2004\",\"line\":{\"color\":\"rgba(0,121,87,1)\",\"simplify\":false},\"name\":\"Plaice\",\"marker\":{\"color\":\"rgba(0,121,87,1)\",\"line\":{\"color\":\"rgba(0,121,87,1)\"}},\"textfont\":{\"color\":\"rgba(0,121,87,1)\"},\"error_y\":{\"color\":\"rgba(0,121,87,1)\"},\"error_x\":{\"color\":\"rgba(0,121,87,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82],\"y\":[46980449239.0297,45503065435.9919,43814840248.0095,42539655378.9119,41141694522.9706,39644176309.8364,38485634279.3276,37210709813.8362,35902184482.1673,34810163516.7428,33878311086.9756,32943882771.4001,32099866692.0419,31449795578.1304,30411876648.8981,30153512905.8899,29494338563.1662,29138237637.9259,28730854335.7425,28415227780.4094,28211660007.2601,27961999169.2416,27847319069.6077,27734561802.2747,27582091691.274,27441139501.7628],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2004\",\"line\":{\"color\":\"rgba(0,255,0,1)\",\"simplify\":false},\"name\":\"Resource\",\"marker\":{\"color\":\"rgba(0,255,0,1)\",\"line\":{\"color\":\"rgba(0,255,0,1)\"}},\"textfont\":{\"color\":\"rgba(0,255,0,1)\"},\"error_y\":{\"color\":\"rgba(0,255,0,1)\"},\"error_x\":{\"color\":\"rgba(0,255,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780,5700,6800,8120,9690,11600,13800,16500,19600,23400,28000,33400],\"y\":[315574678.119922,389410079.122535,476271887.557686,585353472.354019,713915717.371502,863880615.44461,1048255804.03213,1260472426.73941,1504219932.03664,1793454499.20764,2133194283.28669,2518997761.44571,2961034037.10714,3476553241.79451,4001943294.62648,4692590286.83859,5393829987.96261,6223980548.03976,7127252316.16309,8143341277.49776,9295491238.90771,10547038777.0477,11978382721.4879,13558563844.4434,15278588502.4327,17176117108.6519,19183432035.5551,21521599410.9135,23875443178.2644,26278022971.6778,28940741101.3725,31491382386.1956,33800255313.2549,36254638740.6718,38364838716.7178,40178940338.4494,41781930349.4204,42835056537.0716,43663078702.0212,44310580668.4531,44049318155.5307,44024393608.8398,43752091562.9519,43741584248.7317,43265986485.7763,43320621531.6539,43472870691.9624,44065196597.8241,45106443040.3179,46649907160.4028,49557571417.0406,55450325522.9003,67347821658.5873,80119769455.6687,88523025025.7895,98431134684.1044,111413656402.415,126001100854.548,143873925091.66,164980143645.081,188446534106.986,211791747057.721,234172236792.327,254213150187.031,269996614249.308,283009222917.093,286792394220.033,283798551698,259865588575.986,213771172629.184,145205583913.244,70919338901.9353],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2004\",\"line\":{\"color\":\"rgba(160,141,251,1)\",\"simplify\":false},\"name\":\"Saithe\",\"marker\":{\"color\":\"rgba(160,141,251,1)\",\"line\":{\"color\":\"rgba(160,141,251,1)\"}},\"textfont\":{\"color\":\"rgba(160,141,251,1)\"},\"error_y\":{\"color\":\"rgba(160,141,251,1)\"},\"error_x\":{\"color\":\"rgba(160,141,251,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4],\"y\":[2445530049.99702,3029619609.77595,3727310745.3414,4618120009.02052,5691716263.52046,6978061786.55161,8603076967.6517,10541913807.2466,12860208857.0479,15724014722.282,19241217392.4852,23448982955.532,28531841628.7314,34769965963.2779,41639251591.9677,50887106347.1731,61042284120.2168,73638333952.1808,88901105378.3997,112135253100.424,161951186335.891,239997063580.232,303088369999.017,347098100995.257,380824264399.071,405656641713.37,416690788927.109,414032197420.871,386862108386.735,334288888550.394,260564098368.964,169959287751.892,80080540961.708,10985426938.2765],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2004\",\"line\":{\"color\":\"rgba(98,55,226,1)\",\"simplify\":false},\"name\":\"Sandeel\",\"marker\":{\"color\":\"rgba(98,55,226,1)\",\"line\":{\"color\":\"rgba(98,55,226,1)\"}},\"textfont\":{\"color\":\"rgba(98,55,226,1)\"},\"error_y\":{\"color\":\"rgba(98,55,226,1)\"},\"error_x\":{\"color\":\"rgba(98,55,226,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973],\"y\":[125698598.483271,150459034.454222,178653563.092499,213376764.3649,253185465.846678,298443726.055296,353270671.307625,415026710.906081,484704036.163667,566550945.094676,661839406.152153,769008104.257921,891124125.544599,1033322138.96891,1176865861.68787,1367669164.15595,1560559139.50539,1790296377.297,2041142226.04521,2325105757.76758,2649662097.39793,3005660002.47501,3418017249.20791,3880986371.86078,4396535599.25726,4982079218.38391,5627183994.20658,6409304336.95906,7252421672.165,8185735232.7456,9300812893.18789,10509848442.9766,11797484108.5221,13335062003.4489,15007288557.003,17020618817.3023,20375672406.3438,27288672713.0632,35251113399.4329,39258110804.1037,40150168718.036,40198586761.0253,39076182667.9246,36982239254.1105,33021296879.4916,27897791433.8976,21517540211.1621,14761014126.0031,8577419007.68336,3891440967.02003,1165660015.42548,92322814.9132974],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2004\",\"line\":{\"color\":\"rgba(108,170,114,1)\",\"simplify\":false},\"name\":\"Sole\",\"marker\":{\"color\":\"rgba(108,170,114,1)\",\"line\":{\"color\":\"rgba(108,170,114,1)\"}},\"textfont\":{\"color\":\"rgba(108,170,114,1)\"},\"error_y\":{\"color\":\"rgba(108,170,114,1)\"},\"error_x\":{\"color\":\"rgba(108,170,114,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8],\"y\":[1442269580.98919,1639303198.84174,1845675826.43026,2087207794.58344,2341530396.19971,2605739894.19152,2907696450.3671,3215580554.56191,3530033408.06928,3873021547.85309,4241121429.91977,4613267174.52539,4998355430.12976,5412895298.19827,5751066829.87196,6228196727.1164,6614583555.71356,7051061957.55719,7447022364.47889,7812947199.39735,8128650493.78945,8344016110.51002,8531597848.62158,8673610456.71268,8789178818.97453,9044300832.21847,10127786919.2022,13534871492.297,15016160840.5631,10435848194.2511,5125546779.38317,1766520687.00799,311879362.64663],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2004\",\"line\":{\"color\":\"rgba(129,95,0,1)\",\"simplify\":false},\"name\":\"Sprat\",\"marker\":{\"color\":\"rgba(129,95,0,1)\",\"line\":{\"color\":\"rgba(129,95,0,1)\"}},\"textfont\":{\"color\":\"rgba(129,95,0,1)\"},\"error_y\":{\"color\":\"rgba(129,95,0,1)\"},\"error_x\":{\"color\":\"rgba(129,95,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390],\"y\":[1132234198.33424,1306815812.57306,1491368442.83038,1706353575.63176,1933227597.22922,2168829776.63607,2435745750.49556,2706921649.55116,2982381308.6637,3280560139.95515,3598889729.87599,3920205020.7923,4253255037.20536,4613901939.1722,4914277826.60957,5341591115.75969,5704033086.52581,6130265069.83231,6556709507.12849,7018761140.5058,7531265314.77174,8060987627.87226,8668286976.48695,9328506493.44955,10040024426.3104,10835493737.6136,11684524502.2483,12748479998.1875,13853336301.3736,15056116745.3137,16521216243.2224,18087302858.3683,19738608298.9116,21776356886.6187,24036052894.5481,26947808192.8649,32339023998.528,42591773278.3992,52425749987.0516,58360060546.3462,61921346102.2543,65827670297.0766,69548788608.7525,73660802480.935,76522793363.5641,79228279998.595,80206894496.8523,79033580582.3546,74469887230.955,65331231987.3615,51605955482.71,33612544687.3698,14778535481.8708,842725013.058838],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2004\",\"line\":{\"color\":\"rgba(67,0,121,1)\",\"simplify\":false},\"name\":\"Whiting\",\"marker\":{\"color\":\"rgba(67,0,121,1)\",\"line\":{\"color\":\"rgba(67,0,121,1)\"}},\"textfont\":{\"color\":\"rgba(67,0,121,1)\"},\"error_y\":{\"color\":\"rgba(67,0,121,1)\"},\"error_x\":{\"color\":\"rgba(67,0,121,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true}],\"traces\":[0,1,2,3,4,5,6,7,8,9,10,11,12]},{\"name\":\"2005\",\"data\":[{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780,5700,6800,8120,9690,11600,13800,16500,19600,23400,28000,33400],\"y\":[14956226.7895456,18233822.2699381,22042930.2722811,26792116.4773464,32335414.9726612,38746599.0625437,46594869.9986996,55574272.7418048,65846841.7631479,78026902.6249633,92340957.3789863,108620629.760845,127347082.62234,149322398.616483,171899729.091657,201869686.568532,232736889.333907,269794283.732575,310889975.142871,358075883.044068,412815630.9417,474045451.609524,546110053.643731,628635450.704268,722502072.64041,831211376.520782,953746151.783649,1104133236.47272,1270462936.34077,1458768062.94942,1686923736.67475,1941122691.50398,2220189554.47978,2558349687.81974,2932710361.51626,3354891371.76997,3841500787.62576,4369243811.63397,4974358267.06824,5670398616.40502,6359759664.0634,7192271950.01469,8098568384.94176,9169193117.07614,10246616735.4612,11541381952.3183,12948339998.8819,14555644896.8526,16361478887.8489,18349714139.9688,20696618673.5545,23301758523.6216,26435076581.5482,31429791315.7655,40099914978.7853,51310682872.7658,59738803313.6142,65651161199.8898,71227190967.9843,76752706586.9415,81941777505.465,85916726358.5836,88562489055.3511,89358086578.734,87360607910.7772,82639195168.1702,73373614821.4096,61591450384.3691,46771715767.8861,31885919571.2945,18450684054.3673,8121943596.37485],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2005\",\"line\":{\"color\":\"rgba(20,35,0,1)\",\"simplify\":false},\"name\":\"Cod\",\"marker\":{\"color\":\"rgba(20,35,0,1)\",\"line\":{\"color\":\"rgba(20,35,0,1)\"}},\"textfont\":{\"color\":\"rgba(20,35,0,1)\"},\"error_y\":{\"color\":\"rgba(20,35,0,1)\"},\"error_x\":{\"color\":\"rgba(20,35,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337],\"y\":[23525454.2320284,27875697.3499411,32740283.9069702,38648130.4657545,45286094.1274718,52669399.0801028,61460340.4959032,71118117.3513792,81740150.9004467,93953457.358186,107853932.768625,123073660.861957,139998802.800082,159311734.979302,178042743.584442,203057710.658268,227468421.192716,256354766.986671,287377841.150065,322246641.363671,362003762.081039,405460630.682389,456106443.560821,513331962.609644,577682529.703084,651874224.804827,735428065.373931,841974079.940207,980588347.742473,1241060891.18841,1726070878.64426,2175656598.30557,2502191057.55348,2834371322.55078,3182655690.91366,3566584743.83214,4002305540.01451,4462066026.13096,4979375400.97565,5563758332.203,6121407467.99527,6811482718.15118,7599174113.86826,8604355322.56141,9537313496.95914,7665495437.95245],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2005\",\"line\":{\"color\":\"rgba(14,67,0,1)\",\"simplify\":false},\"name\":\"Dab\",\"marker\":{\"color\":\"rgba(14,67,0,1)\",\"line\":{\"color\":\"rgba(14,67,0,1)\"}},\"textfont\":{\"color\":\"rgba(14,67,0,1)\"},\"error_y\":{\"color\":\"rgba(14,67,0,1)\"},\"error_x\":{\"color\":\"rgba(14,67,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683],\"y\":[3291518182.48768,3730215835.53594,4179370342.43205,4693969233.57432,5219355788.42808,5745161577.39093,6328163254.88604,6893586735.27416,7439162958.48359,8006935745.32073,8584173412.77023,9124032183.35037,9641982128.00889,10166876721.1827,10501761203.2279,11042966236.2267,11378473123.6956,11768338089.8727,12081092346.5986,12380849540.3325,12687697990.5753,12941985151.9228,13238950338.5412,13531335919.9898,13812155855.2001,14120672961.0948,14409661968.7906,14851741085.2943,15232746290.0009,15613833913.4011,16161952143.7412,16798665000.5004,18049899978.5021,21341937025.2063,24304064963.8321,24294268025.6782,22939669202.4839,21087314042.6486,19201599966.7932,17382055758.4321,15406589413.1409,13722238575.3474,12119536760.7408,10669284271.8067,9094014305.42366,7527614627.23196,5821270960.43598,4071040386.01334,2426519873.17323,1026230770.892],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2005\",\"line\":{\"color\":\"rgba(238,0,83,1)\",\"simplify\":false},\"name\":\"Gurnard\",\"marker\":{\"color\":\"rgba(238,0,83,1)\",\"line\":{\"color\":\"rgba(238,0,83,1)\"}},\"textfont\":{\"color\":\"rgba(238,0,83,1)\"},\"error_y\":{\"color\":\"rgba(238,0,83,1)\"},\"error_x\":{\"color\":\"rgba(238,0,83,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780],\"y\":[3261150456.47312,3802516004.64582,4387816803.39111,5080834674.99766,5831021713.95447,6632200876.41575,7557423934.0905,8527306927.32221,9543456804.75107,10666425588.8195,11890096648.2303,13157519119.8765,14494942432.8199,15953404764.8998,17221811071.1791,18947976096.2118,20450157122.9128,22176606442.7545,23890896382.02,25712248204.439,27687385241.0611,29687643182.6539,31928856387.4843,34309569992.0631,36811136543.023,39538828282.4361,42363716520.7252,45807556296.2891,49240694507.0091,52830193073.0102,57098847438.5211,61421482106.881,65671707064.0378,70711009641.0729,75677784501.2496,80724311890.957,86054111610.2932,90970124928.2405,96163029163.8888,102122834170.008,109450563194.729,127324240054.951,147392607860.662,154505136280.734,152145955577.82,149452988661.037,146390798872.45,144462464256.696,143677063253.524,143822012750.182,145831889650.05,147851736431.026,149140774826.837,149325120076.48,141668051296.611,128385467220.258,107538415249.841,78729871400.0506,48249497469.313,21662549283.0406,3241780344.19804],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2005\",\"line\":{\"color\":\"rgba(180,41,121,1)\",\"simplify\":false},\"name\":\"Haddock\",\"marker\":{\"color\":\"rgba(180,41,121,1)\",\"line\":{\"color\":\"rgba(180,41,121,1)\"}},\"textfont\":{\"color\":\"rgba(180,41,121,1)\"},\"error_y\":{\"color\":\"rgba(180,41,121,1)\"},\"error_x\":{\"color\":\"rgba(180,41,121,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337],\"y\":[2333426847.12214,2717530896.37217,3134909429.91453,3632399698.1732,4175513444.10984,4761779310.46844,5446101846.73353,6174352198.59639,6950744307.23701,7823088376.95681,8791683650.8503,9819372759.5225,10930562671.5696,12169733457.1343,13303924958.2086,14838455106.9005,16250720220.0224,17898382527.7624,19599647241.0109,21456771628.3453,23516903626.3027,25678355151.3202,28134655051.2961,30807987252.5734,33689253807.1127,36883319935.9275,40279500389.0698,44383713245.8445,48609655074.9674,53121571231.5071,58456651697.8177,63992460021.7722,69593171399.2687,76179088635.08,82857685691.2981,89896184870.9773,98238647332.4026,111428693662.558,148110996634.468,214792200515.382,231641946777.146,195655980080.049,143651483802.156,93259281283.7031,48299181221.3878,15183504481.6356],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2005\",\"line\":{\"color\":\"rgba(222,83,255,1)\",\"simplify\":false},\"name\":\"Herring\",\"marker\":{\"color\":\"rgba(222,83,255,1)\",\"line\":{\"color\":\"rgba(222,83,255,1)\"}},\"textfont\":{\"color\":\"rgba(222,83,255,1)\"},\"error_y\":{\"color\":\"rgba(222,83,255,1)\"},\"error_x\":{\"color\":\"rgba(222,83,255,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117],\"y\":[15778344081.9589,17673854509.3474,19532610541.811,21594281336.5797,23585903740.164,25449086028.53,27422729012.851,29169417768.9659,30685255646.7726,32150483100.2419,33518004127.3366,34621768271.8171,35550356497.41,36436959314.9137,36618283249.826,37519207042.3714,37746309277.5827,38215606847.2355,38518806084.241,38888223540.6497,39401625774.1378,39883205868.4544,40632253889.4824,41507142872.0089,42487388172.8738,43691060174.4844,44975766572.6217,47003793957.4956,49547991590.4096,55586584951.5352,74124972016.456,97283909883.4929,97963453450.6704,84574515992.7982,66340383780.2105,47200601002.2717,29305371276.854,14458340541.396,4605098318.95816,170284442.062138],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2005\",\"line\":{\"color\":\"rgba(141,166,0,1)\",\"simplify\":false},\"name\":\"N.pout\",\"marker\":{\"color\":\"rgba(141,166,0,1)\",\"line\":{\"color\":\"rgba(141,166,0,1)\"}},\"textfont\":{\"color\":\"rgba(141,166,0,1)\"},\"error_y\":{\"color\":\"rgba(141,166,0,1)\"},\"error_x\":{\"color\":\"rgba(141,166,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350],\"y\":[92805586181.7701,100161837252.818,106809686155.902,114102557593.479,120600277072.373,126109048279.611,131888975830.053,136364373342.811,139648079430.26,142654363856.354,145221097661.817,146695036038.516,147530512586.883,148321239015.174,146429089142.49,147600895277.684,146301036603.366,146143225894.176,145546677234.146,145401762702.781,145993085476.683,146675252773.979,148563586629.981,151137255904.651,154333571032.377,158600760651.091,163415317024.379,170754397757.292,178198187887.463,186409177354.773,197187224101.283,208297548695.37,219367287584.976,233304629978.939,247265863043.579,261857109635.148,278243841839.937,297330369166.105,334806647651.321,397993314934.162,426591498167.052,422576888885.656,402586177880.564,378673713087.376,346410039887.036,314954300738.556,281086721222.642,247112653138.563,212431667358.745,176608409757.957,141340348158.182,106305507081.967,74033218460.1224,47207624875.8146,26049564075.505,12317124729.6994,4617836305.49517,1130323734.44279,72157109.4108142],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2005\",\"line\":{\"color\":\"rgba(0,121,87,1)\",\"simplify\":false},\"name\":\"Plaice\",\"marker\":{\"color\":\"rgba(0,121,87,1)\",\"line\":{\"color\":\"rgba(0,121,87,1)\"}},\"textfont\":{\"color\":\"rgba(0,121,87,1)\"},\"error_y\":{\"color\":\"rgba(0,121,87,1)\"},\"error_x\":{\"color\":\"rgba(0,121,87,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82],\"y\":[47244927837.5865,45762266260.9439,44063541715.0859,42775689922.321,41359488972.9326,39838204504.4893,38652512900.2286,37345059166.3179,35999642500.0729,34867683026.1136,33893068684.5705,32913689044.1106,32023556907.5256,31326737796.2268,30245126512.568,29941166084.944,29242463216.0566,28849138504.1599,28411057810.1012,28071162522.6994,27850672303.9318,27594727519.5425,27483312296.104,27386222919.6602,27263100555.9009,27164743585.712],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2005\",\"line\":{\"color\":\"rgba(0,255,0,1)\",\"simplify\":false},\"name\":\"Resource\",\"marker\":{\"color\":\"rgba(0,255,0,1)\",\"line\":{\"color\":\"rgba(0,255,0,1)\"}},\"textfont\":{\"color\":\"rgba(0,255,0,1)\"},\"error_y\":{\"color\":\"rgba(0,255,0,1)\"},\"error_x\":{\"color\":\"rgba(0,255,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780,5700,6800,8120,9690,11600,13800,16500,19600,23400,28000,33400],\"y\":[315876137.915163,390049327.068357,477434459.65357,587312376.564492,717017302.354562,868557127.793941,1055094216.96279,1270098822.73716,1517318506.66389,1810820074.62792,2155599658.33061,2546977820.6252,2994891167.4878,3516271609.17943,4046075664.19185,4740472402.20693,5441988792.87605,6268774840.33618,7163083644.10354,8163398426.38556,9291541276.23836,10509734457.5909,11897582135.0792,13424368194.8233,15082748509.683,16913034706.9925,18853524518.4699,21128360058.1485,23436941689.673,25822244780.5843,28503154757.6677,31123999701.8308,33562389924.3968,36204232730.9552,38557203001.9161,40653821676.5411,42558875107.369,43900406236.6224,44980360269.2349,45819041383.368,45639871241.0575,45612514482.4558,45229242931.4127,45015585102.1444,44228636366.8731,43898660243.6935,43591258000.8533,43659150679.8668,44112720933.5608,45003679582.2607,47145115714.0947,51989650442.8607,62142613419.6317,72698581552.6428,79067882677.1494,86777303355.7192,97402405584.3654,109997340253.776,126575544276.799,147845947229.193,173900281131.367,203109487439.254,234617520310.374,265942033948.857,292735131959.786,313867026714.274,320932870149.98,318615778552.464,295186165674.772,250808748277.294,180187480387.365,94786096815.4173],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2005\",\"line\":{\"color\":\"rgba(160,141,251,1)\",\"simplify\":false},\"name\":\"Saithe\",\"marker\":{\"color\":\"rgba(160,141,251,1)\",\"line\":{\"color\":\"rgba(160,141,251,1)\"}},\"textfont\":{\"color\":\"rgba(160,141,251,1)\"},\"error_y\":{\"color\":\"rgba(160,141,251,1)\"},\"error_x\":{\"color\":\"rgba(160,141,251,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4],\"y\":[2452179280.6292,3038270210.81574,3738369340.23138,4632188354.89776,5709275548.14337,6999505926.59175,8628875353.4603,10571941810.1548,12893725566.8626,15759444748.1978,19275212802.0309,23475227952.7391,28539722251.2999,34741959092.613,41548460608.6737,50687778906.2844,60669950558.3042,72988114095.3763,87812497264.6566,110267204398.651,158219264077.133,232245853895.972,289926087581.462,327991365544.886,355781338401.019,375686076393.837,384433522466.418,383314825984.578,362795438155.628,320849850380.947,258295069040.994,174658632796.807,84421338979.7442,11474195901.9122],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2005\",\"line\":{\"color\":\"rgba(98,55,226,1)\",\"simplify\":false},\"name\":\"Sandeel\",\"marker\":{\"color\":\"rgba(98,55,226,1)\",\"line\":{\"color\":\"rgba(98,55,226,1)\"}},\"textfont\":{\"color\":\"rgba(98,55,226,1)\"},\"error_y\":{\"color\":\"rgba(98,55,226,1)\"},\"error_x\":{\"color\":\"rgba(98,55,226,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973],\"y\":[127061340.911657,152002438.277814,180338610.942465,215158858.397244,254960646.625659,300058371.743724,354526687.69426,415633649.675832,484295099.873666,564665832.622876,657906800.479727,762372024.288031,881036062.122129,1018921567.23267,1157579051.13736,1342253696.54101,1528685985.46349,1751236858.09693,1994858391.02493,2271803415.30434,2590016116.93242,2941323682.14376,3350991187.8928,3814384154.82999,4334406594.39773,4929150203.89966,5589105300.28276,6391986825.74061,7262821606.43841,8230947887.8301,9389051257.44239,10649583178.6885,11997683032.6978,13609397028.4083,15370364963.1855,17496225983.7672,21028410284.362,28293037338.748,36711026218.2245,40974836351.9941,41838081387.4327,41641001496.9833,40117851378.8419,37636568864.5259,33463399611.9807,28393346842.8125,22229892487.5814,15634827719.0155,9375595571.8262,4392497904.7935,1348430886.83088,107612645.845969],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2005\",\"line\":{\"color\":\"rgba(108,170,114,1)\",\"simplify\":false},\"name\":\"Sole\",\"marker\":{\"color\":\"rgba(108,170,114,1)\",\"line\":{\"color\":\"rgba(108,170,114,1)\"}},\"textfont\":{\"color\":\"rgba(108,170,114,1)\"},\"error_y\":{\"color\":\"rgba(108,170,114,1)\"},\"error_x\":{\"color\":\"rgba(108,170,114,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8],\"y\":[1517705318.43179,1722825539.22736,1936470671.20646,2185368243.73669,2445646765.81825,2713925212.27565,3018827669.64049,3326887547.59218,3638627875.62357,3976576005.6168,4337075039.40711,4698717982.71894,5071030770.1675,5471304361.77439,5793612537.99875,6256211784.98098,6629600007.71491,7058216061.71325,7456921313.92992,7846481247.97023,8218515347.5714,8525356710.51845,8834867231.51728,9124157645.90479,9412702386.89433,9888036608.7949,11367738256.187,15830428973.3342,18640854994.9477,13823187591.7973,7201759202.75862,2606906963.18035,479101903.137008],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2005\",\"line\":{\"color\":\"rgba(129,95,0,1)\",\"simplify\":false},\"name\":\"Sprat\",\"marker\":{\"color\":\"rgba(129,95,0,1)\",\"line\":{\"color\":\"rgba(129,95,0,1)\"}},\"textfont\":{\"color\":\"rgba(129,95,0,1)\"},\"error_y\":{\"color\":\"rgba(129,95,0,1)\"},\"error_x\":{\"color\":\"rgba(129,95,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390],\"y\":[1144292869.57139,1322140483.41616,1510516082.26339,1730193832.86471,1962426319.72754,2203985370.1747,2477780924.75539,2756218415.28629,3039134615.29142,3345080672.4612,3671152894.05566,3999469264.13703,4338515472.67382,4703980423.85724,5005808134.49095,5434206573.762,5793381132.01877,6213758330.46637,6630420994.74596,7079019402.13351,7574356375.53747,8083082067.7442,8666098400.94893,9299129919.94018,9981409796.21211,10746517898.5165,11565675435.7041,12600107313.9797,13679472336.2825,14862348501.7757,16313567293.2985,17876576758.837,19537769311.1837,21596525663.4567,23889996223.0728,26844000998.9823,32281441884.2539,42577609953.9619,52385314284.3059,58117750883.6629,61250818923.1801,64480837573.3975,67325630354.8168,70454785432.3758,72491555213.9687,74748675625.8266,76035131899.1915,76187479139.8714,74051737474.4289,68057617785.6283,57162125983.5507,40064834613.5028,19097303846.7101,1165644688.64817],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2005\",\"line\":{\"color\":\"rgba(67,0,121,1)\",\"simplify\":false},\"name\":\"Whiting\",\"marker\":{\"color\":\"rgba(67,0,121,1)\",\"line\":{\"color\":\"rgba(67,0,121,1)\"}},\"textfont\":{\"color\":\"rgba(67,0,121,1)\"},\"error_y\":{\"color\":\"rgba(67,0,121,1)\"},\"error_x\":{\"color\":\"rgba(67,0,121,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true}],\"traces\":[0,1,2,3,4,5,6,7,8,9,10,11,12]},{\"name\":\"2006\",\"data\":[{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780,5700,6800,8120,9690,11600,13800,16500,19600,23400,28000,33400],\"y\":[14861095.4623756,18111920.3576023,21887196.5960978,26590691.9030485,32074645.2057943,38408550.7947977,46151403.0395685,54992951.5863259,65085253.3637311,77024821.6298465,91021284.4637796,106893092.932117,125097495.318719,146403668.112041,168201885.940098,197123062.676759,226803156.144683,262403425.703424,301830394.980891,347096727.971017,399654118.100238,458529858.152026,528013972.170767,607867213.233253,699110713.405917,805357292.299516,925910272.516716,1074765858.23835,1240826443.3461,1430499743.51261,1662017012.98007,1922652908.59045,2212001006.35784,2565071354.87837,2960032627.82626,3409356941.63629,3930711874.91761,4500803387.90227,5157029256.5557,5913613407.4331,6667981385.30713,7575585707.65168,8562301800.80865,9721800472.77401,10884524913.9451,12270857007.7519,13765940627.2969,15460190765.7135,17348521672.1769,19411301060.8233,21833127451.6302,24506734206.4179,27715497849.6164,32849588008.7953,41779665376.4862,53310445275.9617,61949282530.0218,68021109758.9485,73800604559.4362,79584783225.495,85080317472.89,89393622140.0045,92445752653.4452,93754696150.8549,92380116696.8866,88376836190.5855,79644908310.4838,68063801997.6776,52693734981.5939,36577256577.7297,21454713836.5101,9504669236.73699],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2006\",\"line\":{\"color\":\"rgba(20,35,0,1)\",\"simplify\":false},\"name\":\"Cod\",\"marker\":{\"color\":\"rgba(20,35,0,1)\",\"line\":{\"color\":\"rgba(20,35,0,1)\"}},\"textfont\":{\"color\":\"rgba(20,35,0,1)\"},\"error_y\":{\"color\":\"rgba(20,35,0,1)\"},\"error_x\":{\"color\":\"rgba(20,35,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337],\"y\":[22948188.7412399,27194938.3623106,31946636.3318117,37719685.2074758,44208365.2398889,51426472.8843739,60018622.740523,69453352.2107073,79820728.028215,91726219.5791241,105254465.53981,120035576.19279,136434043.318764,155100693.60294,173131742.585196,197190674.118752,220568519.133867,248185800.141353,277765858.666485,310958424.966482,348767531.402901,390052954.178359,438184235.50767,492593089.879546,553836154.418862,624564695.062081,704384860.695827,806439097.81394,939573780.030736,1190247627.04038,1658273570.32897,2095716995.01192,2418808610.37601,2752399628.94891,3108103222.86807,3506633615.92684,3965524647.72914,4457884026.98469,5015171481.15578,5640848089.72254,6225008538.55726,6902735220.08448,7603600805.83005,8439660416.19804,9262150895.14781,7643768971.01365],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2006\",\"line\":{\"color\":\"rgba(14,67,0,1)\",\"simplify\":false},\"name\":\"Dab\",\"marker\":{\"color\":\"rgba(14,67,0,1)\",\"line\":{\"color\":\"rgba(14,67,0,1)\"}},\"textfont\":{\"color\":\"rgba(14,67,0,1)\"},\"error_y\":{\"color\":\"rgba(14,67,0,1)\"},\"error_x\":{\"color\":\"rgba(14,67,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683],\"y\":[3227987417.22827,3656412995.6694,4094576703.95951,4596196721.74719,5107530241.17115,5618238111.89378,6183604595.0999,6730295606.6232,7255982678.9166,7801607650.32002,8354744135.4456,8870015784.51172,9362967689.52858,9862287563.04598,10177947069.3607,10695286137.0441,11016342922.5676,11394371249.758,11703375961.7439,12006567138.4081,12324339651.6084,12599253858.0824,12924018649.5592,13252347538.5852,13576478822.6128,13933733294.8961,14276070718.7337,14773326225.0466,15212006833.3915,15651792120.6938,16260763429.2966,16962970094.4936,18295901814.641,21727893065.4271,24867889369.7919,24981668219.149,23681049777.5113,21796431118.9504,19778755500.1297,17720111962.8954,15415065516.6648,13366660589.6508,11435715796.6982,9763768543.11635,8147000463.13353,6710485843.17153,5260509938.3395,3778056185,2302660002.53657,957288704.020638],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2006\",\"line\":{\"color\":\"rgba(238,0,83,1)\",\"simplify\":false},\"name\":\"Gurnard\",\"marker\":{\"color\":\"rgba(238,0,83,1)\",\"line\":{\"color\":\"rgba(238,0,83,1)\"}},\"textfont\":{\"color\":\"rgba(238,0,83,1)\"},\"error_y\":{\"color\":\"rgba(238,0,83,1)\"},\"error_x\":{\"color\":\"rgba(238,0,83,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780],\"y\":[3233083638.79588,3768199828.77555,4346160011.64359,5029872467.43057,5768911516.33998,6556756895.56426,7465090413.77891,8414819590.50356,9406935200.35978,10500450276.4036,11688563083.2374,12914708664.9504,14204429995.5445,15607716257.1897,16821019317.0308,18478489018.0249,19916515310.8282,21575150904.8065,23228043563.1742,24996199613.5615,26931150848.59,28914981595.5444,31166165615.1131,33595480967.996,36194666019.0877,39077631439.1037,42127251397.4057,45873536739.246,49698157538.1095,53770990881.4087,58629039164.0944,63634591091.8763,68639366992.7656,74521660621.3394,80348010062.8867,86229812426.3441,92329367872.4041,97835997006.1532,103425076053.102,109556101519.813,116776253478.784,134564968634.975,153489238153.854,157732684416.012,151575145714.199,144681328294.617,137183295777.124,130661375068.499,125280229456.295,121141068775.903,119467964844.121,119347606870.515,120954654423.964,124669326369.203,124952733205.15,122430631629.972,112656054204.884,91006628116.7476,60897950485.266,29145675984.6248,4528056545.60157],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2006\",\"line\":{\"color\":\"rgba(180,41,121,1)\",\"simplify\":false},\"name\":\"Haddock\",\"marker\":{\"color\":\"rgba(180,41,121,1)\",\"line\":{\"color\":\"rgba(180,41,121,1)\"}},\"textfont\":{\"color\":\"rgba(180,41,121,1)\"},\"error_y\":{\"color\":\"rgba(180,41,121,1)\"},\"error_x\":{\"color\":\"rgba(180,41,121,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337],\"y\":[2294701556.51489,2672401666.22379,3082804801.64663,3571874405.69669,4105537514.31142,4681133511.03639,5352311315.97343,6065437606.37006,6824159746.57491,7674822821.53147,8616994933.0647,9613527441.58304,10687667836.1068,11882243910.0694,12969523901.2809,14442046666.1915,15790677525.5307,17363970502.2807,18986221711.2745,20758084905.6242,22726985385.3654,24797022945.3394,27157970160.4128,29737837982.002,32531267153.4464,35642926875.0199,38968971080.5881,43001731063.7156,47175672655.9803,51649928227.6267,56946972701.0349,62460339097.3511,68051304077.1886,74610554910.9437,81252069214.401,88219205755.9188,96414830503.7605,109275604774.985,144914874877.456,208995577562.19,223043789953.076,185189900025.755,132612759040.723,83609337957.9675,42404548513.8208,13412482778.5117],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2006\",\"line\":{\"color\":\"rgba(222,83,255,1)\",\"simplify\":false},\"name\":\"Herring\",\"marker\":{\"color\":\"rgba(222,83,255,1)\",\"line\":{\"color\":\"rgba(222,83,255,1)\"}},\"textfont\":{\"color\":\"rgba(222,83,255,1)\"},\"error_y\":{\"color\":\"rgba(222,83,255,1)\"},\"error_x\":{\"color\":\"rgba(222,83,255,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117],\"y\":[15959901555.0279,17846213837.0315,19683679035.2744,21711328770.2621,23651531591.3718,25443993282.0754,27325709635.3828,28958602129.846,30340129825.8559,31650324844.8008,32844553820.2795,33764322384.0058,34502797200.1556,35195926061.3556,35212575581.4236,35933005602.5986,36027474851.0153,36382560259.0993,36617551661.6186,36962888040.6824,37501837494.1586,38076786616.5346,38983562372.4056,40099493571.0136,41418003977.0161,43069267738.5277,44930414294.3588,47690147926.6514,51176794094.0147,58657690940.6318,80585659472.8648,110231689310.264,116463321860.862,105905476499.753,87898546252.1777,66589018767.5911,44354546491.8391,23631280725.0538,8138246292.58124,319135137.088716],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2006\",\"line\":{\"color\":\"rgba(141,166,0,1)\",\"simplify\":false},\"name\":\"N.pout\",\"marker\":{\"color\":\"rgba(141,166,0,1)\",\"line\":{\"color\":\"rgba(141,166,0,1)\"}},\"textfont\":{\"color\":\"rgba(141,166,0,1)\"},\"error_y\":{\"color\":\"rgba(141,166,0,1)\"},\"error_x\":{\"color\":\"rgba(141,166,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350],\"y\":[95762177099.093,103442374084.11,110438692240.057,118149056765.261,125078663011.168,131014002623.495,137249041685.415,142127107641.024,145741397197.279,149022633623.893,151780131114.379,153310515005.93,154071434534.495,154669795155.587,152350425101.773,153093255837.522,151146556023.767,150264555332.632,148825025085.945,147757746479.842,147363822192.277,147008477258.627,147832141461.172,149332368075.33,151477216904.293,154741368162.271,158653709951.628,165177774323.172,172021440646.438,179891400960.735,190593851646.865,202046273099.432,213950673529.682,229210898469.482,245117993250.547,262316773422.073,282048303718.703,305396196474.359,349162457215.521,422796492946.84,462770396725.721,468532478942.635,455971801822.541,437150584981.543,405956792714.444,372584582448.848,333625538777.293,292870788955.329,251029132478.931,208741481887.251,168347589337.832,128848457641.577,92132614737.0894,60628162491.942,34497769403.5098,16693649513.9546,6319137416.49009,1536365066.97311,96357473.4515517],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2006\",\"line\":{\"color\":\"rgba(0,121,87,1)\",\"simplify\":false},\"name\":\"Plaice\",\"marker\":{\"color\":\"rgba(0,121,87,1)\",\"line\":{\"color\":\"rgba(0,121,87,1)\"}},\"textfont\":{\"color\":\"rgba(0,121,87,1)\"},\"error_y\":{\"color\":\"rgba(0,121,87,1)\"},\"error_x\":{\"color\":\"rgba(0,121,87,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82],\"y\":[47241426596.2723,45752855408.1291,44038793686.7078,42726182630.8914,41276726095.3582,39714991806.2928,38481518743.1624,37121878370.9968,35721635730.3434,34532016623.0318,33498366925.0099,32461855748.9129,31517017447.9814,30767406170.1772,29647015992.925,29297012494.0455,28569793223.4537,28151714437.4745,27701916365.7708,27361264781.5463,27151829023.9684,26924166121.3673,26855463442.7309,26820377907.6656,26780676697.7102,26787072193.0716],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2006\",\"line\":{\"color\":\"rgba(0,255,0,1)\",\"simplify\":false},\"name\":\"Resource\",\"marker\":{\"color\":\"rgba(0,255,0,1)\",\"line\":{\"color\":\"rgba(0,255,0,1)\"}},\"textfont\":{\"color\":\"rgba(0,255,0,1)\"},\"error_y\":{\"color\":\"rgba(0,255,0,1)\"},\"error_x\":{\"color\":\"rgba(0,255,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780,5700,6800,8120,9690,11600,13800,16500,19600,23400,28000,33400],\"y\":[316666417.079365,390864416.655249,478166643.051503,587783560.122417,716918645.557413,867410366.644568,1052161735.01407,1264325905.80796,1507239068.58722,1794361800.30462,2129974047.42239,2508695578.48396,2939517599.30851,3438147905.58049,3940280455.24916,4597363495.83086,5255713044.79384,6029700639.93403,6863934717.3089,7796530216.63664,8850225993.61788,9992133078.3733,11302464115.9582,12758078926.163,14359908703.8742,16156144196.3177,18099483777.0238,20419161456.3529,22841178405.7584,25420553681.1856,28388464991.3274,31406239257.4777,34351832834.9761,37618008105.7117,40688745996.7602,43571432300.0761,46303424747.7785,48438308697.0351,50257540149.1722,51741364689.0102,51965683853.0996,52219334951.9911,51902493900.4336,51603640908.8123,50467245681.9464,49674792121.8279,48735407866.0244,48050724621.5105,47629177478.8059,47519928651.6587,48542598823.5257,52019715910.5368,60120203084.1153,67775053663.7897,71032620895.1654,75288062892.6124,81925165990.6307,90185142780.7634,101904495764.219,117990301940.255,139164483535.649,165091739354.811,196145444133.784,230971011681.302,265404201905.117,296422952163.861,312909534850.501,316981596589.491,297787698281.723,258175187013.469,192637865134.8,107435535673.252],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2006\",\"line\":{\"color\":\"rgba(160,141,251,1)\",\"simplify\":false},\"name\":\"Saithe\",\"marker\":{\"color\":\"rgba(160,141,251,1)\",\"line\":{\"color\":\"rgba(160,141,251,1)\"}},\"textfont\":{\"color\":\"rgba(160,141,251,1)\"},\"error_y\":{\"color\":\"rgba(160,141,251,1)\"},\"error_x\":{\"color\":\"rgba(160,141,251,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4],\"y\":[2430640212.2964,3012833653.95499,3708882199.45977,4598254124.76686,5671141176.41748,6957937783.54816,8584959271.64956,10528484732.6292,12855403509.6313,15733738717.1759,19274691159.4149,23520410858.0353,28663616896.1329,34998429421.4572,42016437555.9726,51512482031.8369,62051498612.9368,75267961536.0635,91527452959.5292,116588611724.459,170939392212.096,259361202251.822,337999883485.673,402012147787.27,460659756407.979,515007444905.146,557659342458.922,586622337183.967,583227468292.974,539848401692.247,454636083664.957,322874431645.729,164700701719.254,23289592213.6658],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2006\",\"line\":{\"color\":\"rgba(98,55,226,1)\",\"simplify\":false},\"name\":\"Sandeel\",\"marker\":{\"color\":\"rgba(98,55,226,1)\",\"line\":{\"color\":\"rgba(98,55,226,1)\"}},\"textfont\":{\"color\":\"rgba(98,55,226,1)\"},\"error_y\":{\"color\":\"rgba(98,55,226,1)\"},\"error_x\":{\"color\":\"rgba(98,55,226,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973],\"y\":[124308671.453426,148778684.089137,176613489.425658,210848548.88334,250022055.325953,294446659.649859,348120960.264577,408355407.885984,476025817.882129,555176639.033724,646888944.983563,749454171.023603,865672478.185264,1000311767.43742,1135061723.28222,1314036038.76761,1493547670.87272,1706861511.11892,1938872902.71935,2201090274.98327,2500743011.08787,2829515962.08759,3211386900.37022,3641630810.9961,4123063915.07231,4673265428.10274,5284014589.00854,6030051900.21099,6842465180.83878,7751611439.88774,8848026710.35442,10053023326.1986,11356299317.956,12928246553.7417,14664238207.998,16774003695.5625,20271627465.0922,27456649298.0929,35886970185.7684,40314318867.6091,41346593201.2415,41205962340.0603,39586925284.2996,36869545871.538,32439671050.068,27238518322.7577,21202880370.5245,14960758947.6826,9099852131.20918,4364603033.6956,1376250295.47382,111919737.233957],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2006\",\"line\":{\"color\":\"rgba(108,170,114,1)\",\"simplify\":false},\"name\":\"Sole\",\"marker\":{\"color\":\"rgba(108,170,114,1)\",\"line\":{\"color\":\"rgba(108,170,114,1)\"}},\"textfont\":{\"color\":\"rgba(108,170,114,1)\"},\"error_y\":{\"color\":\"rgba(108,170,114,1)\"},\"error_x\":{\"color\":\"rgba(108,170,114,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8],\"y\":[1515626421.66281,1723429391.24575,1940976098.6536,2195234101.83097,2462422741.5855,2739155579.4731,3054301625.90664,3373924707.30822,3698185228.63873,4049518459.39696,4423661388.32605,4798020909.88335,5181386200.85747,5590430498.18711,5915986558.70467,6380241031.09378,6749079822.38635,7172101628.45935,7570112985.12892,7980486985.46431,8415315137.56697,8832988994.87508,9295300862.81303,9770968391.3734,10279374793.9851,11037364986.8642,13036067862.0529,18924032381.1711,23739564415.7217,19053268728.5797,10841348388.731,4297263073.37597,859971818.980575],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2006\",\"line\":{\"color\":\"rgba(129,95,0,1)\",\"simplify\":false},\"name\":\"Sprat\",\"marker\":{\"color\":\"rgba(129,95,0,1)\",\"line\":{\"color\":\"rgba(129,95,0,1)\"}},\"textfont\":{\"color\":\"rgba(129,95,0,1)\"},\"error_y\":{\"color\":\"rgba(129,95,0,1)\"},\"error_x\":{\"color\":\"rgba(129,95,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390],\"y\":[1122836686.6969,1296545470.7289,1480356088.61786,1694576220.76206,1920770225.867,2155724324.11492,2421782097.88625,2691904441.14871,2965925583.43625,3261967678.09676,3577245487.70942,3894470841.54567,4222150301.06678,4575878750.7588,4868505389.28802,5285590755.81163,5637371335.50799,6051510291.12718,6465718611.27454,6915691570.34237,7416998864.00212,7938076659.51654,8539720154.85526,9199261148.3506,9916955681.23197,10727134967.4662,11601984324.4421,12704098822.3567,13863610954.4986,15139633305.688,16701148555.9149,18389345416.4964,20188944166.9636,22408477972.2283,24878697961.2368,28040477790.7311,33804021996.0893,44666575565.3247,54990887397.9689,60960637692.7108,64096453640.0426,67190431076.9574,69689286850.7841,72234606158.3866,73392239718.9637,74560517375.3747,74729346404.7342,74103984356.5655,72035780585.5763,67372112994.2944,58914493513.7401,44067742727.2927,22908580938.4608,1514216261.31772],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2006\",\"line\":{\"color\":\"rgba(67,0,121,1)\",\"simplify\":false},\"name\":\"Whiting\",\"marker\":{\"color\":\"rgba(67,0,121,1)\",\"line\":{\"color\":\"rgba(67,0,121,1)\"}},\"textfont\":{\"color\":\"rgba(67,0,121,1)\"},\"error_y\":{\"color\":\"rgba(67,0,121,1)\"},\"error_x\":{\"color\":\"rgba(67,0,121,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true}],\"traces\":[0,1,2,3,4,5,6,7,8,9,10,11,12]},{\"name\":\"2007\",\"data\":[{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780,5700,6800,8120,9690,11600,13800,16500,19600,23400,28000,33400],\"y\":[14727179.7838821,17955775.3399175,21711318.1877281,26398151.7030155,31874929.6287966,38216985.212512,45988727.4234607,54891401.6484645,65087244.0451906,77185132.843399,91410024.8424059,107593846.247286,126208812.653149,148042760.18209,170460434.255726,200180832.400335,230745252.039774,267381170.463283,307932866.168132,354411730.593662,408246382.276772,468372133.881105,539081485.775357,620019677.591875,712101395.515269,818863790.908189,939445059.433373,1087869391.88234,1252723729.50529,1440380784.00848,1669084931.08584,1925993040.65787,2210905442.18196,2559193470.7889,2949651341.46698,3395620042.98519,3915903311.03431,4488821794.61627,5153503781.75747,5926459497.82127,6707246556.37396,7654550916.45151,8696880341.96819,9932701902.22426,11192119827.052,12704153942.8128,14354182156.2425,16239356777.4593,18357876566.4323,20691401080.039,23439141306.764,26489058718.6242,30150076705.919,35953118436.305,46002764235.8848,59023798554.6066,68875010264.6759,75819741775.6759,82351263448.3046,88800698777.4846,94862621277.467,99581967892.9276,102927359459.529,104427867914.521,103106115984.974,99082456639.1172,90003818632.8069,77861611604.9015,61295736497.5672,43419020755.1289,26012904785.8777,11733831415.8042],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2007\",\"line\":{\"color\":\"rgba(20,35,0,1)\",\"simplify\":false},\"name\":\"Cod\",\"marker\":{\"color\":\"rgba(20,35,0,1)\",\"line\":{\"color\":\"rgba(20,35,0,1)\"}},\"textfont\":{\"color\":\"rgba(20,35,0,1)\"},\"error_y\":{\"color\":\"rgba(20,35,0,1)\"},\"error_x\":{\"color\":\"rgba(20,35,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337],\"y\":[22342078.3466639,26511167.2333716,31191992.6547369,36894715.3582874,43327646.3117023,50510297.4321196,59082310.4229205,68527141.7495863,78935682.9492195,90907045.606149,104523666.904736,119410407.860684,135914308.677836,154661978.39286,172726220.053701,196713746.948583,219881704.09671,247076611.434391,275958173.341493,308087322.766854,344364240.639848,383561830.698426,428887833.477475,479657518.494419,536297394.536133,601259416.957385,674050896.405858,767085900.365782,888414751.706857,1118558570.34555,1548384066.85613,1945745105.5178,2237015849.73613,2541719128.7134,2873774066.0687,3255873520.16608,3708596388.76485,4211627264.59757,4799379991.20171,5479463230.24177,6143719317.88662,6911610585.48157,7679081568.90294,8497342339.1455,9206972074.58381,7650501102.31376],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2007\",\"line\":{\"color\":\"rgba(14,67,0,1)\",\"simplify\":false},\"name\":\"Dab\",\"marker\":{\"color\":\"rgba(14,67,0,1)\",\"line\":{\"color\":\"rgba(14,67,0,1)\"}},\"textfont\":{\"color\":\"rgba(14,67,0,1)\"},\"error_y\":{\"color\":\"rgba(14,67,0,1)\"},\"error_x\":{\"color\":\"rgba(14,67,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683],\"y\":[3190889951.07939,3622564643.51438,4068050646.74572,4581792906.6729,5111526459.14469,5647770068.10489,6246980914.24076,6835902991.54738,7411841602.34389,8015954466.40738,8634592868.17024,9218835523.30853,9781611338.57981,10349273053.8115,10717690044.9971,11287573202.8341,11634948483.2199,12022584284.5276,12313907582.1837,12573234551.7699,12820740003.5672,12997329494.09,13201380063.9819,13388971428.1282,13558490386.6941,13754832744.8118,13939111867.1393,14285696694.9914,14595950398.1946,14937548866.9323,15478203965.0227,16152209421.4499,17485740716.2306,20936256491.7619,24281260795.9489,24801061334.0149,23938701607.5153,22430061708.5962,20677913517.1772,18742847770.3648,16385930706.4295,14144501961.2417,11907131224.4672,9889270093.35688,7972426218.75372,6362692727.42439,4902381164.862,3531162916.42268,2184923621.91113,903189196.499849],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2007\",\"line\":{\"color\":\"rgba(238,0,83,1)\",\"simplify\":false},\"name\":\"Gurnard\",\"marker\":{\"color\":\"rgba(238,0,83,1)\",\"line\":{\"color\":\"rgba(238,0,83,1)\"}},\"textfont\":{\"color\":\"rgba(238,0,83,1)\"},\"error_y\":{\"color\":\"rgba(238,0,83,1)\"},\"error_x\":{\"color\":\"rgba(238,0,83,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780],\"y\":[3201475296.30867,3736947965.7654,4318595814.4658,5010388583.971,5764033722.48775,6574950490.90566,7517395611.07523,8514552811.4867,9569599429.63729,10744920380.5059,12036284865.178,13387240098.1145,14824645580.7068,16400629399.55,17793326358.6755,19669132075.9941,21319488615.0516,23205453852.0397,25075406279.1595,27048219905.1637,29167163761.9842,31290602567.4236,33640166885.9,36103994937.2307,38659186855.3842,41415362483.299,44239681103.0252,47682261107.4332,51096819401.8104,54674762316.9781,58977909491.6481,63386588116.5311,67804643559.5761,73156688870.8494,78581881720.5631,84246994337.0895,90351337122.3236,96115459787.4524,102180555816.043,108956149097.014,116938621449.237,135632127081.571,155389734247.263,159652762650.663,152407118832.408,143401179014.685,132866075743.904,122509533487.912,112643966548.244,103550280158.353,96467969354.7687,90890773087.0104,87423884082.1161,86965847354.8441,86450356516.7336,86901401831.9658,84808980629.2313,74514568051.1981,54836772565.4181,28680719811.1071,4742500668.03488],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2007\",\"line\":{\"color\":\"rgba(180,41,121,1)\",\"simplify\":false},\"name\":\"Haddock\",\"marker\":{\"color\":\"rgba(180,41,121,1)\",\"line\":{\"color\":\"rgba(180,41,121,1)\"}},\"textfont\":{\"color\":\"rgba(180,41,121,1)\"},\"error_y\":{\"color\":\"rgba(180,41,121,1)\"},\"error_x\":{\"color\":\"rgba(180,41,121,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337],\"y\":[2257197887.29459,2634034869.41034,3046042631.31974,3539610828.40103,4082242382.51074,4672447453.09105,5365164829.76602,6108247188.64952,6906422918.98675,7807677522.63374,8812777724.42319,9884209760.20235,11045346224.418,12339453896.478,13527256040.9081,15118529765.3874,16576885318.3702,18260844564.1794,19978231916.7135,21825746497.7559,23842874643.5968,25917790222.2762,28237336394.6163,30714162716.8869,33332579278.7086,36191900480.8937,39182266776.5383,42797295314.3532,46476028037.3869,50395829554.9615,55088092638.2434,59994577977.631,65033408125.242,71113559309.5563,77450647983.4592,84337807825.4823,92698202146.9142,105963869178.044,142338498045.771,209018587125.232,226853953662.485,190021064775.893,135628285002.745,84042846213.2226,41485870283.9415,12869431352.3752],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2007\",\"line\":{\"color\":\"rgba(222,83,255,1)\",\"simplify\":false},\"name\":\"Herring\",\"marker\":{\"color\":\"rgba(222,83,255,1)\",\"line\":{\"color\":\"rgba(222,83,255,1)\"}},\"textfont\":{\"color\":\"rgba(222,83,255,1)\"},\"error_y\":{\"color\":\"rgba(222,83,255,1)\"},\"error_x\":{\"color\":\"rgba(222,83,255,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117],\"y\":[15475321722.3455,17335482616.0128,19172019148.9129,21225331875.9975,23232915920.4734,25141960173.9752,27192891030.1667,29054995013.9257,30723844063.8322,32377908602.6266,33967240013.975,35317112226.4842,36507415649.5345,37664421508.1208,38087802150.6134,39244530462.3201,39670615006.5166,40311901631.5799,40728663179.072,41156568099.6462,41670529375.143,42078720151.5216,42692648099.31,43359759107.7879,44058949855.0354,44915752914.5186,45790072923.9134,47357356754.0288,49389129979.9087,54806193430.7699,72250480745.7869,94110188332.866,95366494794.6681,84698025564.4443,70289055835.0121,54612443974.961,38247532496.4811,21915519841.8414,8273272215.82864,353483071.21206],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2007\",\"line\":{\"color\":\"rgba(141,166,0,1)\",\"simplify\":false},\"name\":\"N.pout\",\"marker\":{\"color\":\"rgba(141,166,0,1)\",\"line\":{\"color\":\"rgba(141,166,0,1)\"}},\"textfont\":{\"color\":\"rgba(141,166,0,1)\"},\"error_y\":{\"color\":\"rgba(141,166,0,1)\"},\"error_x\":{\"color\":\"rgba(141,166,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350],\"y\":[98848993474.0739,107197361800.314,114958469753.65,123585648647.135,131513681814.825,138492580025.967,145862038996.455,151832012367.062,156449701159.696,160665544197.576,164232970443.295,166347220710.441,167463876727.34,168213368089.95,165580884296.695,166057362774.059,163396714391.579,161678181661.863,159163454960.932,156872016538.807,155138002402.447,153310122146.904,152597300543.209,152483199637.476,152949967605.402,154489709662.902,156643467326.422,161355656338.587,166387841724.764,172474375499.224,181383231570.939,191179615955.831,201682296558.074,215742869684.71,230943401009.838,248043607556.487,268391261484.76,293266682654.047,339524119037.896,418329049512.262,467982574066.886,485742162937.161,485602511605.746,478737422425.868,457072341211.365,430530265492.201,394237834461.702,352065661354.329,305158381641.807,255335518370.695,206839433594.376,159455943603.603,115640333887.608,77838377328.5077,45600385405.2062,22746722488.7201,8821235561.74211,2167636169.73748,135283199.390985],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2007\",\"line\":{\"color\":\"rgba(0,121,87,1)\",\"simplify\":false},\"name\":\"Plaice\",\"marker\":{\"color\":\"rgba(0,121,87,1)\",\"line\":{\"color\":\"rgba(0,121,87,1)\"}},\"textfont\":{\"color\":\"rgba(0,121,87,1)\"},\"error_y\":{\"color\":\"rgba(0,121,87,1)\"},\"error_x\":{\"color\":\"rgba(0,121,87,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82],\"y\":[47510625093.0489,46126553990.2519,44510559902.0984,43293780177.3813,41929993027.9839,40440706668.0931,39272413776.5053,37960455089.4882,36589988591.6878,35417300547.3184,34386277084.6238,33333773023.1501,32357022658.4385,31562851974.4602,30371845138.968,29954455336.4707,29136900050.3365,28622254890.8796,28064526272.7744,27608832615.228,27278878758.6849,26926589589.6055,26732075454.1286,26572816037.2565,26415017131.4056,26313428082.6872],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2007\",\"line\":{\"color\":\"rgba(0,255,0,1)\",\"simplify\":false},\"name\":\"Resource\",\"marker\":{\"color\":\"rgba(0,255,0,1)\",\"line\":{\"color\":\"rgba(0,255,0,1)\"}},\"textfont\":{\"color\":\"rgba(0,255,0,1)\"},\"error_y\":{\"color\":\"rgba(0,255,0,1)\"},\"error_x\":{\"color\":\"rgba(0,255,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390,1650,1970,2360,2810,3350,4000,4780,5700,6800,8120,9690,11600,13800,16500,19600,23400,28000,33400],\"y\":[316916876.830744,391401546.908917,479231412.667753,589772124.581009,720411233.121866,873231501.318155,1061532428.28175,1278796076.07319,1528783192.91436,1825572842.6823,2173977802.51458,2568839971.62843,3019456877.76546,3541804221.62794,4068903978.25464,4755829702.27788,5441827088.87956,6242334116.4384,7096212090.77415,8038139446.86448,9085759191.36926,10198774575.0455,11452094352.178,12814530913.1076,14280487034.2607,15892739958.5841,17602083406.3394,19631248853.5664,21720385887.229,23937274693.6854,26519058069.7893,29176130415.2962,31834960714.2175,34904423828.3591,37953500031.8407,41031857212.2007,44209005385.2526,47074570238.9185,49889531612.3893,52611142978.1176,54232405271.062,55995576228.4725,57194522813.5536,58389724089.8029,58532462771.9059,58900115172.7604,58875477703.5429,58899590853.2836,58960444057.851,59098587320.2015,60309853442.9755,64151375314.3136,72959880557.3308,80101348669.0297,80937164992.288,81960163428.3559,84591043421.0094,87931400669.3301,93773128364.3405,102914770012.908,116164179968.493,133819408117.933,157236823357.502,186710906116.79,220134636220.249,255248803707.994,280730983104.073,294877462544.933,284679704336.646,252462400360.658,193986365015.66,113238266130.945],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2007\",\"line\":{\"color\":\"rgba(160,141,251,1)\",\"simplify\":false},\"name\":\"Saithe\",\"marker\":{\"color\":\"rgba(160,141,251,1)\",\"line\":{\"color\":\"rgba(160,141,251,1)\"}},\"textfont\":{\"color\":\"rgba(160,141,251,1)\"},\"error_y\":{\"color\":\"rgba(160,141,251,1)\"},\"error_x\":{\"color\":\"rgba(160,141,251,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4],\"y\":[2403265291.41527,2980634981.34861,3671793352.11666,4555941934.70154,5624091559.50608,6907208411.61968,8531760687.30534,10475529331.9287,12806415879.2043,15693373248.0675,19249139573.1402,23517412288.3191,28691931476.2602,35067563203.7337,42133567936.5104,51686458945.6251,62281058014.6491,75547681124.8343,91838569296.4626,116904090910.263,171199454906.661,259396215954.967,337977105389.354,403176319169.455,465970109458.556,529891110744.381,590265816511.958,647428268019.175,680710627796.622,674864779181.987,614546888379.235,474708404415.787,264340079114.862,40254440059.954],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2007\",\"line\":{\"color\":\"rgba(98,55,226,1)\",\"simplify\":false},\"name\":\"Sandeel\",\"marker\":{\"color\":\"rgba(98,55,226,1)\",\"line\":{\"color\":\"rgba(98,55,226,1)\"}},\"textfont\":{\"color\":\"rgba(98,55,226,1)\"},\"error_y\":{\"color\":\"rgba(98,55,226,1)\"},\"error_x\":{\"color\":\"rgba(98,55,226,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973],\"y\":[122020825.697656,146276999.557295,173957771.695518,208084894.960354,247253979.935496,291801623.054801,345717180.762609,406351555.869622,474566519.182437,554365623.550825,646775705.873629,749986867.183664,866642478.094796,1001298787.41452,1135350839.74753,1312573117.31575,1488865922.68224,1696956470.82406,1921254973.92802,2172636541.02313,2457630204.30189,2767501404.88181,3125227582.30057,3525709139.93905,3971454291.46335,4479393307.3097,5041930579.50592,5730932394.85983,6481869109.87438,7325648752.49599,8350610646.02191,9486480486.38659,10729232399.7661,12247473280.6178,13952536285.5151,16058407072.2005,19573110939.421,26848102020.5526,35710522924.9431,40946548842.5493,42924136834.6549,43727837392.2282,42883959381.3401,40651326697.6326,36245885715.2297,30695158684.8907,24020173038.8639,17048778501.9089,10490854320.5559,5139083298.64718,1670152687.44686,139932385.470364],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2007\",\"line\":{\"color\":\"rgba(108,170,114,1)\",\"simplify\":false},\"name\":\"Sole\",\"marker\":{\"color\":\"rgba(108,170,114,1)\",\"line\":{\"color\":\"rgba(108,170,114,1)\"}},\"textfont\":{\"color\":\"rgba(108,170,114,1)\"},\"error_y\":{\"color\":\"rgba(108,170,114,1)\"},\"error_x\":{\"color\":\"rgba(108,170,114,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8],\"y\":[1467625076.87314,1676323285.57695,1897092610.3013,2156670280.00518,2432155193.18697,2720295829.44304,3049822821.04614,3386848641.28241,3730945482.94235,4104029116.29515,4500973348.47881,4897555286.99052,5301117766.86504,5726921870.94755,6061008565.51357,6528377714.10388,6885550382.63527,7278676128.37751,7612876002.17181,7899849578.58142,8122010488.74293,8236633771.15693,8327027922.80115,8389380529.46154,8458915701.50356,8716442581.92308,9884990890.28224,13790565109.8455,16986815492.2359,13927589453.3438,8390691168.7694,3609873520.19022,793065990.122071],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2007\",\"line\":{\"color\":\"rgba(129,95,0,1)\",\"simplify\":false},\"name\":\"Sprat\",\"marker\":{\"color\":\"rgba(129,95,0,1)\",\"line\":{\"color\":\"rgba(129,95,0,1)\"}},\"textfont\":{\"color\":\"rgba(129,95,0,1)\"},\"error_y\":{\"color\":\"rgba(129,95,0,1)\"},\"error_x\":{\"color\":\"rgba(129,95,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true},{\"x\":[0.118,0.141,0.168,0.201,0.24,0.286,0.342,0.408,0.486,0.58,0.693,0.827,0.987,1.18,1.4,1.68,2,2.39,2.85,3.4,4.06,4.84,5.78,6.9,8.23,9.82,11.7,14,16.7,19.9,23.8,28.4,33.8,40.4,48.2,57.5,68.7,81.9,97.8,117,139,166,198,237,282,337,402,480,573,683,816,973,1160,1390],\"y\":[1097343802.0105,1268683291.86607,1451046092.77423,1664747161.18735,1892193549.26153,2130688398.57392,2402858721.67342,2682488159.81986,2969765558.27667,3283183287.53143,3620339358.57016,3963857135.86687,4322151342.10892,4710875201.87081,5039391870.53388,5498608862.74685,5890606354.73002,6346673823.77887,6799955742.84858,7285862916.67071,7818661850.78323,8362786369.76812,8979884089.50145,9643459291.62841,10351248302.2076,11136650789.2013,11968553649.7266,13011247254.071,14088996626.816,15262488178.3698,16701852158.0461,18249492057.7356,19897668370.7237,21958119977.9364,24272114871.5084,27275915981.1086,32833747143.8514,43407349514.4993,53610896330.1738,59743736423.9201,63196887919.578,66600926948.797,69292286187.9342,71778194002.2259,72508647755.0314,72775798331.6539,71566764238.3576,69218105174.6973,65488795776.4765,59968607378.4553,52272347898.8344,40161921922.3294,22232846211.3933,1576745534.30782],\"type\":\"scatter\",\"mode\":\"lines\",\"frame\":\"2007\",\"line\":{\"color\":\"rgba(67,0,121,1)\",\"simplify\":false},\"name\":\"Whiting\",\"marker\":{\"color\":\"rgba(67,0,121,1)\",\"line\":{\"color\":\"rgba(67,0,121,1)\"}},\"textfont\":{\"color\":\"rgba(67,0,121,1)\"},\"error_y\":{\"color\":\"rgba(67,0,121,1)\"},\"error_x\":{\"color\":\"rgba(67,0,121,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"visible\":true}],\"traces\":[0,1,2,3,4,5,6,7,8,9,10,11,12]}],\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}# }"},{"path":"https://sizespectrum.org/mizer/dev/reference/box_pred_kernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Box predation kernel — box_pred_kernel","title":"Box predation kernel — box_pred_kernel","text":"predation kernel predator/prey mass ratio uniformly distributed interval.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/box_pred_kernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Box predation kernel — box_pred_kernel","text":"","code":"box_pred_kernel(ppmr, ppmr_min, ppmr_max)"},{"path":"https://sizespectrum.org/mizer/dev/reference/box_pred_kernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Box predation kernel — box_pred_kernel","text":"ppmr vector predator/prey size ratios ppmr_min Minimum predator/prey mass ratio ppmr_max Maximum predator/prey mass ratio","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/box_pred_kernel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Box predation kernel — box_pred_kernel","text":"vector giving value predation kernel predator/prey mass ratios ppmr argument.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/box_pred_kernel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Box predation kernel — box_pred_kernel","text":"Writing predator mass \\(w\\) prey mass \\(w_p\\), feeding kernel 1 \\(w/w_p\\) ppmr_min ppmr_max zero otherwise. parameters need given species parameter dataframe columns ppmr_min ppmr_max.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/calibrateBiomass.html","id":null,"dir":"Reference","previous_headings":"","what":"Calibrate the model scale to match total observed biomass — calibrateBiomass","title":"Calibrate the model scale to match total observed biomass — calibrateBiomass","text":"Given MizerParams object params biomass observations available least species via biomass_observed column species_params data frame, function returns updated MizerParams object rescaled scaleModel() total biomass model agrees total observed biomass.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/calibrateBiomass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calibrate the model scale to match total observed biomass — calibrateBiomass","text":"","code":"calibrateBiomass(params)"},{"path":"https://sizespectrum.org/mizer/dev/reference/calibrateBiomass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calibrate the model scale to match total observed biomass — calibrateBiomass","text":"params MizerParams object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/calibrateBiomass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calibrate the model scale to match total observed biomass — calibrateBiomass","text":"MizerParams object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/calibrateBiomass.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calibrate the model scale to match total observed biomass — calibrateBiomass","text":"Biomass observations usually include individuals certain size. size specified biomass_cutoff column species parameter data frame. missing, assumed sizes included observed biomass, .e., includes larval biomass. using function total biomass model match total biomass, summed species. However biomasses individual species match observations yet, species biomasses high others low. function may want use matchBiomasses(). described blog post https://bit.ly/2YqXESV. observations yearly yield instead biomasses, can use calibrateYield() instead function.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/calibrateBiomass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calibrate the model scale to match total observed biomass — calibrateBiomass","text":"","code":"params <- NS_params species_params(params)$biomass_observed <-      c(0.8, 61, 12, 35, 1.6, 20, 10, 7.6, 135, 60, 30, 78) species_params(params)$biomass_cutoff <- 10 params2 <- calibrateBiomass(params) plotBiomassObservedVsModel(params2)"},{"path":"https://sizespectrum.org/mizer/dev/reference/calibrateYield.html","id":null,"dir":"Reference","previous_headings":"","what":"Calibrate the model scale to match total observed yield — calibrateYield","title":"Calibrate the model scale to match total observed yield — calibrateYield","text":"Given MizerParams object params yield observations available least species via yield_observed column species_params data frame, function returns updated MizerParams object rescaled scaleModel() total yield model agrees total observed yield.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/calibrateYield.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calibrate the model scale to match total observed yield — calibrateYield","text":"","code":"calibrateYield(params)"},{"path":"https://sizespectrum.org/mizer/dev/reference/calibrateYield.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calibrate the model scale to match total observed yield — calibrateYield","text":"params MizerParams object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/calibrateYield.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calibrate the model scale to match total observed yield — calibrateYield","text":"MizerParams object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/calibrateYield.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calibrate the model scale to match total observed yield — calibrateYield","text":"using function total yield model match total observed yield, summed species. However yields individual species match observations yet, species yields high others low. function may want use matchYields(). observations species biomasses instead yields, can use calibrateBiomass() instead function.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/calibrateYield.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calibrate the model scale to match total observed yield — calibrateYield","text":"","code":"params <- NS_params species_params(params)$yield_observed <-     c(0.8, 61, 12, 35, 1.6, 20, 10, 7.6, 135, 60, 30, 78) gear_params(params)$catchability <-     c(1.3, 0.065, 0.31, 0.18, 0.98, 0.24, 0.37, 0.46, 0.18, 0.30, 0.27, 0.39) params2 <- calibrateYield(params) plotYieldObservedVsModel(params2) #> The following species are not being fished in your model and will not be included in the plot: Sprat, Sandeel, N.pout."},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/compareParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare two MizerParams objects and print out differences — compareParams","text":"","code":"compareParams(params1, params2)"},{"path":"https://sizespectrum.org/mizer/dev/reference/compareParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare two MizerParams objects and print out differences — compareParams","text":"params1 First MizerParams object params2 Second MizerParams object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/compareParams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare two MizerParams objects and print out differences — compareParams","text":"","code":"if (FALSE) { sp1 <- NS_species_params params1 <- newMultispeciesParams(sp1) sp2 <- sp1 sp2$w_mat[1] <- 10 params2 <- newMultispeciesParams(sp2) compareParams(params1, params2) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/constantEggRDI.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose egg production to keep egg density constant — constantEggRDI","title":"Choose egg production to keep egg density constant — constantEggRDI","text":"new egg production set compensate loss individuals smallest size class growth mortality. result modified density dependence, used together noRDD() function, see example.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/constantEggRDI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose egg production to keep egg density constant — constantEggRDI","text":"","code":"constantEggRDI(params, n, e_growth, mort, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/constantEggRDI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose egg production to keep egg density constant — constantEggRDI","text":"params MizerParams object n matrix species abundances (species x size). e_growth two dimensional array (species x size) holding energy available growth calculated mizerEGrowth(). mort two dimensional array (species x size) holding mortality rate calculated mizerMort(). ... Unused","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/constantEggRDI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Choose egg production to keep egg density constant — constantEggRDI","text":"","code":"if (FALSE) { # choose an example params object params <- NS_params # We set the reproduction rate functions params <- setRateFunction(params, \"RDI\", \"constantEggRDI\") params <- setRateFunction(params, \"RDD\", \"noRDD\") # Now the egg density should stay fixed no matter how we fish sim <- project(params, effort = 10, progress_bar = FALSE) # To check that indeed the egg densities have not changed, we first construct # the indices for addressing the egg densities no_sp <- nrow(params@species_params) idx <- (params@w_min_idx - 1) * no_sp + (1:no_sp) # Now we can check equality between egg densities at the start and the end all.equal(finalN(sim)[idx], initialN(params)[idx]) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/constantRDD.html","id":null,"dir":"Reference","previous_headings":"","what":"Give constant reproduction rate — constantRDD","title":"Give constant reproduction rate — constantRDD","text":"Simply returns value species_params$constant_reproduction.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/constantRDD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Give constant reproduction rate — constantRDD","text":"","code":"constantRDD(rdi, species_params, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/constantRDD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Give constant reproduction rate — constantRDD","text":"rdi Vector density-independent reproduction rates \\(R_{di}\\) species. species_params species parameter dataframe. Must contain column constant_reproduction. ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/constantRDD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Give constant reproduction rate — constantRDD","text":"Vector species_params$constant_reproduction","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/constant_other.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to keep other components constant — constant_other","title":"Helper function to keep other components constant — constant_other","text":"Helper function keep components constant","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/constant_other.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to keep other components constant — constant_other","text":"","code":"constant_other(params, n_other, component, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/constant_other.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to keep other components constant — constant_other","text":"params MizerParams object n_other Abundances components component Name component updated ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/customFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace a mizer function with a custom version — customFunction","title":"Replace a mizer function with a custom version — customFunction","text":"function allows make arbitrary changes mizer works allowing replace mizer function version. last resort, find can use standard mizer extension mechanism achieve goal.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/customFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace a mizer function with a custom version — customFunction","text":"","code":"customFunction(name, fun)"},{"path":"https://sizespectrum.org/mizer/dev/reference/customFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace a mizer function with a custom version — customFunction","text":"name Name mizer function replace fun custom function use replacement","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/customFunction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Replace a mizer function with a custom version — customFunction","text":"function need overwrite one mizer rate functions, use setRateFunction() instead function. Similarly use setResource() change resource dynamics setReproduction() change density-dependence reproduction. also investigate whether can achieve goal introducing additional ecosystem components setComponent(). find goal really require overwrite mizer function, please also create issue mizer issue tracker https://github.com/sizespectrum/mizer/issues describe goal, interesting mizer community may motivate future improvements mizer functionality. Note customFunction() overwrites function used mizer code. overwrite function exported mizer. become clear run code Examples section. function way check replacement function compatible mizer. Calling function can totally break mizer. However can always undo effect reloading mizer ","code":"detach(package:mizer, unload = TRUE) library(mizer)"},{"path":"https://sizespectrum.org/mizer/dev/reference/customFunction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace a mizer function with a custom version — customFunction","text":"","code":"if (FALSE) { fake_project <- function(...) \"Fake\" customFunction(\"project\", fake_project) mizer::project(NS_params) # This will print \"Fake\" project(NS_params) # This will still use the old project() function # To undo the effect: customFunction(\"project\", project) mizer::project(NS_params) # This will again use the old project() }"},{"path":"https://sizespectrum.org/mizer/dev/reference/default_pred_kernel_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Set defaults for predation kernel parameters — default_pred_kernel_params","title":"Set defaults for predation kernel parameters — default_pred_kernel_params","text":"predation kernel type specified species, set \"lognormal\" default values set parameters beta sigma.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/default_pred_kernel_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set defaults for predation kernel parameters — default_pred_kernel_params","text":"","code":"default_pred_kernel_params(object)"},{"path":"https://sizespectrum.org/mizer/dev/reference/default_pred_kernel_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set defaults for predation kernel parameters — default_pred_kernel_params","text":"object Either MizerParams object species parameter data frame","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/default_pred_kernel_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set defaults for predation kernel parameters — default_pred_kernel_params","text":"object updated columns species params data frame.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/defaults_edition.html","id":null,"dir":"Reference","previous_headings":"","what":"Default editions — defaults_edition","title":"Default editions — defaults_edition","text":"Function set get edition default choices used.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/defaults_edition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default editions — defaults_edition","text":"","code":"defaults_edition(edition = NULL)"},{"path":"https://sizespectrum.org/mizer/dev/reference/defaults_edition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default editions — defaults_edition","text":"edition NULL numerical value.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/defaults_edition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default editions — defaults_edition","text":"current edition number.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/defaults_edition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default editions — defaults_edition","text":"mizer functions creating new models make lot choices default values parameters provided user. Sometimes find better ways choose defaults update mizer accordingly. , increase edition number. call defaults_edition() without argument returns currently active edition. Otherwise sets active edition given value. Users want existing code creating models change behaviour run future versions mizer explicitly set desired defaults edition top code. recent edition edition 2. become default next release. current default edition 1. following defaults changed edition 2: catchability = 0.3 instead 1 initial effort = 1 instead 0","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/different.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether two objects are different — different","title":"Check whether two objects are different — different","text":"Check whether two objects numerically different, ignoring attributes","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/different.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether two objects are different — different","text":"","code":"different(a, b)"},{"path":"https://sizespectrum.org/mizer/dev/reference/different.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether two objects are different — different","text":"First object b Second object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/different.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether two objects are different — different","text":"TRUE FALSE","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/distanceMaxRelRDI.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure distance between current and previous state in terms of RDI — distanceMaxRelRDI","title":"Measure distance between current and previous state in terms of RDI — distanceMaxRelRDI","text":"function can used projectToSteady() decide sufficient convergence steady state achieved.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/distanceMaxRelRDI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure distance between current and previous state in terms of RDI — distanceMaxRelRDI","text":"","code":"distanceMaxRelRDI(params, current, previous)"},{"path":"https://sizespectrum.org/mizer/dev/reference/distanceMaxRelRDI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure distance between current and previous state in terms of RDI — distanceMaxRelRDI","text":"params MizerParams current named list entries n, n_pp n_other describing current state previous named list entries n, n_pp n_other describing previous state","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/distanceMaxRelRDI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure distance between current and previous state in terms of RDI — distanceMaxRelRDI","text":"largest absolute relative change rdi: max(abs((current_rdi - previous_rdi) / previous_rdi))","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/distanceSSLogN.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure distance between current and previous state in terms of fish abundances — distanceSSLogN","title":"Measure distance between current and previous state in terms of fish abundances — distanceSSLogN","text":"Calculates sum squared difference log(N) current previous state. function can used projectToSteady() decide sufficient convergence steady state achieved.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/distanceSSLogN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure distance between current and previous state in terms of fish abundances — distanceSSLogN","text":"","code":"distanceSSLogN(params, current, previous)"},{"path":"https://sizespectrum.org/mizer/dev/reference/distanceSSLogN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure distance between current and previous state in terms of fish abundances — distanceSSLogN","text":"params MizerParams current named list entries n, n_pp n_other describing current state previous named list entries n, n_pp n_other describing previous state","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/distanceSSLogN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure distance between current and previous state in terms of fish abundances — distanceSSLogN","text":"sum squares difference logs (nonzero) fish abundances n: sum((log(current$n) - log(previous$n))^2)","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/double_sigmoid_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Length based double-sigmoid selectivity function — double_sigmoid_length","title":"Length based double-sigmoid selectivity function — double_sigmoid_length","text":"hump-shaped selectivity function sigmoidal rise independent sigmoidal drop-. drop-distinguishes function sigmoid_length() intended model escape large individuals fishing gear.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/double_sigmoid_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Length based double-sigmoid selectivity function — double_sigmoid_length","text":"","code":"double_sigmoid_length(w, l25, l50, l50_right, l25_right, species_params, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/double_sigmoid_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Length based double-sigmoid selectivity function — double_sigmoid_length","text":"w size individual. l25 length gives selectivity 25%. l50 length gives selectivity 50%. l50_right length gives selectivity 50%. l25_right length gives selectivity 25%. species_params list species params current species. Used get length-weight parameters b ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/double_sigmoid_length.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Length based double-sigmoid selectivity function — double_sigmoid_length","text":"selectivity obtained product two sigmoidal curves, one rising one dropping. sigmoidal rise based two parameters l25 l50 determine length 25% 50% stock selected respectively. sigmoidal drop-based two parameters l50_right l25_right determine length selectivity curve dropped back 50% 25% respectively. size-based model weight based, selectivity function length based, uses length-weight parameters b convert length weight.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/emptyParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Create empty MizerParams object of the right size — emptyParams","title":"Create empty MizerParams object of the right size — emptyParams","text":"internal function. Sets valid MizerParams object slots initialised given dimension names, slots left empty. function used functions set full parameter objects.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/emptyParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create empty MizerParams object of the right size — emptyParams","text":"","code":"emptyParams(   species_params,   gear_params = data.frame(),   no_w = 100,   min_w = 0.001,   max_w = NA,   min_w_pp = 1e-12 )"},{"path":"https://sizespectrum.org/mizer/dev/reference/emptyParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create empty MizerParams object of the right size — emptyParams","text":"species_params data frame species-specific parameter values. gear_params data frame gear-specific parameter values. no_w number size bins consumer spectrum. min_w Sets size eggs species given w_min column species_params dataframe. max_w largest size consumer spectrum. default set largest w_inf specified species_params data frame. min_w_pp smallest size resource spectrum.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/emptyParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create empty MizerParams object of the right size — emptyParams","text":"empty valid MizerParams object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/emptyParams.html","id":"size-grid","dir":"Reference","previous_headings":"","what":"Size grid","title":"Create empty MizerParams object of the right size — emptyParams","text":"size grid created log-sizes equally spaced. spacing chosen no_w fish size bins, smallest starting min_w largest starting max_w. resource spectrum larger set bins containing additional bins min_w, log size. number extra bins min_w_pp comes lie within smallest bin.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/emptyParams.html","id":"changes-to-species-params","dir":"Reference","previous_headings":"","what":"Changes to species params","title":"Create empty MizerParams object of the right size — emptyParams","text":"species_params slot returned MizerParams object may differ data frame supplied argument function default values set missing parameters.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/finalN.html","id":null,"dir":"Reference","previous_headings":"","what":"Size spectra at end of simulation — finalN","title":"Size spectra at end of simulation — finalN","text":"Size spectra end simulation","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/finalN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Size spectra at end of simulation — finalN","text":"","code":"finalN(sim)  finalNResource(sim)"},{"path":"https://sizespectrum.org/mizer/dev/reference/finalN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Size spectra at end of simulation — finalN","text":"sim MizerSim object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/finalN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Size spectra at end of simulation — finalN","text":"finalN(): array (species x size) holding consumer number densities end simulation finalNResource(): vector holding resource number densities end simulation size classes","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/finalN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Size spectra at end of simulation — finalN","text":"","code":"str(finalN(NS_sim)) #>  num [1:12, 1:100] 1.53e+13 5.89e+12 1.10e+14 1.37e+13 1.16e+11 ... #>  - attr(*, \"dimnames\")=List of 2 #>   ..$ sp: chr [1:12] \"Sprat\" \"Sandeel\" \"N.pout\" \"Herring\" ... #>   ..$ w : chr [1:100] \"0.001\" \"0.00119\" \"0.00142\" \"0.0017\" ...  # This could also be obtained using `N()` and `idxFinalT()` identical(N(NS_sim)[idxFinalT(NS_sim), , ], finalN(NS_sim)) #> [1] TRUE str(finalNResource(NS_sim)) #>  Named num [1:218] 4.88e+35 3.40e+35 2.36e+35 1.64e+35 1.14e+35 ... #>  - attr(*, \"names\")= chr [1:218] \"8.73e-13\" \"1.04e-12\" \"1.24e-12\" \"1.48e-12\" ..."},{"path":"https://sizespectrum.org/mizer/dev/reference/finalNOther.html","id":null,"dir":"Reference","previous_headings":"","what":"Values of other ecosystem components at end of simulation — finalNOther","title":"Values of other ecosystem components at end of simulation — finalNOther","text":"Values ecosystem components end simulation","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/finalNOther.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Values of other ecosystem components at end of simulation — finalNOther","text":"","code":"finalNOther(sim)"},{"path":"https://sizespectrum.org/mizer/dev/reference/finalNOther.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Values of other ecosystem components at end of simulation — finalNOther","text":"sim MizerSim object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/finalNOther.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Values of other ecosystem components at end of simulation — finalNOther","text":"named list holding values ecosystem components end simulation","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/gear_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Gear parameters — gear_params","title":"Gear parameters — gear_params","text":"functions allow get set gear parameters stored MizerParams object. used setFishing() set selectivity catchability thus together fishing effort determine fishing mortality.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/gear_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gear parameters — gear_params","text":"","code":"gear_params(params)  gear_params(params) <- value"},{"path":"https://sizespectrum.org/mizer/dev/reference/gear_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gear parameters — gear_params","text":"params MizerParams object value data frame gear parameters.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/gear_params.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gear parameters — gear_params","text":"gear_params data one row gear-species pair one column parameter determines gear interacts species. details see setFishing(). change gear parameter, used recalculate selectivity catchability arrays calling setFishing(), unless previously set hand.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/gear_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gear parameters — gear_params","text":"","code":"params <- NS_params # gears set up in example gear_params(params) #>                           gear species   sel_func knife_edge_size catchability #> Sprat, Industrial   Industrial   Sprat knife_edge              13            1 #> Sandeel, Industrial Industrial Sandeel knife_edge               4            1 #> N.pout, Industrial  Industrial  N.pout knife_edge              23            1 #> Herring, Pelagic       Pelagic Herring knife_edge              99            1 #> Dab, Beam                 Beam     Dab knife_edge              21            1 #> Whiting, Otter           Otter Whiting knife_edge              75            1 #> Sole, Beam                Beam    Sole knife_edge              78            1 #> Gurnard, Otter           Otter Gurnard knife_edge              39            1 #> Plaice, Beam              Beam  Plaice knife_edge             105            1 #> Haddock, Otter           Otter Haddock knife_edge             165            1 #> Cod, Otter               Otter     Cod knife_edge            1606            1 #> Saithe, Otter            Otter  Saithe knife_edge            1076            1 # setting totally different gears gear_params(params) <- data.frame(     gear = c(\"gear1\", \"gear2\", \"gear1\"),     species = c(\"Cod\", \"Cod\", \"Haddock\"),     catchability = c(0.5, 2, 1),     sel_fun = c(\"sigmoid_weight\", \"knife_edge\", \"sigmoid_weight\"),     sigmoidal_weight = c(1000, NA, 800),     sigmoidal_sigma = c(100, NA, 100),     knife_edge_size = c(NA, 1000, NA)     ) gear_params(params) #>                 gear species catchability        sel_fun sigmoidal_weight #> Cod, gear1     gear1     Cod          0.5 sigmoid_weight             1000 #> Cod, gear2     gear2     Cod          2.0     knife_edge               NA #> Haddock, gear1 gear1 Haddock          1.0 sigmoid_weight              800 #>                sigmoidal_sigma knife_edge_size   sel_func #> Cod, gear1                 100            1606 knife_edge #> Cod, gear2                  NA            1000 knife_edge #> Haddock, gear1             100             165 knife_edge # changing an individual entry gear_params(params)[\"Cod, gear1\", \"catchability\"] <- 0.8"},{"path":"https://sizespectrum.org/mizer/dev/reference/getBiomass.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the total biomass of each species within a size range at each time\nstep. — getBiomass","title":"Calculate the total biomass of each species within a size range at each time\nstep. — getBiomass","text":"Calculates total biomass time within user defined size limits. default option use whole size range. can specify minimum maximum weight length range species. Lengths take precedence weights (.e. min_l min_w supplied, min_l used).","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getBiomass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the total biomass of each species within a size range at each time\nstep. — getBiomass","text":"","code":"getBiomass(object, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/getBiomass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the total biomass of each species within a size range at each time\nstep. — getBiomass","text":"object object class MizerParams MizerSim. ... Arguments passed get_size_range_array min_w Smallest weight size range. Defaults smallest weight model. max_w Largest weight size range. Defaults largest weight model. min_l Smallest length size range. supplied, takes precedence min_w. max_l Largest length size range. supplied, takes precedence max_w.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getBiomass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the total biomass of each species within a size range at each time\nstep. — getBiomass","text":"called MizerParams object, vector biomass grams species model. called MizerSim object, array (time x species) containing biomass grams time step species.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getBiomass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the total biomass of each species within a size range at each time\nstep. — getBiomass","text":"","code":"biomass <- getBiomass(NS_sim) biomass[\"1972\", \"Herring\"] #> [1] 218218354800 biomass <- getBiomass(NS_sim, min_w = 10, max_w = 1000) biomass[\"1972\", \"Herring\"] #> [1] 154290431041"},{"path":"https://sizespectrum.org/mizer/dev/reference/getCommunitySlope.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the slope of the community abundance — getCommunitySlope","title":"Calculate the slope of the community abundance — getCommunitySlope","text":"Calculates slope community abundance time performing linear regression logged total numerical abundance weight logged weights (natural logs, log base 10, used). can specify minimum maximum weight length range species. Lengths take precedence weights (.e. min_l min_w supplied, min_l used). can also specify species used calculation.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getCommunitySlope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the slope of the community abundance — getCommunitySlope","text":"","code":"getCommunitySlope(sim, species = NULL, biomass = TRUE, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/getCommunitySlope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the slope of the community abundance — getCommunitySlope","text":"sim MizerSim object species species selected. Optional. default target species selected. vector species names, numeric vector species indices, logical vector indicating species whether selected (TRUE) . biomass Boolean. TRUE (default), abundance based biomass, FALSE abundance based numbers. ... Arguments passed get_size_range_array min_w Smallest weight size range. Defaults smallest weight model. max_w Largest weight size range. Defaults largest weight model. min_l Smallest length size range. supplied, takes precedence min_w. max_l Largest length size range. supplied, takes precedence max_w.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getCommunitySlope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the slope of the community abundance — getCommunitySlope","text":"data.frame four columns: time step, slope, intercept coefficient determination R^2.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getCommunitySlope.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the slope of the community abundance — getCommunitySlope","text":"","code":"# Slope based on biomass, using all species and sizes slope_biomass <- getCommunitySlope(NS_sim) slope_biomass[1, ] # in 1976 #>          slope intercept        r2 #> 1967 -0.830658  25.43745 0.8878355 slope_biomass[idxFinalT(NS_sim), ] # in 2010 #>           slope intercept       r2 #> 2010 -0.7925937  25.61399 0.935702  # Slope based on numbers, using all species and sizes slope_numbers <- getCommunitySlope(NS_sim, biomass = FALSE) slope_numbers[1, ] # in 1976 #>          slope intercept        r2 #> 1967 -1.830658  25.43745 0.9746487  # Slope based on biomass, using all species and sizes between 10g and 1000g slope_biomass <- getCommunitySlope(NS_sim, min_w = 10, max_w = 1000) slope_biomass[1, ] # in 1976 #>          slope intercept        r2 #> 1967 -1.526323  30.00691 0.9337066  # Slope based on biomass, using only demersal species and  # sizes between 10g and 1000g dem_species <- c(\"Dab\",\"Whiting\", \"Sole\", \"Gurnard\", \"Plaice\",                  \"Haddock\", \"Cod\", \"Saithe\") slope_biomass <- getCommunitySlope(NS_sim, species = dem_species,                                     min_w = 10, max_w = 1000) slope_biomass[1, ] # in 1976 #>           slope intercept        r2 #> 1967 -0.9704957  26.69254 0.8095734"},{"path":"https://sizespectrum.org/mizer/dev/reference/getComponent.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information about other ecosystem components — getComponent","title":"Get information about other ecosystem components — getComponent","text":"Get information ecosystem components","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getComponent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information about other ecosystem components — getComponent","text":"","code":"getComponent(params, component)"},{"path":"https://sizespectrum.org/mizer/dev/reference/getComponent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information about other ecosystem components — getComponent","text":"params MizerParams object component Name component interest. missing, list components returned.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getComponent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get information about other ecosystem components — getComponent","text":"list entries initial_value, dynamics_fun, encounter_fun, mort_fun, component_params requested component. requested component exist, NULL returned. component argument given, list lists components returned.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getCriticalFeedingLevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get critical feeding level — getCriticalFeedingLevel","title":"Get critical feeding level — getCriticalFeedingLevel","text":"critical feeding level feeding level food intake just high enough cover metabolic costs, nothing left growth reproduction.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getCriticalFeedingLevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get critical feeding level — getCriticalFeedingLevel","text":"","code":"getCriticalFeedingLevel(params)"},{"path":"https://sizespectrum.org/mizer/dev/reference/getCriticalFeedingLevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get critical feeding level — getCriticalFeedingLevel","text":"params MizerParams object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getCriticalFeedingLevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get critical feeding level — getCriticalFeedingLevel","text":"matrix (species x size) critical feeding level","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getDiet.html","id":null,"dir":"Reference","previous_headings":"","what":"Get diet of predator at size, resolved by prey species — getDiet","title":"Get diet of predator at size, resolved by prey species — getDiet","text":"Calculates rate predator particular species size consumes biomass prey species resource. diet units grams/year.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getDiet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get diet of predator at size, resolved by prey species — getDiet","text":"","code":"getDiet(   params,   n = initialN(params),   n_pp = initialNResource(params),   n_other = initialNOther(params),   proportion = TRUE )"},{"path":"https://sizespectrum.org/mizer/dev/reference/getDiet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get diet of predator at size, resolved by prey species — getDiet","text":"params MizerParams object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem proportion TRUE (default) function returns diet proportion total consumption rate. FALSE returns consumption rate grams per year.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getDiet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get diet of predator at size, resolved by prey species — getDiet","text":"array (predator species  x predator size x (prey species + resource + components) )","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getDiet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get diet of predator at size, resolved by prey species — getDiet","text":"Returns rates \\(D_{ij}(w)\\) predator species \\(\\) size \\(w\\) consumes biomass prey species \\(j\\). calculated predation kernel \\(\\phi_i(w, w_p)\\), search volume \\(\\gamma_i(w)\\), feeding level \\(f_i(w)\\), species interaction matrix \\(\\theta_{ij}\\) prey abundance density \\(N_j(w_p)\\): $$ D_{ij}(w, w_p) = (1-f_i(w)) \\gamma_i(w) \\theta_{ij} \\int N_j(w_p) \\phi_i(w, w_p) w_p dw_p. $$ prey index \\(j\\) runs species resource. also runs extra ecosystem components model defined encounter rate function. encounter rate multiplied \\(1-f_i(w)\\) give rate consumption biomass extra components. function performs integration getEncounter() aggregate prey species, multiplies \\(1-f_i(w)\\) get consumed biomass rather available biomass. Outside range sizes predator species returned rate zero.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getDiet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get diet of predator at size, resolved by prey species — getDiet","text":"","code":"diet <- getDiet(NS_params) str(diet) #>  num [1:12, 1:100, 1:13] 8.94e-18 6.86e-19 3.46e-18 1.75e-09 1.12e-17 ... #>  - attr(*, \"dimnames\")=List of 3 #>   ..$ predator: chr [1:12] \"Sprat\" \"Sandeel\" \"N.pout\" \"Herring\" ... #>   ..$ w       : chr [1:100] \"0.001\" \"0.00119\" \"0.00142\" \"0.0017\" ... #>   ..$ prey    : chr [1:13] \"Sprat\" \"Sandeel\" \"N.pout\" \"Herring\" ..."},{"path":"https://sizespectrum.org/mizer/dev/reference/getEGrowth.html","id":null,"dir":"Reference","previous_headings":"","what":"Get energy rate available for growth — getEGrowth","title":"Get energy rate available for growth — getEGrowth","text":"Calculates energy rate \\(g_i(w)\\) (grams/year) available species size growth metabolism, movement reproduction accounted .","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getEGrowth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get energy rate available for growth — getEGrowth","text":"","code":"getEGrowth(   params,   n = initialN(params),   n_pp = initialNResource(params),   n_other = initialNOther(params),   t = 0,   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/getEGrowth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get energy rate available for growth — getEGrowth","text":"params MizerParams object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem t time calculation (used standard mizer rate functions useful extensions time-dependent parameters.) ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getEGrowth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get energy rate available for growth — getEGrowth","text":"two dimensional array (prey species x prey size)","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getEGrowth.html","id":"your-own-growth-rate-function","dir":"Reference","previous_headings":"","what":"Your own growth rate function","title":"Get energy rate available for growth — getEGrowth","text":"default getEGrowth() calls mizerEGrowth(). However can replace alternative growth rate function. function called \"myEGrowth\" register MizerParams object params   function called instead mizerEGrowth(), arguments.","code":"params <- setRateFunction(params, \"EGrowth\", \"myEGrowth\")"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getEGrowth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get energy rate available for growth — getEGrowth","text":"","code":"if (FALSE) { params <- NS_params # Project with constant fishing effort for all gears for 20 time steps sim <- project(params, t_max = 20, effort = 0.5) # Get the energy at a particular time step getEGrowth(params, n = N(sim)[15, , ], n_pp = NResource(sim)[15, ], t = 15) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/getERepro.html","id":null,"dir":"Reference","previous_headings":"","what":"Get energy rate available for reproduction — getERepro","title":"Get energy rate available for reproduction — getERepro","text":"Calculates energy rate (grams/year) available reproduction growth metabolism accounted .","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getERepro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get energy rate available for reproduction — getERepro","text":"","code":"getERepro(   params,   n = initialN(params),   n_pp = initialNResource(params),   n_other = initialNOther(params),   t = 0,   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/getERepro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get energy rate available for reproduction — getERepro","text":"params MizerParams object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem t time calculation (used standard mizer rate functions useful extensions time-dependent parameters.) ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getERepro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get energy rate available for reproduction — getERepro","text":"two dimensional array (prey species x prey size) holding $$\\psi_i(w)E_{r.}(w)$$ \\(E_{r.}(w)\\) rate energy becomes available growth reproduction, calculated getEReproAndGrowth(), \\(\\psi_i(w)\\) proportion energy used reproduction. proportion taken params object set setReproduction().","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getERepro.html","id":"your-own-reproduction-rate-function","dir":"Reference","previous_headings":"","what":"Your own reproduction rate function","title":"Get energy rate available for reproduction — getERepro","text":"default getERepro() calls mizerERepro(). However can replace alternative reproduction rate function. function called \"myERepro\" register MizerParams object params   function called instead mizerERepro(), arguments.","code":"params <- setRateFunction(params, \"ERepro\", \"myERepro\")"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getERepro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get energy rate available for reproduction — getERepro","text":"","code":"if (FALSE) { params <- NS_params # Project with constant fishing effort for all gears for 20 time steps sim <- project(params, t_max = 20, effort = 0.5) # Get the energy at a particular time step getERepro(params, n = N(sim)[15, , ], n_pp = NResource(sim)[15, ], t = 15) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/getEReproAndGrowth.html","id":null,"dir":"Reference","previous_headings":"","what":"Get energy rate available for reproduction and growth — getEReproAndGrowth","title":"Get energy rate available for reproduction and growth — getEReproAndGrowth","text":"Calculates energy rate \\(E_{r.}(w)\\) (grams/year) available reproduction growth metabolism movement accounted .","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getEReproAndGrowth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get energy rate available for reproduction and growth — getEReproAndGrowth","text":"","code":"getEReproAndGrowth(   params,   n = initialN(params),   n_pp = initialNResource(params),   n_other = initialNOther(params),   t = 0,   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/getEReproAndGrowth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get energy rate available for reproduction and growth — getEReproAndGrowth","text":"params MizerParams object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem t time calculation (used standard mizer rate functions useful extensions time-dependent parameters.) ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getEReproAndGrowth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get energy rate available for reproduction and growth — getEReproAndGrowth","text":"two dimensional array (species x size) holding $$E_{r.}(w) = \\max(0, \\alpha_i\\, (1 - {\\tt feeding\\_level}_i(w))\\,                             {\\tt encounter}_i(w) - {\\tt metab}_i(w)).$$ Due form feeding level, calculated getFeedingLevel(), can also expressed $$E_{r.}(w) = \\max(0, \\alpha_i\\, {\\tt feeding\\_level}_i(w)\\,                             h_i(w) - {\\tt metab}_i(w))$$ \\(h_i\\) maximum intake rate, set setMaxIntakeRate(). assimilation rate \\(\\alpha_i\\) taken species parameter data frame params. metabolic rate metab taken params set setMetabolicRate(). return value can negative, means energy intake cover cost metabolism movement.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getEReproAndGrowth.html","id":"your-own-energy-rate-function","dir":"Reference","previous_headings":"","what":"Your own energy rate function","title":"Get energy rate available for reproduction and growth — getEReproAndGrowth","text":"default getEReproAndGrowth() calls mizerEReproAndGrowth(). However can replace alternative energy rate function. function called \"myEReproAndGrowth\" register MizerParams object params   function called instead mizerEReproAndGrowth(), arguments.","code":"params <- setRateFunction(params, \"EReproAndGrowth\", \"myEReproAndGrowth\")"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getEReproAndGrowth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get energy rate available for reproduction and growth — getEReproAndGrowth","text":"","code":"if (FALSE) { params <- NS_params # Project with constant fishing effort for all gears for 20 time steps sim <- project(params, t_max = 20, effort = 0.5) # Get the energy at a particular time step getEReproAndGrowth(params, n = N(sim)[15, , ],                     n_pp = NResource(sim)[15, ], t = 15) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/getESpawning.html","id":null,"dir":"Reference","previous_headings":"","what":"Alias for getERepro() — getESpawning","title":"Alias for getERepro() — getESpawning","text":"alias provided backward compatibility mizer version <= 1.0","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getESpawning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alias for getERepro() — getESpawning","text":"","code":"getESpawning(   params,   n = initialN(params),   n_pp = initialNResource(params),   n_other = initialNOther(params),   t = 0,   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/getESpawning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alias for getERepro() — getESpawning","text":"params MizerParams object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem t time calculation (used standard mizer rate functions useful extensions time-dependent parameters.) ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getESpawning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alias for getERepro() — getESpawning","text":"two dimensional array (prey species x prey size) holding $$\\psi_i(w)E_{r.}(w)$$ \\(E_{r.}(w)\\) rate energy becomes available growth reproduction, calculated getEReproAndGrowth(), \\(\\psi_i(w)\\) proportion energy used reproduction. proportion taken params object set setReproduction().","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getESpawning.html","id":"your-own-reproduction-rate-function","dir":"Reference","previous_headings":"","what":"Your own reproduction rate function","title":"Alias for getERepro() — getESpawning","text":"default getERepro() calls mizerERepro(). However can replace alternative reproduction rate function. function called \"myERepro\" register MizerParams object params   function called instead mizerERepro(), arguments.","code":"params <- setRateFunction(params, \"ERepro\", \"myERepro\")"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getESpawning.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Alias for getERepro() — getESpawning","text":"","code":"if (FALSE) { params <- NS_params # Project with constant fishing effort for all gears for 20 time steps sim <- project(params, t_max = 20, effort = 0.5) # Get the energy at a particular time step getERepro(params, n = N(sim)[15, , ], n_pp = NResource(sim)[15, ], t = 15) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/getEffort.html","id":null,"dir":"Reference","previous_headings":"","what":"Fishing effort used in simulation — getEffort","title":"Fishing effort used in simulation — getEffort","text":"Note array returned may exactly effort argument passed project(). saved effort stored (frequency saving determined argument t_save).","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getEffort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fishing effort used in simulation — getEffort","text":"","code":"getEffort(sim)"},{"path":"https://sizespectrum.org/mizer/dev/reference/getEffort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fishing effort used in simulation — getEffort","text":"sim MizerSim object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getEffort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fishing effort used in simulation — getEffort","text":"array (time x gear) contains fishing effort time gear.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getEffort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fishing effort used in simulation — getEffort","text":"","code":"str(getEffort(NS_sim)) #>  num [1:44, 1:12] 0 0 0 0 0 0 0 0 0 0 ... #>  - attr(*, \"dimnames\")=List of 2 #>   ..$ time: chr [1:44] \"1967\" \"1968\" \"1969\" \"1970\" ... #>   ..$ gear: chr [1:12] \"Sprat\" \"Sandeel\" \"N.pout\" \"Herring\" ..."},{"path":"https://sizespectrum.org/mizer/dev/reference/getEncounter.html","id":null,"dir":"Reference","previous_headings":"","what":"Get encounter rate — getEncounter","title":"Get encounter rate — getEncounter","text":"Returns rate predator species \\(\\) weight \\(w\\) encounters food (grams/year).","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getEncounter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get encounter rate — getEncounter","text":"","code":"getEncounter(   params,   n = initialN(params),   n_pp = initialNResource(params),   n_other = initialNOther(params),   t = 0,   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/getEncounter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get encounter rate — getEncounter","text":"params MizerParams object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem t time calculation (used standard mizer rate functions useful extensions time-dependent parameters.) ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getEncounter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get encounter rate — getEncounter","text":"named two dimensional array (predator species x predator size) encounter rates.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getEncounter.html","id":"predation-encounter","dir":"Reference","previous_headings":"","what":"Predation encounter","title":"Get encounter rate — getEncounter","text":"encounter rate \\(E_i(w)\\) predator species \\(\\) weight \\(w\\) encounters food contributions encounter fish prey resource. determined summing prey species resource spectrum integrating prey sizes \\(w_p\\), weighted predation kernel \\(\\phi(w,w_p)\\): $$ E_i(w) = \\gamma_i(w) \\int  \\left( \\theta_{ip} N_R(w_p) + \\sum_{j} \\theta_{ij} N_j(w_p) \\right)  \\phi_i(w,w_p) w_p \\, dw_p. $$ \\(N_j(w)\\) abundance density species \\(j\\) \\(N_R(w)\\) abundance density resource. overall prefactor \\(\\gamma_i(w)\\) determines predation power predator. interpreted search volume set setSearchVolume() function. predation kernel \\(\\phi(w,w_p)\\) set setPredKernel() function. species interaction matrix \\(\\theta_{ij}\\) set setInteraction() resource interaction vector \\(\\theta_{ip}\\) taken interaction_resource column params@species_params.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getEncounter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get encounter rate — getEncounter","text":"encounter rate multiplied \\(1-f_0\\) obtain consumption rate, \\(f_0\\) feeding level calculated getFeedingLevel(). used project() function performing simulations. function returns values also sizes outside size-range species. values used, meaningless. model contains additional components added setComponent() specified encounter_fun function encounters components included returned value.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getEncounter.html","id":"your-own-encounter-function","dir":"Reference","previous_headings":"","what":"Your own encounter function","title":"Get encounter rate — getEncounter","text":"default getEncounter() calls mizerEncounter(). However can replace alternative encounter function. function called \"myEncounter\" register MizerParams object params   function called instead mizerEncounter(), arguments.","code":"params <- setRateFunction(params, \"Encounter\", \"myEncounter\")"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getEncounter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get encounter rate — getEncounter","text":"","code":"encounter <- getEncounter(NS_params) str(encounter) #>  num [1:12, 1:100] 0.299 0.453 0.502 0.575 0.492 ... #>  - attr(*, \"dimnames\")=List of 2 #>   ..$ sp: chr [1:12] \"Sprat\" \"Sandeel\" \"N.pout\" \"Herring\" ... #>   ..$ w : chr [1:100] \"0.001\" \"0.00119\" \"0.00142\" \"0.0017\" ..."},{"path":"https://sizespectrum.org/mizer/dev/reference/getFMort.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the total fishing mortality rate from all fishing gears by time, species\nand size. — getFMort","title":"Get the total fishing mortality rate from all fishing gears by time, species\nand size. — getFMort","text":"Calculates total fishing mortality  (units 1/year) gears species size possibly time. See setFishing() details fishing gears set .","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getFMort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the total fishing mortality rate from all fishing gears by time, species\nand size. — getFMort","text":"","code":"getFMort(object, effort, time_range, drop = TRUE)"},{"path":"https://sizespectrum.org/mizer/dev/reference/getFMort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the total fishing mortality rate from all fishing gears by time, species\nand size. — getFMort","text":"object MizerParams object MizerSim object effort effort fishing gear. used object argument class MizerParams. See notes . time_range Subset returned fishing mortalities time. time range either vector values, vector min max time, single value. Default whole time range. used object argument type MizerSim. drop used object type MizerSim. dimensions length 1 dropped, e.g. community one species might make presentation results easier. Default TRUE.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getFMort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the total fishing mortality rate from all fishing gears by time, species\nand size. — getFMort","text":"array. effort argument time dimension, object class MizerSim, output array three dimensions (time x species x size). effort argument time dimension, output array two dimensions (species x size). effort argument used MizerParams object passed . effort argument can two dimensional array (time x gear), vector length equal number gears (gear different effort constant time), single numeric value (gear effort constant time). order gears effort argument must MizerParams object. object argument class MizerSim effort slot MizerSim object used effort argument used.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getFMort.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the total fishing mortality rate from all fishing gears by time, species\nand size. — getFMort","text":"total fishing mortality just sum fishing mortalities imposed gear, \\(\\mu_{f.}(w)=\\sum_g F_{g,,w}\\). fishing mortality gear obtained catchability x selectivity x effort.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getFMort.html","id":"your-own-fishing-mortality-function","dir":"Reference","previous_headings":"","what":"Your own fishing mortality function","title":"Get the total fishing mortality rate from all fishing gears by time, species\nand size. — getFMort","text":"default getFMort() calls mizerFMort(). However can replace alternative fishing mortality function. function called \"myFMort\" register MizerParams object params   function called instead mizerFMort(), arguments.","code":"params <- setRateFunction(params, \"FMort\", \"myFMort\")"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getFMort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the total fishing mortality rate from all fishing gears by time, species\nand size. — getFMort","text":"","code":"if (FALSE) { params <- NS_params # Get the total fishing mortality when effort is constant for all  # gears and time: getFMort(params, effort = 1) # Get the total fishing mortality when effort is different # between the four gears but constant in time: getFMort(params, effort = c(0.5,1,1.5,0.75)) # Get the total fishing mortality when effort is different # between the four gears and changes with time: effort <- array(NA, dim = c(20,4)) effort[, 1] <- seq(from = 0, to = 1, length = 20) effort[, 2] <- seq(from = 1, to = 0.5, length = 20) effort[, 3] <- seq(from = 1, to = 2, length = 20) effort[, 4] <- seq(from = 2, to = 1, length = 20) getFMort(params, effort = effort) # Get the total fishing mortality using the effort already held in a  # MizerSim object. sim <- project(params, t_max = 20, effort = 0.5) getFMort(sim) getFMort(sim, time_range = c(10, 20)) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/getFMortGear.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the fishing mortality by time, gear, species and size — getFMortGear","title":"Get the fishing mortality by time, gear, species and size — getFMortGear","text":"Calculates fishing mortality rate \\(F_{g,,w}\\) gear, species size possibly time (units 1/year).","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getFMortGear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the fishing mortality by time, gear, species and size — getFMortGear","text":"","code":"getFMortGear(object, effort, time_range)"},{"path":"https://sizespectrum.org/mizer/dev/reference/getFMortGear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the fishing mortality by time, gear, species and size — getFMortGear","text":"object MizerParams object MizerSim object. effort effort fishing gear. See notes . time_range Subset returned fishing mortalities time. time range either vector values, vector min max time, single value. Default whole time range. used object argument type MizerSim.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getFMortGear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the fishing mortality by time, gear, species and size — getFMortGear","text":"array. effort argument time dimension, MizerSim passed , output array four dimensions (time x gear x species x size). effort argument time dimension (.e. vector single numeric), output array three dimensions (gear x species x size).","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getFMortGear.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get the fishing mortality by time, gear, species and size — getFMortGear","text":": fishing mortality = catchability x selectivity x effort. effort argument used MizerParams object passed . effort argument can two dimensional array (time x gear), vector length equal number gears (gear different effort constant time), single numeric value (gear effort constant time). order gears effort argument must MizerParams object. effort argument supplied, value taken @initial_effort slot params object. object argument class MizerSim effort slot MizerSim object used effort argument used.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getFMortGear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the fishing mortality by time, gear, species and size — getFMortGear","text":"","code":"if (FALSE) { params <-NS_params # Get the fishing mortality when effort is constant # for all gears and time: getFMortGear(params, effort = 1) # Get the fishing mortality when effort is different # between the four gears but constant in time: getFMortGear(params, effort = c(0.5, 1, 1.5, 0.75)) # Get the fishing mortality when effort is different # between the four gears and changes with time: effort <- array(NA, dim = c(20, 4)) effort[, 1] <- seq(from=0, to = 1, length = 20) effort[, 2] <- seq(from=1, to = 0.5, length = 20) effort[, 3] <- seq(from=1, to = 2, length = 20) effort[, 4] <- seq(from=2, to = 1, length = 20) getFMortGear(params, effort = effort) # Get the fishing mortality using the effort already held in a MizerSim object. sim <- project(params, t_max = 20, effort = 0.5) getFMortGear(sim) getFMortGear(sim, time_range = c(10, 20)) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/getFeedingLevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get feeding level — getFeedingLevel","title":"Get feeding level — getFeedingLevel","text":"Returns feeding level. default function uses mizerFeedingLevel() calculate feeding level, can overruled via setRateFunction().","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getFeedingLevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get feeding level — getFeedingLevel","text":"","code":"getFeedingLevel(object, n, n_pp, n_other, time_range, drop = FALSE, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/getFeedingLevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get feeding level — getFeedingLevel","text":"object MizerParams object MizerSim object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem time_range vector times. range times relevant, .e., times smallest largest selected. time_range can character numeric. drop TRUE dimension length 1 removed returned array. ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getFeedingLevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get feeding level — getFeedingLevel","text":"MizerParams object passed , function returns two dimensional array (predator species x predator size) based abundances also passed . MizerSim object passed , function returns three dimensional array (time step x predator species x predator size) feeding level calculated every time step simulation. drop = TRUE dimension length 1 removed returned array.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getFeedingLevel.html","id":"feeding-level","dir":"Reference","previous_headings":"","what":"Feeding level","title":"Get feeding level — getFeedingLevel","text":"feeding level \\(f_i(w)\\) proportion maximum intake rate predator actually taking fish. calculated encounter rate \\(E_i\\) maximum intake rate \\(h_i(w)\\) $$f_i(w) = \\frac{E_i(w)}{E_i(w)+h_i(w)}.$$ encounter rate \\(E_i\\) passed argument calculated getEncounter(). maximum intake rate \\(h_i(w)\\) taken params object, set setMaxIntakeRate(). consequence expression feeding level, \\(1-f_i(w)\\) proportion food available predator actually consumes.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getFeedingLevel.html","id":"your-own-feeding-level-function","dir":"Reference","previous_headings":"","what":"Your own feeding level function","title":"Get feeding level — getFeedingLevel","text":"default getFeedingLevel() calls mizerFeedingLevel(). However can replace alternative feeding level function. function called \"myFeedingLevel\" register MizerParams object params   function called instead mizerFeedingLevel(), arguments.","code":"params <- setRateFunction(params, \"FeedingLevel\", \"myFeedingLevel\")"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getFeedingLevel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get feeding level — getFeedingLevel","text":"","code":"if (FALSE) { params <- NS_params # Get initial feeding level fl <- getFeedingLevel(params) # Project with constant fishing effort for all gears for 20 time steps sim <- project(params, t_max = 20, effort = 0.5) # Get the feeding level at all saved time steps fl <- getFeedingLevel(sim) # Get the feeding level for years 15 - 20 fl <- getFeedingLevel(sim, time_range = c(15, 20)) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/getGrowthCurves.html","id":null,"dir":"Reference","previous_headings":"","what":"Get growth curves giving weight as a function of age — getGrowthCurves","title":"Get growth curves giving weight as a function of age — getGrowthCurves","text":"Get growth curves giving weight function age","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getGrowthCurves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get growth curves giving weight as a function of age — getGrowthCurves","text":"","code":"getGrowthCurves(object, species = NULL, max_age = 20, percentage = FALSE)"},{"path":"https://sizespectrum.org/mizer/dev/reference/getGrowthCurves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get growth curves giving weight as a function of age — getGrowthCurves","text":"object MizerSim MizerParams object. given MizerSim object, uses growth rates final time simulation calculate size age. given MizerParams object, uses initial growth rates instead. species species selected. Optional. default target species selected. vector species names, numeric vector species indices, logical vector indicating species whether selected (TRUE) . max_age age run growth curve. Default 20. percentage Boolean value. TRUE, size given percentage maximal size.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getGrowthCurves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get growth curves giving weight as a function of age — getGrowthCurves","text":"array (species x age) containing weight grams.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getGrowthCurves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get growth curves giving weight as a function of age — getGrowthCurves","text":"","code":"growth_curves <- getGrowthCurves(NS_params, species = c(\"Cod\", \"Haddock\")) str(growth_curves) #>  num [1:2, 1:50] 0.001 0.001 0.87 2.546 4.499 ... #>  - attr(*, \"dimnames\")=List of 2 #>   ..$ Species: chr [1:2] \"Haddock\" \"Cod\" #>   ..$ Age    : chr [1:50] \"0\" \"0.408163265306122\" \"0.816326530612245\" \"1.22448979591837\" ...  library(ggplot2) ggplot(melt(growth_curves)) +   geom_line(aes(Age, value)) +   facet_wrap(~ Species, scales = \"free\") +   ylab(\"Size[g]\") + xlab(\"Age[years]\")"},{"path":"https://sizespectrum.org/mizer/dev/reference/getM2.html","id":null,"dir":"Reference","previous_headings":"","what":"Alias for getPredMort() — getM2","title":"Alias for getPredMort() — getM2","text":"alias provided backward compatibility mizer version <= 1.0","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getM2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alias for getPredMort() — getM2","text":"","code":"getM2(object, n, n_pp, n_other, time_range, drop = TRUE, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/getM2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alias for getPredMort() — getM2","text":"object MizerParams object MizerSim object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem time_range vector times. range times relevant, .e., times smallest largest selected. time_range can character numeric. drop TRUE dimension length 1 removed returned array. ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getM2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alias for getPredMort() — getM2","text":"MizerParams object passed , function returns two dimensional array (prey species x prey size) based abundances also passed . MizerSim object passed , function returns three dimensional array (time step x prey species x prey size) predation mortality calculated every time step simulation. Dimensions may dropped length 1 unless drop = FALSE.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getM2.html","id":"your-own-predation-mortality-function","dir":"Reference","previous_headings":"","what":"Your own predation mortality function","title":"Alias for getPredMort() — getM2","text":"default getPredMort() calls mizerPredMort(). However can replace alternative predation mortality function. function called \"myPredMort\" register MizerParams object params   function called instead mizerPredMort(), arguments.","code":"params <- setRateFunction(params, \"PredMort\", \"myPredMort\")"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getM2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Alias for getPredMort() — getM2","text":"","code":"if (FALSE) { params <- NS_params # With constant fishing effort for all gears for 20 time steps sim <- project(params, t_max = 20, effort = 0.5) # Get predation mortality at one time step getPredMort(params, n = N(sim)[15, , ], n_pp = NResource(sim)[15, ]) # Get predation mortality at all saved time steps getPredMort(sim) # Get predation mortality over the years 15 - 20 getPredMort(sim, time_range = c(15, 20)) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/getM2Background.html","id":null,"dir":"Reference","previous_headings":"","what":"Alias for getResourceMort() — getM2Background","title":"Alias for getResourceMort() — getM2Background","text":"alias provided backward compatibility mizer version <= 1.0","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getM2Background.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alias for getResourceMort() — getM2Background","text":"","code":"getM2Background(   params,   n = initialN(params),   n_pp = initialNResource(params),   n_other = initialNOther(params),   t = 0,   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/getM2Background.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alias for getResourceMort() — getM2Background","text":"params MizerParams object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem t time calculation (used standard mizer rate functions useful extensions time-dependent parameters.) ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getM2Background.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alias for getResourceMort() — getM2Background","text":"vector mortality rate resource size.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getM2Background.html","id":"your-own-resource-mortality-function","dir":"Reference","previous_headings":"","what":"Your own resource mortality function","title":"Alias for getResourceMort() — getM2Background","text":"default getResourceMort() calls mizerResourceMort(). However can replace alternative resource mortality function. function called \"myResourceMort\" register MizerParams object params   function called instead mizerResourceMort(), arguments.","code":"params <- setRateFunction(params, \"ResourceMort\", \"myResourceMort\")"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getM2Background.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Alias for getResourceMort() — getM2Background","text":"","code":"if (FALSE) { params <- NS_params # With constant fishing effort for all gears for 20 time steps sim <- project(params, t_max = 20, effort = 0.5) # Get resource mortality at one time step getResourceMort(params, n = N(sim)[15, , ], n_pp = NResource(sim)[15, ]) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/getMeanMaxWeight.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the mean maximum weight of the community — getMeanMaxWeight","title":"Calculate the mean maximum weight of the community — getMeanMaxWeight","text":"Calculates mean maximum weight community time. can calculated numbers biomass. calculation sum w_inf * abundance species, divided total abundance community, abundance either biomass numbers. can specify minimum maximum weight length range species. Lengths take precedence weights (.e. min_l min_w supplied, min_l used). can also specify species used calculation.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getMeanMaxWeight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the mean maximum weight of the community — getMeanMaxWeight","text":"","code":"getMeanMaxWeight(sim, species = NULL, measure = \"both\", ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/getMeanMaxWeight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the mean maximum weight of the community — getMeanMaxWeight","text":"sim MizerSim object species species selected. Optional. default target species selected. vector species names, numeric vector species indices, logical vector indicating species whether selected (TRUE) . measure measure return. Can 'numbers', 'biomass' '' ... Arguments passed get_size_range_array min_w Smallest weight size range. Defaults smallest weight model. max_w Largest weight size range. Defaults largest weight model. min_l Smallest length size range. supplied, takes precedence min_w. max_l Largest length size range. supplied, takes precedence max_w.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getMeanMaxWeight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the mean maximum weight of the community — getMeanMaxWeight","text":"Depends measure argument. measure = “” get matrix two columns, one values numbers, values biomass saved time step. measure =   “numbers” “biomass” get vector respective values saved time step.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getMeanMaxWeight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the mean maximum weight of the community — getMeanMaxWeight","text":"","code":"mmw <- getMeanMaxWeight(NS_sim) years <- c(\"1967\", \"2010\") mmw[years, ] #>      mmw_numbers mmw_biomass #> 1967    2640.075   10980.365 #> 2010    2716.657    7940.787 getMeanMaxWeight(NS_sim, species=c(\"Herring\",\"Sprat\",\"N.pout\"))[years, ] #>      mmw_numbers mmw_biomass #> 1967    12.68424    20.07675 #> 2010    10.46315    22.66197 getMeanMaxWeight(NS_sim, min_w = 10, max_w = 5000)[years, ] #>      mmw_numbers mmw_biomass #> 1967    1313.207    3444.342 #> 2010    2316.711    6742.697"},{"path":"https://sizespectrum.org/mizer/dev/reference/getMeanWeight.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the mean weight of the community — getMeanWeight","title":"Calculate the mean weight of the community — getMeanWeight","text":"Calculates mean weight community time. simply total biomass community divided abundance numbers. can specify minimum maximum weight length range species. Lengths take precedence weights (.e. min_l min_w supplied, min_l used). can also specify species used calculation.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getMeanWeight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the mean weight of the community — getMeanWeight","text":"","code":"getMeanWeight(sim, species = NULL, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/getMeanWeight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the mean weight of the community — getMeanWeight","text":"sim MizerSim object species species selected. Optional. default target species selected. vector species names, numeric vector species indices, logical vector indicating species whether selected (TRUE) . ... Arguments passed get_size_range_array min_w Smallest weight size range. Defaults smallest weight model. max_w Largest weight size range. Defaults largest weight model. min_l Smallest length size range. supplied, takes precedence min_w. max_l Largest length size range. supplied, takes precedence max_w.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getMeanWeight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the mean weight of the community — getMeanWeight","text":"vector containing mean weight community time","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getMeanWeight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the mean weight of the community — getMeanWeight","text":"","code":"mean_weight <- getMeanWeight(NS_sim) years <- c(\"1967\", \"2010\") mean_weight[years] #>      1967      2010  #> 0.7959689 0.4835935  getMeanWeight(NS_sim, species = c(\"Herring\", \"Sprat\", \"N.pout\"))[years] #>      1967      2010  #> 0.6750526 0.5773987  getMeanWeight(NS_sim, min_w = 10, max_w = 5000)[years] #>     1967     2010  #> 36.12859 50.54693"},{"path":"https://sizespectrum.org/mizer/dev/reference/getMort.html","id":null,"dir":"Reference","previous_headings":"","what":"Get total mortality rate — getMort","title":"Get total mortality rate — getMort","text":"Calculates total mortality rate \\(\\mu_i(w)\\)  (units 1/year) species size predation mortality, background mortality fishing mortality single time step.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getMort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get total mortality rate — getMort","text":"","code":"getMort(   params,   n = initialN(params),   n_pp = initialNResource(params),   n_other = initialNOther(params),   effort = getInitialEffort(params),   t = 0,   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/getMort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get total mortality rate — getMort","text":"params MizerParams object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem effort numeric vector effort gear single numeric effort value used gears. t time calculation (used standard mizer rate functions useful extensions time-dependent parameters.) ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getMort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get total mortality rate — getMort","text":"two dimensional array (prey species x prey size).","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getMort.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get total mortality rate — getMort","text":"model contains additional components added setComponent() specified mort_fun function mortality inflicted components included returned value.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getMort.html","id":"your-own-mortality-function","dir":"Reference","previous_headings":"","what":"Your own mortality function","title":"Get total mortality rate — getMort","text":"default getMort() calls mizerMort(). However can replace alternative mortality function. function called \"myMort\" register MizerParams object params   function called instead mizerMort(), arguments.","code":"params <- setRateFunction(params, \"Mort\", \"myMort\")"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getMort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get total mortality rate — getMort","text":"","code":"if (FALSE) { params <- NS_params # Project with constant fishing effort for all gears for 20 time steps sim <- project(params, t_max = 20, effort = 0.5) # Get the total mortality at a particular time step getMort(params, n = N(sim)[15, , ], n_pp = NResource(sim)[15, ],          t = 15, effort = 0.5) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/getN.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the number of individuals within a size range — getN","title":"Calculate the number of individuals within a size range — getN","text":"Calculates number individuals within user-defined size limits. default option use whole size range. can specify minimum maximum weight lengths species. Lengths take precedence weights (.e. min_l min_w supplied, min_l used)","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the number of individuals within a size range — getN","text":"","code":"getN(object, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/getN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the number of individuals within a size range — getN","text":"object object class MizerParams MizerSim. ... Arguments passed get_size_range_array min_w Smallest weight size range. Defaults smallest weight model. max_w Largest weight size range. Defaults largest weight model. min_l Smallest length size range. supplied, takes precedence min_w. max_l Largest length size range. supplied, takes precedence max_w.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the number of individuals within a size range — getN","text":"called MizerParams object, vector numbers species model. called MizerSim object, array (time x species) containing numbers time step species.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the number of individuals within a size range — getN","text":"","code":"numbers <- getN(NS_sim) numbers[\"1972\", \"Herring\"] #> [1] 1.49413e+11 # The above gave a huge number, because that included all the larvae. # The number of Herrings between 10g and 1kg is much smaller. numbers <- getN(NS_sim, min_w = 10, max_w = 1000) numbers[\"1972\", \"Herring\"] #> [1] 4014916500"},{"path":"https://sizespectrum.org/mizer/dev/reference/getParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the parameter object underlying a simulation — getParams","title":"Extract the parameter object underlying a simulation — getParams","text":"Extract parameter object underlying simulation","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the parameter object underlying a simulation — getParams","text":"","code":"getParams(sim)"},{"path":"https://sizespectrum.org/mizer/dev/reference/getParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the parameter object underlying a simulation — getParams","text":"sim MizerSim object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the parameter object underlying a simulation — getParams","text":"MizerParams object used run simulation","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getParams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the parameter object underlying a simulation — getParams","text":"","code":"# This will be identical to the params object that was used to create the # simulation sim <- project(NS_params, t_max = 1) identical(getParams(sim), NS_params) #> [1] TRUE"},{"path":"https://sizespectrum.org/mizer/dev/reference/getPhiPrey.html","id":null,"dir":"Reference","previous_headings":"","what":"Get available energy — getPhiPrey","title":"Get available energy — getPhiPrey","text":"deprecated longer used mizer project() method. Calculates amount \\(E_{,}(w)\\) food exposed predator function predator size.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getPhiPrey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get available energy — getPhiPrey","text":"","code":"getPhiPrey(object, n, n_pp, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/getPhiPrey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get available energy — getPhiPrey","text":"object MizerParams object n matrix species abundances (species x size) n_pp vector background abundance size ... arguments (currently unused)","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getPhiPrey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get available energy — getPhiPrey","text":"two dimensional array (predator species x predator size)","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getPhiPrey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get available energy — getPhiPrey","text":"","code":"if (FALSE) { params <-  NS_params sim <- project(params, t_max = 20, effort = 0.5) n <- sim@n[21,,] n_pp <- sim@n_pp[21,] getPhiPrey(params,n,n_pp) # -> getEncounter(params) / getSearchVolume(params) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/getPredMort.html","id":null,"dir":"Reference","previous_headings":"","what":"Get total predation mortality rate — getPredMort","title":"Get total predation mortality rate — getPredMort","text":"Calculates total predation mortality rate \\(\\mu_{p,}(w_p)\\) (units 1/year) prey species prey size: $$\\mu_{p.}(w_p) = \\sum_j {\\tt pred\\_rate}_j(w_p)\\, \\theta_{ji}.$$ predation rate pred_rate returned getPredRate().","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getPredMort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get total predation mortality rate — getPredMort","text":"","code":"getPredMort(object, n, n_pp, n_other, time_range, drop = TRUE, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/getPredMort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get total predation mortality rate — getPredMort","text":"object MizerParams object MizerSim object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem time_range vector times. range times relevant, .e., times smallest largest selected. time_range can character numeric. drop TRUE dimension length 1 removed returned array. ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getPredMort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get total predation mortality rate — getPredMort","text":"MizerParams object passed , function returns two dimensional array (prey species x prey size) based abundances also passed . MizerSim object passed , function returns three dimensional array (time step x prey species x prey size) predation mortality calculated every time step simulation. Dimensions may dropped length 1 unless drop = FALSE.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getPredMort.html","id":"your-own-predation-mortality-function","dir":"Reference","previous_headings":"","what":"Your own predation mortality function","title":"Get total predation mortality rate — getPredMort","text":"default getPredMort() calls mizerPredMort(). However can replace alternative predation mortality function. function called \"myPredMort\" register MizerParams object params   function called instead mizerPredMort(), arguments.","code":"params <- setRateFunction(params, \"PredMort\", \"myPredMort\")"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getPredMort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get total predation mortality rate — getPredMort","text":"","code":"if (FALSE) { params <- NS_params # With constant fishing effort for all gears for 20 time steps sim <- project(params, t_max = 20, effort = 0.5) # Get predation mortality at one time step getPredMort(params, n = N(sim)[15, , ], n_pp = NResource(sim)[15, ]) # Get predation mortality at all saved time steps getPredMort(sim) # Get predation mortality over the years 15 - 20 getPredMort(sim, time_range = c(15, 20)) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/getPredRate.html","id":null,"dir":"Reference","previous_headings":"","what":"Get predation rate — getPredRate","title":"Get predation rate — getPredRate","text":"Calculates potential rate (units 1/year) prey individual given size \\(w\\) killed predators species \\(j\\). formulas $${\\tt pred\\_rate}_j(w_p) = \\int \\phi_j(w,w_p) (1-f_j(w))    \\gamma_j(w) N_j(w) \\, dw.$$ potential rate used getPredMort() calculate realised predation mortality rate prey individual.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getPredRate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get predation rate — getPredRate","text":"","code":"getPredRate(   params,   n = initialN(params),   n_pp = initialNResource(params),   n_other = initialNOther(params),   t = 0,   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/getPredRate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get predation rate — getPredRate","text":"params MizerParams object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem t time calculation (used standard mizer rate functions useful extensions time-dependent parameters.) ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getPredRate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get predation rate — getPredRate","text":"two dimensional array (predator species x prey size), prey size runs fish community plus resource spectrum.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getPredRate.html","id":"your-own-predation-rate-function","dir":"Reference","previous_headings":"","what":"Your own predation rate function","title":"Get predation rate — getPredRate","text":"default getPredRate() calls mizerPredRate(). However can replace alternative predation rate function. function called \"myPredRate\" register MizerParams object params   function called instead mizerPredRate(), arguments.","code":"params <- setRateFunction(params, \"PredRate\", \"myPredRate\")"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getPredRate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get predation rate — getPredRate","text":"","code":"if (FALSE) { params <- NS_params # With constant fishing effort for all gears for 20 time steps sim <- project(params, t_max = 20, effort = 0.5) # Get the feeding level at one time step getPredRate(params, n = N(sim)[15, , ], n_pp = NResource(sim)[15, ]) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/getProportionOfLargeFish.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the proportion of large fish — getProportionOfLargeFish","title":"Calculate the proportion of large fish — getProportionOfLargeFish","text":"Calculates proportion large fish time MizerSim class within user defined size limits. default option use whole size range. can specify minimum maximum size ranges species also threshold size large fish. Sizes can expressed weight size. Lengths take precedence weights (.e. min_l min_w supplied, min_l used). can also specify species used calculation. function can used calculate Large Fish Index. proportion based either abundance biomass.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getProportionOfLargeFish.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the proportion of large fish — getProportionOfLargeFish","text":"","code":"getProportionOfLargeFish(   sim,   species = NULL,   threshold_w = 100,   threshold_l = NULL,   biomass_proportion = TRUE,   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/getProportionOfLargeFish.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the proportion of large fish — getProportionOfLargeFish","text":"sim MizerSim object species species selected. Optional. default target species selected. vector species names, numeric vector species indices, logical vector indicating species whether selected (TRUE) . threshold_w size used cutoff large small fish. Default value 100. threshold_l size used cutoff large small fish. biomass_proportion boolean value. TRUE proportion calculated based biomass, FALSE based numbers individuals. Default TRUE. ... Arguments passed get_size_range_array min_w Smallest weight size range. Defaults smallest weight model. max_w Largest weight size range. Defaults largest weight model. min_l Smallest length size range. supplied, takes precedence min_w. max_l Largest length size range. supplied, takes precedence max_w.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getProportionOfLargeFish.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the proportion of large fish — getProportionOfLargeFish","text":"vector containing proportion large fish time","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getProportionOfLargeFish.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the proportion of large fish — getProportionOfLargeFish","text":"","code":"lfi <- getProportionOfLargeFish(NS_sim, min_w = 10, max_w = 5000,                                  threshold_w = 500) years <- c(\"1972\", \"2010\") lfi[years] #>      1972      2010  #> 0.1425938 0.2573979  getProportionOfLargeFish(NS_sim)[years] #>      1972      2010  #> 0.3115163 0.4441647  getProportionOfLargeFish(NS_sim, species=c(\"Herring\",\"Sprat\",\"N.pout\"))[years] #>       1972       2010  #> 0.06371869 0.21844009  getProportionOfLargeFish(NS_sim, min_w = 10, max_w = 5000)[years] #>      1972      2010  #> 0.3474937 0.5662073  getProportionOfLargeFish(NS_sim, min_w = 10, max_w = 5000,     threshold_w = 500, biomass_proportion = FALSE)[years] #>       1972       2010  #> 0.00441820 0.01212436"},{"path":"https://sizespectrum.org/mizer/dev/reference/getRDD.html","id":null,"dir":"Reference","previous_headings":"","what":"Get density dependent reproduction rate — getRDD","title":"Get density dependent reproduction rate — getRDD","text":"Calculates density dependent rate egg production \\(R_i\\) (units 1/year) species. flux entering smallest size class species. density dependent rate density independent rate obtained getRDI() put density dependence function. Beverton-Holt function BevertonHoltRDD() default, can changed. See setReproduction() details.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getRDD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get density dependent reproduction rate — getRDD","text":"","code":"getRDD(   params,   n = initialN(params),   n_pp = initialNResource(params),   n_other = initialNOther(params),   t = 0,   rdi = getRDI(params, n = n, n_pp = n_pp, n_other = n_other, t = t),   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/getRDD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get density dependent reproduction rate — getRDD","text":"params MizerParams object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem t time calculation (used standard mizer rate functions useful extensions time-dependent parameters.) rdi vector density-independent reproduction rates species. specified, rdi calculated internally using getRDI(). ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getRDD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get density dependent reproduction rate — getRDD","text":"numeric vector length number species.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getRDD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get density dependent reproduction rate — getRDD","text":"","code":"if (FALSE) { params <- NS_params # Project with constant fishing effort for all gears for 20 time steps sim <- project(params, t_max = 20, effort = 0.5) # Get the rate at a particular time step getRDD(params, n = N(sim)[15, , ], n_pp = NResource(sim)[15, ], t = 15) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/getRDI.html","id":null,"dir":"Reference","previous_headings":"","what":"Get density independent rate of egg production — getRDI","title":"Get density independent rate of egg production — getRDI","text":"Calculates density-independent rate total egg production \\(R_{di}\\) (units 1/year) density dependence, species.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getRDI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get density independent rate of egg production — getRDI","text":"","code":"getRDI(   params,   n = initialN(params),   n_pp = initialNResource(params),   n_other = initialNOther(params),   t = 0,   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/getRDI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get density independent rate of egg production — getRDI","text":"params MizerParams object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem t time calculation (used standard mizer rate functions useful extensions time-dependent parameters.) ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getRDI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get density independent rate of egg production — getRDI","text":"numeric vector length number species.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getRDI.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get density independent rate of egg production — getRDI","text":"rate obtained taking per capita rate \\(E_r(w)\\psi(w)\\) energy invested reproduction, calculated getERepro(), multiplying number individuals\\(N(w)\\) integrating sizes \\(w\\) multiplying reproductive efficiency \\(\\epsilon\\) dividing egg size w_min, factor two account two sexes: $$R_{di} = \\frac{\\epsilon}{2 w_{min}} \\int N(w)  E_r(w) \\psi(w) \\, dw$$ Used getRDD() calculate actual, density dependent rate. See setReproduction() details.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getRDI.html","id":"your-own-reproduction-function","dir":"Reference","previous_headings":"","what":"Your own reproduction function","title":"Get density independent rate of egg production — getRDI","text":"default getRDI() calls mizerRDI(). However can replace alternative reproduction function. function called \"myRDI\" register MizerParams object params   function called instead mizerRDI(), arguments. example alternative reproduction function see constantEggRDI().","code":"params <- setRateFunction(params, \"RDI\", \"myRDI\")"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getRDI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get density independent rate of egg production — getRDI","text":"","code":"if (FALSE) { params <- NS_params # Project with constant fishing effort for all gears for 20 time steps sim <- project(params, t_max = 20, effort = 0.5) # Get the density-independent reproduction rate at a particular time step getRDI(params, n = N(sim)[15, , ], n_pp = NResource(sim)[15, ], t = 15) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/getRates.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all rates — getRates","title":"Get all rates — getRates","text":"Calls rate functions sequence collects results list.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getRates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all rates — getRates","text":"","code":"getRates(   params,   n = initialN(params),   n_pp = initialNResource(params),   n_other = initialNOther(params),   effort,   t = 0,   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/getRates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all rates — getRates","text":"params MizerParams object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem effort effort fishing gear t time calculation (used standard mizer rate functions useful extensions time-dependent parameters.) ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getRates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get all rates — getRates","text":"default function returns list following components: encounter mizerEncounter() feeding_level mizerFeedingLevel() e mizerEReproAndGrowth() e_repro mizerERepro() e_growth mizerEGrowth() pred_rate mizerPredRate() pred_mort mizerPredMort() f_mort mizerFMort() mort mizerMort() rdi mizerRDI() rdd BevertonHoltRDD() resource_mort mizerResourceMort() However can replace rate functions rate function wish, see setRateFunction() details.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getRates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all rates — getRates","text":"","code":"rates <- getRates(NS_params) names(rates) #>  [1] \"encounter\"     \"feeding_level\" \"e\"             \"e_repro\"       #>  [5] \"e_growth\"      \"pred_rate\"     \"pred_mort\"     \"f_mort\"        #>  [9] \"mort\"          \"rdi\"           \"rdd\"           \"resource_mort\" identical(rates$encounter, getEncounter(NS_params)) #> [1] TRUE"},{"path":"https://sizespectrum.org/mizer/dev/reference/getReproductionLevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get reproduction level — getReproductionLevel","title":"Get reproduction level — getReproductionLevel","text":"reproduction level ratio density-dependent reproduction rate maximal reproduction rate.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getReproductionLevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get reproduction level — getReproductionLevel","text":"","code":"getReproductionLevel(params)"},{"path":"https://sizespectrum.org/mizer/dev/reference/getReproductionLevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get reproduction level — getReproductionLevel","text":"params MizerParams object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getReproductionLevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get reproduction level — getReproductionLevel","text":"named vector reproduction level species.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getReproductionLevel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get reproduction level — getReproductionLevel","text":"","code":"getReproductionLevel(NS_params) #>      Sprat    Sandeel     N.pout    Herring        Dab    Whiting       Sole  #> 0.99074238 0.99987053 0.92829319 0.99198802 0.99578514 0.98718674 0.99643774  #>    Gurnard     Plaice    Haddock        Cod     Saithe  #> 0.44189813 0.08022106 0.94443443 0.99993658 0.99767830   # The reproduction level can be changed without changing the steady state: params <- setBevertonHolt(NS_params, reproduction_level = 0.9) #> Warning: The following species require an unrealistic reproductive efficiency greater than 1: Gurnard, Plaice getReproductionLevel(params) #>   Sprat Sandeel  N.pout Herring     Dab Whiting    Sole Gurnard  Plaice Haddock  #>     0.9     0.9     0.9     0.9     0.9     0.9     0.9     0.9     0.9     0.9  #>     Cod  Saithe  #>     0.9     0.9   # The result is the ratio of RDD and R_max identical(getRDD(params) / species_params(params)$R_max,           getReproductionLevel(params)) #> [1] TRUE"},{"path":"https://sizespectrum.org/mizer/dev/reference/getResourceMort.html","id":null,"dir":"Reference","previous_headings":"","what":"Get predation mortality rate for resource — getResourceMort","title":"Get predation mortality rate for resource — getResourceMort","text":"Calculates predation mortality rate \\(\\mu_p(w)\\) resource spectrum resource size (units 1/year).","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getResourceMort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get predation mortality rate for resource — getResourceMort","text":"","code":"getResourceMort(   params,   n = initialN(params),   n_pp = initialNResource(params),   n_other = initialNOther(params),   t = 0,   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/getResourceMort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get predation mortality rate for resource — getResourceMort","text":"params MizerParams object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem t time calculation (used standard mizer rate functions useful extensions time-dependent parameters.) ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getResourceMort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get predation mortality rate for resource — getResourceMort","text":"vector mortality rate resource size.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getResourceMort.html","id":"your-own-resource-mortality-function","dir":"Reference","previous_headings":"","what":"Your own resource mortality function","title":"Get predation mortality rate for resource — getResourceMort","text":"default getResourceMort() calls mizerResourceMort(). However can replace alternative resource mortality function. function called \"myResourceMort\" register MizerParams object params   function called instead mizerResourceMort(), arguments.","code":"params <- setRateFunction(params, \"ResourceMort\", \"myResourceMort\")"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getResourceMort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get predation mortality rate for resource — getResourceMort","text":"","code":"if (FALSE) { params <- NS_params # With constant fishing effort for all gears for 20 time steps sim <- project(params, t_max = 20, effort = 0.5) # Get resource mortality at one time step getResourceMort(params, n = N(sim)[15, , ], n_pp = NResource(sim)[15, ]) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/getSSB.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the SSB of species — getSSB","title":"Calculate the SSB of species — getSSB","text":"Calculates spawning stock biomass (SSB) time species MizerSim class. SSB calculated total mass mature individuals.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getSSB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the SSB of species — getSSB","text":"","code":"getSSB(object)"},{"path":"https://sizespectrum.org/mizer/dev/reference/getSSB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the SSB of species — getSSB","text":"object object class MizerParams MizerSim`.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getSSB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the SSB of species — getSSB","text":"called MizerParams object, vector SSB grams species model. called MizerSim object, array (time x species) containing SSB grams time step species.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getSSB.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the SSB of species — getSSB","text":"","code":"ssb <- getSSB(NS_sim) ssb[c(\"1972\", \"2010\"), c(\"Herring\", \"Cod\")] #>       sp #> time        Herring          Cod #>   1972  44290356621 375924484131 #>   2010 172765918920 347442607081"},{"path":"https://sizespectrum.org/mizer/dev/reference/getTimes.html","id":null,"dir":"Reference","previous_headings":"","what":"Times for which simulation results are available — getTimes","title":"Times for which simulation results are available — getTimes","text":"Times simulation results available","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getTimes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Times for which simulation results are available — getTimes","text":"","code":"getTimes(sim)"},{"path":"https://sizespectrum.org/mizer/dev/reference/getTimes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Times for which simulation results are available — getTimes","text":"sim MizerSim object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getTimes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Times for which simulation results are available — getTimes","text":"numeric vectors times (years) simulation results stored MizerSim object.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getTimes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Times for which simulation results are available — getTimes","text":"","code":"getTimes(NS_sim) #>  [1] 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 #> [16] 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 #> [31] 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010"},{"path":"https://sizespectrum.org/mizer/dev/reference/getYield.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the rate at which biomass of each species is fished — getYield","title":"Calculate the rate at which biomass of each species is fished — getYield","text":"yield rate given grams per year. calculated time step saved MizerSim object.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getYield.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the rate at which biomass of each species is fished — getYield","text":"","code":"getYield(object)"},{"path":"https://sizespectrum.org/mizer/dev/reference/getYield.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the rate at which biomass of each species is fished — getYield","text":"object object class MizerParams MizerSim.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getYield.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the rate at which biomass of each species is fished — getYield","text":"called MizerParams object, vector yield rate grams per year species model. called MizerSim object, array (time x species) containing yield rate time step species.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getYield.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the rate at which biomass of each species is fished — getYield","text":"yield rate \\(y_i(t)\\) species \\(\\) time \\(t\\) defined $$y_i(t)=\\int\\mu_{f.}(w, t)N_i(w, t)w dw$$ \\(\\mu_{f.}(w, t)\\) fishing mortality individual species \\(\\) weight \\(w\\) time \\(t\\) \\(N_i(w, t)\\) abundance density individuals.  factor \\(w\\) converts abundance density biomass density integral aggregates contribution sizes. total catch time period \\(t_1\\)  \\(t_2\\) integral yield rate period: $$C = \\int_{t_1}^{t2}y_i(t)dt$$ practice, yield rate available saved times, one can approximate integral averaging available yield rates time period multiplying time period. less yield changes saved values, accurate approximation . approximation can improved saving simulation results smaller intervals, using t_save argument project(). concern abundances change quickly time period interest.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getYield.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the rate at which biomass of each species is fished — getYield","text":"","code":"yield <- getYield(NS_sim) yield[c(\"1972\", \"2010\"), c(\"Herring\", \"Cod\")] #>       sp #> time       Herring          Cod #>   1972 80002050975 355351719122 #>   2010 30496241734 289022888045  # Running simulation for another year, saving intermediate time steps params <- setInitialValues(getParams(NS_sim), NS_sim) sim <- project(params, t_save = 0.1, t_max = 1,                 t_start = 2010, progress_bar = FALSE) # The yield rate for Herring decreases during the year getYield(sim)[, \"Herring\"] #>        2010      2010.1      2010.2      2010.3      2010.4      2010.5  #> 30496241734 30406503779 30297907652 30173956406 30038604629 29896229522  #>      2010.6      2010.7      2010.8      2010.9        2011  #> 29751183405 29607379160 29468046935 29335685116 29212159486  # We get the total catch in the year by averaging over the year sum(getYield(sim)[1:10, \"Herring\"] / 10) #> [1] 29947173834"},{"path":"https://sizespectrum.org/mizer/dev/reference/getYieldGear.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the rate at which biomass of each species is fished by each gear — getYieldGear","title":"Calculate the rate at which biomass of each species is fished by each gear — getYieldGear","text":"yield rate given grams per year. calculated time step saved MizerSim object.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getYieldGear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the rate at which biomass of each species is fished by each gear — getYieldGear","text":"","code":"getYieldGear(object)"},{"path":"https://sizespectrum.org/mizer/dev/reference/getYieldGear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the rate at which biomass of each species is fished by each gear — getYieldGear","text":"object object class MizerParams MizerSim.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getYieldGear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the rate at which biomass of each species is fished by each gear — getYieldGear","text":"called MizerParams object, array (gear x species) yield rate grams per year gear species model. called MizerSim object, array (time x gear x species) containing yield rate time step.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getYieldGear.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the rate at which biomass of each species is fished by each gear — getYieldGear","text":"details yield rate defined see help page getYield().","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getYieldGear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the rate at which biomass of each species is fished by each gear — getYieldGear","text":"","code":"yield <- getYieldGear(NS_sim) yield[\"1972\", \"Herring\", \"Herring\"] #> [1] 80002050975 # (In this example MizerSim object each species was set up with its own gear)"},{"path":"https://sizespectrum.org/mizer/dev/reference/getZ.html","id":null,"dir":"Reference","previous_headings":"","what":"Alias for getMort() — getZ","title":"Alias for getMort() — getZ","text":"alias provided backward compatibility mizer version <= 1.0","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getZ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alias for getMort() — getZ","text":"","code":"getZ(   params,   n = initialN(params),   n_pp = initialNResource(params),   n_other = initialNOther(params),   effort = getInitialEffort(params),   t = 0,   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/getZ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alias for getMort() — getZ","text":"params MizerParams object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem effort numeric vector effort gear single numeric effort value used gears. t time calculation (used standard mizer rate functions useful extensions time-dependent parameters.) ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getZ.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alias for getMort() — getZ","text":"two dimensional array (prey species x prey size).","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getZ.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Alias for getMort() — getZ","text":"model contains additional components added setComponent() specified mort_fun function mortality inflicted components included returned value.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/getZ.html","id":"your-own-mortality-function","dir":"Reference","previous_headings":"","what":"Your own mortality function","title":"Alias for getMort() — getZ","text":"default getMort() calls mizerMort(). However can replace alternative mortality function. function called \"myMort\" register MizerParams object params   function called instead mizerMort(), arguments.","code":"params <- setRateFunction(params, \"Mort\", \"myMort\")"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/getZ.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Alias for getMort() — getZ","text":"","code":"if (FALSE) { params <- NS_params # Project with constant fishing effort for all gears for 20 time steps sim <- project(params, t_max = 20, effort = 0.5) # Get the total mortality at a particular time step getMort(params, n = N(sim)[15, , ], n_pp = NResource(sim)[15, ],          t = 15, effort = 0.5) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/get_f0_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Get default value for f0 — get_f0_default","title":"Get default value for f0 — get_f0_default","text":"Fills missing values f0 prey abundance described power law \\(\\kappa w^{-\\lambda}\\) encounter rate coming given gamma parameter lead feeding level \\(f_0\\). thus inverse get_gamma_default(). internal use.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/get_f0_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get default value for f0 — get_f0_default","text":"","code":"get_f0_default(params)"},{"path":"https://sizespectrum.org/mizer/dev/reference/get_f0_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get default value for f0 — get_f0_default","text":"params MizerParams object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/get_f0_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get default value for f0 — get_f0_default","text":"vector values f0 species","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/get_f0_default.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get default value for f0 — get_f0_default","text":"species value gamma specified species parameter data frame, f0 values kept provided species parameter data frame set 0.6 provided.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/get_gamma_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Get default value for gamma — get_gamma_default","title":"Get default value for gamma — get_gamma_default","text":"Fills missing values gamma prey abundance described power law \\(\\kappa w^{-\\lambda}\\) encounter rate lead feeding level \\(f_0\\). internal use.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/get_gamma_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get default value for gamma — get_gamma_default","text":"","code":"get_gamma_default(params)"},{"path":"https://sizespectrum.org/mizer/dev/reference/get_gamma_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get default value for gamma — get_gamma_default","text":"params MizerParams object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/get_gamma_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get default value for gamma — get_gamma_default","text":"vector values gamma species","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/get_h_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Get default value for h — get_h_default","title":"Get default value for h — get_h_default","text":"Sets h species reaches maturity size age predicted von Bertalanffy growth curve parameters k_vb (optionally t0) taken species parameter data frame. Also needs exponent b length-weight relationship \\(w = l^b\\). present species parameter data frame set b = 3.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/get_h_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get default value for h — get_h_default","text":"","code":"get_h_default(params)"},{"path":"https://sizespectrum.org/mizer/dev/reference/get_h_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get default value for h — get_h_default","text":"params MizerParams object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/get_h_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get default value for h — get_h_default","text":"vector values h species","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/get_initial_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate initial population abundances for the community populations — get_initial_n","title":"Calculate initial population abundances for the community populations — get_initial_n","text":"function uses model parameters parameters calculate initial population abundances community populations. initial abundances reasonable guesses equilibrium values. returned population can passed project function.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/get_initial_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate initial population abundances for the community populations — get_initial_n","text":"","code":"get_initial_n(params, n0_mult = NULL, a = 0.35)"},{"path":"https://sizespectrum.org/mizer/dev/reference/get_initial_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate initial population abundances for the community populations — get_initial_n","text":"params model parameters. object type MizerParams. n0_mult Multiplier abundance size 0. Default value kappa/1000. parameter default value 0.35.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/get_initial_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate initial population abundances for the community populations — get_initial_n","text":"matrix (species x size) population abundances.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/get_initial_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate initial population abundances for the community populations — get_initial_n","text":"","code":"if (FALSE) { params <- newMultispeciesParams(NS_species_params_gears) init_n <- get_initial_n(params) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/get_ks_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Get default value for ks — get_ks_default","title":"Get default value for ks — get_ks_default","text":"Fills missing values ks critical feeding level needed sustain species specified fc column species parameter data frame. column provided default critical feeding level \\(f_c = 0.2\\) used.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/get_ks_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get default value for ks — get_ks_default","text":"","code":"get_ks_default(params)"},{"path":"https://sizespectrum.org/mizer/dev/reference/get_ks_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get default value for ks — get_ks_default","text":"params MizerParams object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/get_ks_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get default value for ks — get_ks_default","text":"vector values ks species","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/get_phi.html","id":null,"dir":"Reference","previous_headings":"","what":"Get values from feeding kernel function — get_phi","title":"Get values from feeding kernel function — get_phi","text":"involves finding feeding kernel function species, using pred_kernel_type parameter species_params data frame, checking valid arguments contained species_params data frame, calling function ppmr vector.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/get_phi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get values from feeding kernel function — get_phi","text":"","code":"get_phi(species_params, ppmr)"},{"path":"https://sizespectrum.org/mizer/dev/reference/get_phi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get values from feeding kernel function — get_phi","text":"species_params species parameter data frame ppmr Values predator/prey mass ratio evaluate predation kernel function","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/get_phi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get values from feeding kernel function — get_phi","text":"array (species x ppmr) values predation kernel function","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/get_required_reproduction.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine reproduction rate needed for initial egg abundance — get_required_reproduction","title":"Determine reproduction rate needed for initial egg abundance — get_required_reproduction","text":"Determine reproduction rate needed initial egg abundance","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/get_required_reproduction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine reproduction rate needed for initial egg abundance — get_required_reproduction","text":"","code":"get_required_reproduction(params)"},{"path":"https://sizespectrum.org/mizer/dev/reference/get_required_reproduction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine reproduction rate needed for initial egg abundance — get_required_reproduction","text":"params MizerParams object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/get_required_reproduction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine reproduction rate needed for initial egg abundance — get_required_reproduction","text":"vector reproduction rates species","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/get_size_range_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Get size range array — get_size_range_array","title":"Get size range array — get_size_range_array","text":"Helper function returns array (species x size) boolean values indicating whether size bin within size limits specified arguments. Either size limits can species can specified vectors one value species model.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/get_size_range_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get size range array — get_size_range_array","text":"","code":"get_size_range_array(   params,   min_w = min(params@w),   max_w = max(params@w),   min_l = NULL,   max_l = NULL,   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/get_size_range_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get size range array — get_size_range_array","text":"params MizerParams object min_w Smallest weight size range. Defaults smallest weight model. max_w Largest weight size range. Defaults largest weight model. min_l Smallest length size range. supplied, takes precedence min_w. max_l Largest length size range. supplied, takes precedence max_w. ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/get_size_range_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get size range array — get_size_range_array","text":"Boolean array (species x size)","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/get_size_range_array.html","id":"length-to-weight-conversion","dir":"Reference","previous_headings":"","what":"Length to weight conversion","title":"Get size range array — get_size_range_array","text":"min_l specified need specify min_w . However, length specified (minimum maximum) necessary species parameter data.frame include parameters b determine relation length \\(l\\) weight \\(w\\) $$w = l^b.$$ possible mix length weight constraints, e.g. supplying minimum weight maximum length, must done species. default values minimum maximum weights spectrum, .e., full range size spectrum used.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/get_time_elements.html","id":null,"dir":"Reference","previous_headings":"","what":"Get_time_elements — get_time_elements","title":"Get_time_elements — get_time_elements","text":"Internal function get array element references time dimension time based slots MizerSim object.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/get_time_elements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get_time_elements — get_time_elements","text":"","code":"get_time_elements(sim, time_range, slot_name = \"n\")"},{"path":"https://sizespectrum.org/mizer/dev/reference/get_time_elements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get_time_elements — get_time_elements","text":"sim MizerSim object time_range vector times. range times relevant, .e., times smallest largest selected. time_range can character numeric. slot_name Obsolete. needed early versions mizer effort slot different time dimension slots.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/get_time_elements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get_time_elements — get_time_elements","text":"Named boolean vector indicating time whether included range .","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/idxFinalT.html","id":null,"dir":"Reference","previous_headings":"","what":"Time index at end of simulation — idxFinalT","title":"Time index at end of simulation — idxFinalT","text":"Time index end simulation","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/idxFinalT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time index at end of simulation — idxFinalT","text":"","code":"idxFinalT(sim)"},{"path":"https://sizespectrum.org/mizer/dev/reference/idxFinalT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time index at end of simulation — idxFinalT","text":"sim MizerSim object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/idxFinalT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time index at end of simulation — idxFinalT","text":"integer giving index extracting results final time step","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/idxFinalT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time index at end of simulation — idxFinalT","text":"","code":"idx <- idxFinalT(NS_sim) idx #> [1] 44 # This coincides with length(getTimes(NS_sim)) #> [1] 44 # and corresponds to the final time getTimes(NS_sim)[idx] #> [1] 2010 # We can use this index to extract the result at the final time identical(N(NS_sim)[idx, , ], finalN(NS_sim)) #> [1] TRUE identical(NResource(NS_sim)[idx, ], finalNResource(NS_sim)) #> [1] TRUE"},{"path":"https://sizespectrum.org/mizer/dev/reference/indicator_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Description of indicator functions — indicator_functions","title":"Description of indicator functions — indicator_functions","text":"Mizer provides range functions calculate indicators MizerSim object.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/indicator_functions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Description of indicator functions — indicator_functions","text":"list available indicator functions MizerSim objects given table ","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/initialN-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Initial values for fish spectra — initialN<-","title":"Initial values for fish spectra — initialN<-","text":"Values used starting values simulations project().","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/initialN-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initial values for fish spectra — initialN<-","text":"","code":"initialN(params) <- value  initialN(object)"},{"path":"https://sizespectrum.org/mizer/dev/reference/initialN-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initial values for fish spectra — initialN<-","text":"params MizerParams object value matrix dimensions species x size holding initial number densities fish spectra. object object class MizerParams MizerSim","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/initialN-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initial values for fish spectra — initialN<-","text":"","code":"# Doubling abundance of Cod in the initial state of the North Sea model params <- NS_params initialN(params)[\"Cod\", ] <- 2 * initialN(params)[\"Cod\", ] # Calculating the corresponding initial biomass biomass <- initialN(params)[\"Cod\", ] * dw(NS_params) * w(NS_params) # Of course this initial state will no longer be a steady state params <- steady(params) #> Convergence was achieved in 19.5 years. #> Warning: The following species require an unrealistic reproductive efficiency greater than 1: Sprat, Sandeel, Cod, Saithe"},{"path":"https://sizespectrum.org/mizer/dev/reference/initialNOther-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Initial values for other ecosystem components — initialNOther<-","title":"Initial values for other ecosystem components — initialNOther<-","text":"Values used starting values simulations project().","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/initialNOther-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initial values for other ecosystem components — initialNOther<-","text":"","code":"initialNOther(params) <- value  initialNOther(object)"},{"path":"https://sizespectrum.org/mizer/dev/reference/initialNOther-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initial values for other ecosystem components — initialNOther<-","text":"params MizerParams object value named list initial values ecosystem components object object class MizerParams MizerSim","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/initialNResource-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Initial value for resource spectrum — initialNResource<-","title":"Initial value for resource spectrum — initialNResource<-","text":"Value used starting value simulations project().","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/initialNResource-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initial value for resource spectrum — initialNResource<-","text":"","code":"initialNResource(params) <- value  initialNResource(object)"},{"path":"https://sizespectrum.org/mizer/dev/reference/initialNResource-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initial value for resource spectrum — initialNResource<-","text":"params MizerParams object value vector initial number densities resource spectrum object object class MizerParams MizerSim","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/initialNResource-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initial value for resource spectrum — initialNResource<-","text":"","code":"# Doubling resource abundance in the initial state of the North Sea model params <- NS_params initialNResource(params) <- 2 * initialNResource(params) # Of course this initial state will no longer be a steady state params <- steady(params) #> Convergence was achieved in 16.5 years. #> Warning: The following species require an unrealistic reproductive efficiency greater than 1: Sprat, Sandeel, N.pout, Herring, Dab, Whiting, Sole, Gurnard, Plaice, Haddock"},{"path":"https://sizespectrum.org/mizer/dev/reference/initial_effort.html","id":null,"dir":"Reference","previous_headings":"","what":"Initial fishing effort — initial_effort","title":"Initial fishing effort — initial_effort","text":"fishing effort named vector, specifying fishing gear effort invested fishing gear. effort value gear multiplied catchability selectivity determine fishing mortality imposed gear, see setFishing() details. function also accepts effort yet valid:","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/initial_effort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initial fishing effort — initial_effort","text":"","code":"initial_effort(params)  initial_effort(params) <- value  validEffortVector(effort, params)"},{"path":"https://sizespectrum.org/mizer/dev/reference/initial_effort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initial fishing effort — initial_effort","text":"params MizerParams object value initial fishing effort effort vector scalar.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/initial_effort.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initial fishing effort — initial_effort","text":"initial effort set can overruled running simulation providing effort argument project() allows specify time-varying effort. scalar, replicated gear unnamed vector, assumed order gears params object named vector gear names different order params object. sorted correctly. named vector supplies values gears. effort gears set zero. effort argument lead error either unnamed wrong length named names match gears numeric","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/inter.html","id":null,"dir":"Reference","previous_headings":"","what":"Alias for NS_interaction — inter","title":"Alias for NS_interaction — inter","text":"alias provided backward compatibility mizer version <= 2.3","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/inter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alias for NS_interaction — inter","text":"","code":"inter"},{"path":"https://sizespectrum.org/mizer/dev/reference/inter.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Alias for NS_interaction — inter","text":"12 x 12 matrix.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/inter.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Alias for NS_interaction — inter","text":"Blanchard et al.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/knife_edge.html","id":null,"dir":"Reference","previous_headings":"","what":"Weight based knife-edge selectivity function — knife_edge","title":"Weight based knife-edge selectivity function — knife_edge","text":"knife-edge selectivity function weights greater equal knife_edge_size selected.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/knife_edge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weight based knife-edge selectivity function — knife_edge","text":"","code":"knife_edge(w, knife_edge_size, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/knife_edge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weight based knife-edge selectivity function — knife_edge","text":"w size individual. knife_edge_size weight knife-edge operates. ... Unused","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/log_breaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to produce nice breaks on logarithmic axes — log_breaks","title":"Helper function to produce nice breaks on logarithmic axes — log_breaks","text":"needed logarithmic y-axis spans less one order magnitude, case ggplot2 default produces ticks.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/log_breaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to produce nice breaks on logarithmic axes — log_breaks","text":"","code":"log_breaks(n = 6)"},{"path":"https://sizespectrum.org/mizer/dev/reference/log_breaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to produce nice breaks on logarithmic axes — log_breaks","text":"n Approximate number ticks","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/log_breaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to produce nice breaks on logarithmic axes — log_breaks","text":"function can used break argument calls scale_y_continuous() scale_x_continuous()","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/log_breaks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper function to produce nice breaks on logarithmic axes — log_breaks","text":"Thanks Heather Turner https://stackoverflow.com/questions/14255533/pretty-ticks--log-normal-scale-using-ggplot2-dynamic--manual","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/lognormal_pred_kernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Lognormal predation kernel — lognormal_pred_kernel","title":"Lognormal predation kernel — lognormal_pred_kernel","text":"commonly-used predation kernel. log predator/prey mass ratio normally distributed.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/lognormal_pred_kernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lognormal predation kernel — lognormal_pred_kernel","text":"","code":"lognormal_pred_kernel(ppmr, beta, sigma)"},{"path":"https://sizespectrum.org/mizer/dev/reference/lognormal_pred_kernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lognormal predation kernel — lognormal_pred_kernel","text":"ppmr vector predator/prey size ratios beta preferred predator/prey size ratio sigma width parameter log-normal kernel","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/lognormal_pred_kernel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lognormal predation kernel — lognormal_pred_kernel","text":"vector giving value predation kernel predator/prey mass ratios ppmr argument.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/lognormal_pred_kernel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lognormal predation kernel — lognormal_pred_kernel","text":"Writing predator mass \\(w\\) prey mass \\(w_p\\), feeding kernel given $$\\phi_i(w, w_p) =  \\exp \\left[ \\frac{-(\\ln(w / w_p / \\beta_i))^2}{2\\sigma_i^2} \\right] $$ \\(w/w_p\\) larger 1 zero otherwise. \\(\\beta_i\\) preferred predator-prey mass ratio \\(\\sigma_i\\) determines width kernel. two parameters need given species parameter dataframe columns beta sigma. function called setPredKernel() set predation kernel slots MizerParams object.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/matchBiomasses.html","id":null,"dir":"Reference","previous_headings":"","what":"Match biomasses to observations — matchBiomasses","title":"Match biomasses to observations — matchBiomasses","text":"function adjusts abundances species model biomasses match observations.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/matchBiomasses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match biomasses to observations — matchBiomasses","text":"","code":"matchBiomasses(params, species = NULL)"},{"path":"https://sizespectrum.org/mizer/dev/reference/matchBiomasses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match biomasses to observations — matchBiomasses","text":"params MizerParams object species species affected. Optional. default observed biomasses matched. vector species names, numeric vector species indices, logical vector indicating species whether affected (TRUE) .","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/matchBiomasses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match biomasses to observations — matchBiomasses","text":"MizerParams object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/matchBiomasses.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Match biomasses to observations — matchBiomasses","text":"function works multiplying species abundance density sizes factor. course give steady state solution, even initial abundance densities steady state. using function may want use steady() run model steady state, course biomasses longer match exactly. iterate process. described blog post https://bit.ly/2YqXESV. can use function need added biomass_observed column model gives observed biomass grams.  species observed biomass, set value biomass_observed column 0 NA. Biomass observations usually include individuals certain size. size specified biomass_cutoff column species parameter data frame. missing, assumed sizes included observed biomass, .e., includes larval biomass.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/matchBiomasses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match biomasses to observations — matchBiomasses","text":"","code":"params <- NS_params species_params(params)$biomass_observed <-      c(0.8, 61, 12, 35, 1.6, 20, 10, 7.6, 135, 60, 30, 78) species_params(params)$biomass_cutoff <- 10 params <- calibrateBiomass(params) params <- matchBiomasses(params) plotBiomassObservedVsModel(params)"},{"path":"https://sizespectrum.org/mizer/dev/reference/matchYields.html","id":null,"dir":"Reference","previous_headings":"","what":"Match yields to observations — matchYields","title":"Match yields to observations — matchYields","text":"function adjusts abundances species model yearly yields given fishing mortalities match observations.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/matchYields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match yields to observations — matchYields","text":"","code":"matchYields(params, species = NULL)"},{"path":"https://sizespectrum.org/mizer/dev/reference/matchYields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match yields to observations — matchYields","text":"params MizerParams object species species affected. Optional. default observed yields matched. vector species names, numeric vector species indices, logical vector indicating species whether affected (TRUE) .","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/matchYields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match yields to observations — matchYields","text":"MizerParams object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/matchYields.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Match yields to observations — matchYields","text":"function works multiplying species abundance density sizes factor. course give steady state solution, even initial abundance densities steady state. using function may want use steady() run model steady state, course yields longer match exactly. iterate process. described blog post https://bit.ly/2YqXESV. can use function need added yield_observed column model gives observed yields grams per year.  species observed biomass, set value yield_observed column 0 NA.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/matchYields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match yields to observations — matchYields","text":"","code":"params <- NS_params species_params(params)$yield_observed <-      c(0.8, 61, 12, 35, 1.6, 20, 10, 7.6, 135, 60, 30, 78) gear_params(params)$catchability <-     c(1.3, 0.065, 0.31, 0.18, 0.98, 0.24, 0.37, 0.46, 0.18, 0.30, 0.27, 0.39) params <- calibrateYield(params) params <- matchYields(params) #> The following species are not being fished in your model and their abundances will not be changed: Sprat, Sandeel, N.pout. plotYieldObservedVsModel(params) #> The following species are not being fished in your model and will not be included in the plot: Sprat, Sandeel, N.pout."},{"path":"https://sizespectrum.org/mizer/dev/reference/mizer-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mizer: Multi-species size-based modelling in R — mizer-package","title":"mizer: Multi-species size-based modelling in R — mizer-package","text":"mizer package implements multi-species size-based modelling R. designed modelling marine ecosystems.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizer-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"mizer: Multi-species size-based modelling in R — mizer-package","text":"Using mizer relatively simple.  three main stages: Setting model parameters. done creating object class MizerParams. includes model parameters life history parameters species, range size spectrum. several setup functions help create MizerParams objects particular types models: newCommunityParams() newTraitParams() newMultispeciesParams() Running simulation. done calling project() function model parameters. produces object MizerSim contains results simulation. Exploring results. simulation run, results can explored using range plotting_functions, summary_functions indicator_functions. See mizer website full details principles behind mizer package can used perform size-based modelling.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/mizer-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mizer: Multi-species size-based modelling in R — mizer-package","text":"Maintainer: Gustav Delius gustav.delius@york.ac.uk (ORCID) [copyright holder] Authors: Finlay Scott drfinlayscott@gmail.com [copyright holder] Julia Blanchard julia.blanchard@utas.edu.au (ORCID) [copyright holder] Ken Andersen kha@aqua.dtu.dk (ORCID) [copyright holder] contributors: Richard Southwell richard.southwell@york.ac.uk [contributor, copyright holder]","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerEGrowth.html","id":null,"dir":"Reference","previous_headings":"","what":"Get energy rate available for growth needed to project standard mizer model — mizerEGrowth","title":"Get energy rate available for growth needed to project standard mizer model — mizerEGrowth","text":"Calculates energy rate \\(g_i(w)\\) (grams/year) available species size growth metabolism, movement reproduction accounted . Used project() performing simulations. usually call function directly instead use getEGrowth(), calls function unless alternative function registered, see .","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerEGrowth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get energy rate available for growth needed to project standard mizer model — mizerEGrowth","text":"","code":"mizerEGrowth(params, n, n_pp, n_other, t, e_repro, e, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerEGrowth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get energy rate available for growth needed to project standard mizer model — mizerEGrowth","text":"params MizerParams object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem t time calculation (used standard mizer rate functions useful extensions time-dependent parameters.) e_repro energy available reproduction calculated getERepro(). e energy available reproduction growth calculated getEReproAndGrowth(). ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerEGrowth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get energy rate available for growth needed to project standard mizer model — mizerEGrowth","text":"two dimensional array (species x size) growth rates.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerEGrowth.html","id":"your-own-growth-rate-function","dir":"Reference","previous_headings":"","what":"Your own growth rate function","title":"Get energy rate available for growth needed to project standard mizer model — mizerEGrowth","text":"default getEGrowth() calls mizerEGrowth(). However can replace alternative growth rate function. function called \"myEGrowth\" register MizerParams object params   function called instead mizerEGrowth(), arguments.","code":"params <- setRateFunction(params, \"EGrowth\", \"myEGrowth\")"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerERepro.html","id":null,"dir":"Reference","previous_headings":"","what":"Get energy rate available for reproduction needed to project standard mizer\nmodel — mizerERepro","title":"Get energy rate available for reproduction needed to project standard mizer\nmodel — mizerERepro","text":"Calculates energy rate (grams/year) available reproduction growth metabolism accounted . usually call function directly instead use getERepro(), calls function unless alternative function registered, see .","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerERepro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get energy rate available for reproduction needed to project standard mizer\nmodel — mizerERepro","text":"","code":"mizerERepro(params, n, n_pp, n_other, t, e, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerERepro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get energy rate available for reproduction needed to project standard mizer\nmodel — mizerERepro","text":"params MizerParams object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem t time calculation (used standard mizer rate functions useful extensions time-dependent parameters.) e two dimensional array (species x size) holding energy available reproduction growth calculated mizerEReproAndGrowth(). ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerERepro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get energy rate available for reproduction needed to project standard mizer\nmodel — mizerERepro","text":"two dimensional array (species x size) holding $$\\psi_i(w)E_{r.}(w)$$ \\(E_{r.}(w)\\) rate energy becomes available growth reproduction, calculated mizerEReproAndGrowth(), \\(\\psi_i(w)\\) proportion energy used reproduction. proportion taken params object set setReproduction().","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerERepro.html","id":"your-own-reproduction-rate-function","dir":"Reference","previous_headings":"","what":"Your own reproduction rate function","title":"Get energy rate available for reproduction needed to project standard mizer\nmodel — mizerERepro","text":"default getERepro() calls mizerERepro(). However can replace alternative reproduction rate function. function called \"myERepro\" register MizerParams object params   function called instead mizerERepro(), arguments.","code":"params <- setRateFunction(params, \"ERepro\", \"myERepro\")"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerEReproAndGrowth.html","id":null,"dir":"Reference","previous_headings":"","what":"Get energy rate available for reproduction and growth  needed to project\nstandard mizer model — mizerEReproAndGrowth","title":"Get energy rate available for reproduction and growth  needed to project\nstandard mizer model — mizerEReproAndGrowth","text":"Calculates energy rate \\(E_{r.}(w)\\) (grams/year) available individual species size w reproduction growth metabolism movement accounted . usually call function directly instead use getEReproAndGrowth(), calls function unless alternative function registered, see .","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerEReproAndGrowth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get energy rate available for reproduction and growth  needed to project\nstandard mizer model — mizerEReproAndGrowth","text":"","code":"mizerEReproAndGrowth(   params,   n,   n_pp,   n_other,   t,   encounter,   feeding_level,   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerEReproAndGrowth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get energy rate available for reproduction and growth  needed to project\nstandard mizer model — mizerEReproAndGrowth","text":"params MizerParams object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem t time calculation (used standard mizer rate functions useful extensions time-dependent parameters.) encounter array (species x size) encounter rate calculated getEncounter(). feeding_level array (species x size) feeding level calculated getFeedingLevel(). ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerEReproAndGrowth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get energy rate available for reproduction and growth  needed to project\nstandard mizer model — mizerEReproAndGrowth","text":"two dimensional array (species x size) holding $$E_{r.}(w) = \\max(0, \\alpha_i\\, (1 - {\\tt feeding\\_level}_i(w))\\,                             {\\tt encounter}_i(w) - {\\tt metab}_i(w)).$$ Due form feeding level, calculated getFeedingLevel(), can also expressed $$E_{r.}(w) = \\max(0, \\alpha_i\\, {\\tt feeding\\_level}_i(w)\\,                             h_i(w) - {\\tt metab}_i(w))$$ \\(h_i\\) maximum intake rate, set setMaxIntakeRate(). assimilation rate \\(\\alpha_i\\) taken species parameter data frame params. metabolic rate metab taken params set setMetabolicRate(). return value can negative, means energy intake cover cost metabolism movement.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerEReproAndGrowth.html","id":"your-own-energy-rate-function","dir":"Reference","previous_headings":"","what":"Your own energy rate function","title":"Get energy rate available for reproduction and growth  needed to project\nstandard mizer model — mizerEReproAndGrowth","text":"default getEReproAndGrowth() calls mizerEReproAndGrowth(). However can replace alternative energy rate function. function called \"myEReproAndGrowth\" register MizerParams object params   function called instead mizerEReproAndGrowth(), arguments.","code":"params <- setRateFunction(params, \"EReproAndGrowth\", \"myEReproAndGrowth\")"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerEncounter.html","id":null,"dir":"Reference","previous_headings":"","what":"Get encounter rate needed to project standard mizer model — mizerEncounter","title":"Get encounter rate needed to project standard mizer model — mizerEncounter","text":"Calculates rate \\(E_i(w)\\) predator species \\(\\) weight \\(w\\) encounters food (grams/year). usually call function directly instead use getEncounter(), calls function unless alternative function registered, see .","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerEncounter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get encounter rate needed to project standard mizer model — mizerEncounter","text":"","code":"mizerEncounter(params, n, n_pp, n_other, t, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerEncounter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get encounter rate needed to project standard mizer model — mizerEncounter","text":"params MizerParams object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem t time calculation (used standard mizer rate functions useful extensions time-dependent parameters.) ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerEncounter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get encounter rate needed to project standard mizer model — mizerEncounter","text":"named two dimensional array (predator species x predator size) encounter rates.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerEncounter.html","id":"predation-encounter","dir":"Reference","previous_headings":"","what":"Predation encounter","title":"Get encounter rate needed to project standard mizer model — mizerEncounter","text":"encounter rate \\(E_i(w)\\) predator species \\(\\) weight \\(w\\) encounters food contributions encounter fish prey resource. determined summing prey species resource spectrum integrating prey sizes \\(w_p\\), weighted predation kernel \\(\\phi(w,w_p)\\): $$ E_i(w) = \\gamma_i(w) \\int  \\left( \\theta_{ip} N_R(w_p) + \\sum_{j} \\theta_{ij} N_j(w_p) \\right)  \\phi_i(w,w_p) w_p \\, dw_p. $$ \\(N_j(w)\\) abundance density species \\(j\\) \\(N_R(w)\\) abundance density resource. overall prefactor \\(\\gamma_i(w)\\) determines predation power predator. interpreted search volume set setSearchVolume() function. predation kernel \\(\\phi(w,w_p)\\) set setPredKernel() function. species interaction matrix \\(\\theta_{ij}\\) set setInteraction() resource interaction vector \\(\\theta_{ip}\\) taken interaction_resource column params@species_params.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerEncounter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get encounter rate needed to project standard mizer model — mizerEncounter","text":"encounter rate multiplied \\(1-f_0\\) obtain consumption rate, \\(f_0\\) feeding level calculated getFeedingLevel(). used project() function performing simulations. function returns values also sizes outside size-range species. values used, meaningless. model contains additional components added setComponent() specified encounter_fun function encounters components included returned value.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerEncounter.html","id":"your-own-encounter-function","dir":"Reference","previous_headings":"","what":"Your own encounter function","title":"Get encounter rate needed to project standard mizer model — mizerEncounter","text":"default getEncounter() calls mizerEncounter(). However can replace alternative encounter function. function called \"myEncounter\" register MizerParams object params   function called instead mizerEncounter(), arguments.","code":"params <- setRateFunction(params, \"Encounter\", \"myEncounter\")"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerFMort.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the total fishing mortality rate from all fishing gears — mizerFMort","title":"Get the total fishing mortality rate from all fishing gears — mizerFMort","text":"Calculates total fishing mortality  (units 1/year) gears species size. total fishing mortality just sum fishing mortalities imposed gear, \\(\\mu_{f.}(w)=\\sum_g F_{g,,w}\\). usually call function directly instead use getFMort(), calls function unless alternative function registered, see .","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerFMort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the total fishing mortality rate from all fishing gears — mizerFMort","text":"","code":"mizerFMort(params, n, n_pp, n_other, t, effort, e_growth, pred_mort, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerFMort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the total fishing mortality rate from all fishing gears — mizerFMort","text":"params MizerParams object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem t time calculation (used standard mizer rate functions useful extensions time-dependent parameters.) effort vector effort fishing gear. e_growth array (species x size) energy available growth calculated getEGrowth(). Unused. pred_mort two dimensional array (species x size) predation mortality calculated getPredMort(). Unused. ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerFMort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the total fishing mortality rate from all fishing gears — mizerFMort","text":"array (species x size) fishing mortality.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerFMort.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get the total fishing mortality rate from all fishing gears — mizerFMort","text":": fishing mortality = catchability x selectivity x effort.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerFMort.html","id":"your-own-fishing-mortality-function","dir":"Reference","previous_headings":"","what":"Your own fishing mortality function","title":"Get the total fishing mortality rate from all fishing gears — mizerFMort","text":"default getFMort() calls mizerFMort(). However can replace alternative fishing mortality function. function called \"myFMort\" register MizerParams object params   function called instead mizerFMort(), arguments.","code":"params <- setRateFunction(params, \"FMort\", \"myFMort\")"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerFMortGear.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the fishing mortality needed to project\nstandard mizer model — mizerFMortGear","title":"Get the fishing mortality needed to project\nstandard mizer model — mizerFMortGear","text":"Calculates fishing mortality rate \\(F_{g,,w}\\) gear, species size. helper function mizerFMort().","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerFMortGear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the fishing mortality needed to project\nstandard mizer model — mizerFMortGear","text":"","code":"mizerFMortGear(params, effort)"},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerFMortGear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the fishing mortality needed to project\nstandard mizer model — mizerFMortGear","text":"params MizerParams object effort vector effort fishing gear.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerFMortGear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the fishing mortality needed to project\nstandard mizer model — mizerFMortGear","text":"three dimensional array (gear x species x size) fishing mortality","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerFMortGear.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get the fishing mortality needed to project\nstandard mizer model — mizerFMortGear","text":": fishing mortality = catchability x selectivity x effort.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerFeedingLevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get feeding level needed to project standard mizer model — mizerFeedingLevel","title":"Get feeding level needed to project standard mizer model — mizerFeedingLevel","text":"usually call function directly instead use getFeedingLevel(), calls function unless alternative function registered, see .","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerFeedingLevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get feeding level needed to project standard mizer model — mizerFeedingLevel","text":"","code":"mizerFeedingLevel(params, n, n_pp, n_other, t, encounter, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerFeedingLevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get feeding level needed to project standard mizer model — mizerFeedingLevel","text":"params MizerParams object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem t time calculation (used standard mizer rate functions useful extensions time-dependent parameters.) encounter two dimensional array (predator species x predator size) encounter rate. ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerFeedingLevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get feeding level needed to project standard mizer model — mizerFeedingLevel","text":"two dimensional array (predator species x predator size) feeding level.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerFeedingLevel.html","id":"feeding-level","dir":"Reference","previous_headings":"","what":"Feeding level","title":"Get feeding level needed to project standard mizer model — mizerFeedingLevel","text":"feeding level \\(f_i(w)\\) proportion maximum intake rate predator actually taking fish. calculated encounter rate \\(E_i\\) maximum intake rate \\(h_i(w)\\) $$f_i(w) = \\frac{E_i(w)}{E_i(w)+h_i(w)}.$$ encounter rate \\(E_i\\) passed argument calculated getEncounter(). maximum intake rate \\(h_i(w)\\) taken params object, set setMaxIntakeRate(). consequence expression feeding level, \\(1-f_i(w)\\) proportion food available predator actually consumes.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerFeedingLevel.html","id":"your-own-feeding-level-function","dir":"Reference","previous_headings":"","what":"Your own feeding level function","title":"Get feeding level needed to project standard mizer model — mizerFeedingLevel","text":"default getFeedingLevel() calls mizerFeedingLevel(). However can replace alternative feeding level function. function called \"myFeedingLevel\" register MizerParams object params   function called instead mizerFeedingLevel(), arguments.","code":"params <- setRateFunction(params, \"FeedingLevel\", \"myFeedingLevel\")"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerMort.html","id":null,"dir":"Reference","previous_headings":"","what":"Get total mortality rate needed to project standard mizer model — mizerMort","title":"Get total mortality rate needed to project standard mizer model — mizerMort","text":"Calculates total mortality rate \\(\\mu_i(w)\\)  (units 1/year) species size predation mortality, background mortality fishing mortality. usually call function directly instead use getMort(), calls function unless alternative function registered, see .","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerMort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get total mortality rate needed to project standard mizer model — mizerMort","text":"","code":"mizerMort(params, n, n_pp, n_other, t, f_mort, pred_mort, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerMort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get total mortality rate needed to project standard mizer model — mizerMort","text":"params MizerParams object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem t time calculation (used standard mizer rate functions useful extensions time-dependent parameters.) f_mort two dimensional array (species x size) fishing mortality pred_mort two dimensional array (species x size) predation mortality ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerMort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get total mortality rate needed to project standard mizer model — mizerMort","text":"named two dimensional array (species x size) total mortality rates.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerMort.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get total mortality rate needed to project standard mizer model — mizerMort","text":"model contains additional components added setComponent() specified mort_fun function mortality inflicted components included returned value.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerMort.html","id":"your-own-mortality-function","dir":"Reference","previous_headings":"","what":"Your own mortality function","title":"Get total mortality rate needed to project standard mizer model — mizerMort","text":"default getMort() calls mizerMort(). However can replace alternative mortality function. function called \"myMort\" register MizerParams object params   function called instead mizerMort(), arguments.","code":"params <- setRateFunction(params, \"Mort\", \"myMort\")"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerPredMort.html","id":null,"dir":"Reference","previous_headings":"","what":"Get total predation mortality rate needed to project standard mizer model — mizerPredMort","title":"Get total predation mortality rate needed to project standard mizer model — mizerPredMort","text":"Calculates total predation mortality rate \\(\\mu_{p,}(w_p)\\) (units 1/year) prey species prey size: $$\\mu_{p.}(w_p) = \\sum_j {\\tt pred\\_rate}_j(w_p)\\, \\theta_{ji}.$$ usually call function directly instead use getPredMort(), calls function unless alternative function registered, see .","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerPredMort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get total predation mortality rate needed to project standard mizer model — mizerPredMort","text":"","code":"mizerPredMort(params, n, n_pp, n_other, t, pred_rate, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerPredMort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get total predation mortality rate needed to project standard mizer model — mizerPredMort","text":"params MizerParams object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem t time calculation (used standard mizer rate functions useful extensions time-dependent parameters.) pred_rate two dimensional array (predator species x predator size) feeding level. ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerPredMort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get total predation mortality rate needed to project standard mizer model — mizerPredMort","text":"two dimensional array (prey species x prey size) predation mortality","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerPredMort.html","id":"your-own-predation-mortality-function","dir":"Reference","previous_headings":"","what":"Your own predation mortality function","title":"Get total predation mortality rate needed to project standard mizer model — mizerPredMort","text":"default getPredMort() calls mizerPredMort(). However can replace alternative predation mortality function. function called \"myPredMort\" register MizerParams object params   function called instead mizerPredMort(), arguments.","code":"params <- setRateFunction(params, \"PredMort\", \"myPredMort\")"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerPredRate.html","id":null,"dir":"Reference","previous_headings":"","what":"Get predation rate needed to project standard mizer model — mizerPredRate","title":"Get predation rate needed to project standard mizer model — mizerPredRate","text":"Calculates potential rate (units 1/year) prey individual given size \\(w\\) killed predators species \\(j\\). formulas $${\\tt pred\\_rate}_j(w_p) = \\int \\phi_j(w,w_p) (1-f_j(w))    \\gamma_j(w) N_j(w) \\, dw.$$ potential rate used function mizerPredMort() calculate realised predation mortality rate prey individual. usually call function directly instead use getPredRate(), calls function unless alternative function registered, see .","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerPredRate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get predation rate needed to project standard mizer model — mizerPredRate","text":"","code":"mizerPredRate(params, n, n_pp, n_other, t, feeding_level, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerPredRate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get predation rate needed to project standard mizer model — mizerPredRate","text":"params MizerParams object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem t time calculation (used standard mizer rate functions useful extensions time-dependent parameters.) feeding_level array (species x size) feeding level calculated getFeedingLevel(). ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerPredRate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get predation rate needed to project standard mizer model — mizerPredRate","text":"named two dimensional array (predator species x prey size) predation rate, prey size runs fish community plus resource spectrum.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerPredRate.html","id":"your-own-predation-rate-function","dir":"Reference","previous_headings":"","what":"Your own predation rate function","title":"Get predation rate needed to project standard mizer model — mizerPredRate","text":"default getPredRate() calls mizerPredRate(). However can replace alternative predation rate function. function called \"myPredRate\" register MizerParams object params   function called instead mizerPredRate(), arguments.","code":"params <- setRateFunction(params, \"PredRate\", \"myPredRate\")"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerRDI.html","id":null,"dir":"Reference","previous_headings":"","what":"Get density-independent rate of reproduction needed to project standard\nmizer model — mizerRDI","title":"Get density-independent rate of reproduction needed to project standard\nmizer model — mizerRDI","text":"Calculates density-independent rate total egg production \\(R_{di}\\) (units 1/year) density dependence, species. usually call function directly instead use getRDI(), calls function unless alternative function registered, see .","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerRDI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get density-independent rate of reproduction needed to project standard\nmizer model — mizerRDI","text":"","code":"mizerRDI(params, n, n_pp, n_other, t, e_growth, mort, e_repro, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerRDI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get density-independent rate of reproduction needed to project standard\nmizer model — mizerRDI","text":"params MizerParams object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem t time calculation (used standard mizer rate functions useful extensions time-dependent parameters.) e_growth array (species x size) energy available growth calculated getEGrowth(). Unused. mort array (species x size) mortality rate calculated getMort(). Unused. e_repro array (species x size) energy available reproduction calculated getERepro(). ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerRDI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get density-independent rate of reproduction needed to project standard\nmizer model — mizerRDI","text":"numeric vector rate egg production species.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerRDI.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get density-independent rate of reproduction needed to project standard\nmizer model — mizerRDI","text":"rate obtained taking per capita rate \\(E_r(w)\\psi(w)\\) energy invested reproduction, calculated getERepro(), multiplying number individuals\\(N(w)\\) integrating sizes \\(w\\) multiplying reproductive efficiency \\(\\epsilon\\) dividing egg size w_min, factor two account two sexes: $$R_{di} = \\frac{\\epsilon}{2 w_{min}} \\int N(w)  E_r(w) \\psi(w) \\, dw$$ Used getRDD() calculate actual, density dependent rate. See setReproduction() details.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerRDI.html","id":"your-own-reproduction-function","dir":"Reference","previous_headings":"","what":"Your own reproduction function","title":"Get density-independent rate of reproduction needed to project standard\nmizer model — mizerRDI","text":"default getRDI() calls mizerRDI(). However can replace alternative reproduction function. function called \"myRDI\" register MizerParams object params   function called instead mizerRDI(), arguments. example alternative reproduction function see constantEggRDI().","code":"params <- setRateFunction(params, \"RDI\", \"myRDI\")"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerRates.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all rates needed to project standard mizer model — mizerRates","title":"Get all rates needed to project standard mizer model — mizerRates","text":"Calls rate functions sequence collects results list.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerRates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all rates needed to project standard mizer model — mizerRates","text":"","code":"mizerRates(params, n, n_pp, n_other, t = 0, effort, rates_fns, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerRates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all rates needed to project standard mizer model — mizerRates","text":"params MizerParams object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem t time calculation (used standard mizer rate functions useful extensions time-dependent parameters.) effort effort fishing gear rates_fns Named list functions call calculate rates. Note list holds functions , names. ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerRates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get all rates needed to project standard mizer model — mizerRates","text":"default function returns list following components: encounter mizerEncounter() feeding_level mizerFeedingLevel() e mizerEReproAndGrowth() e_repro mizerERepro() e_growth mizerEGrowth() pred_rate mizerPredRate() pred_mort mizerPredMort() f_mort mizerFMort() mort mizerMort() rdi mizerRDI() rdd BevertonHoltRDD() resource_mort mizerResourceMort() However can replace rate functions rate function wish, see setRateFunction() details.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerResourceMort.html","id":null,"dir":"Reference","previous_headings":"","what":"Get predation mortality rate for resource needed to project standard mizer\nmodel — mizerResourceMort","title":"Get predation mortality rate for resource needed to project standard mizer\nmodel — mizerResourceMort","text":"Calculates predation mortality rate \\(\\mu_p(w)\\) resource spectrum resource size (units 1/year). usually call function directly instead use getResourceMort(), calls function unless alternative function registered, see .","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerResourceMort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get predation mortality rate for resource needed to project standard mizer\nmodel — mizerResourceMort","text":"","code":"mizerResourceMort(params, n, n_pp, n_other, t, pred_rate, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerResourceMort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get predation mortality rate for resource needed to project standard mizer\nmodel — mizerResourceMort","text":"params MizerParams object n matrix species abundances (species x size). n_pp vector resource abundance size n_other list abundances dynamical components ecosystem t time calculation (used standard mizer rate functions useful extensions time-dependent parameters.) pred_rate two dimensional array (predator species x prey size) predation rate, prey size runs fish community plus resource spectrum. ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerResourceMort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get predation mortality rate for resource needed to project standard mizer\nmodel — mizerResourceMort","text":"vector mortality rate resource size.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/mizerResourceMort.html","id":"your-own-resource-mortality-function","dir":"Reference","previous_headings":"","what":"Your own resource mortality function","title":"Get predation mortality rate for resource needed to project standard mizer\nmodel — mizerResourceMort","text":"default getResourceMort() calls mizerResourceMort(). However can replace alternative resource mortality function. function called \"myResourceMort\" register MizerParams object params   function called instead mizerResourceMort(), arguments.","code":"params <- setRateFunction(params, \"ResourceMort\", \"myResourceMort\")"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/newCommunityParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up parameters for a community-type model — newCommunityParams","title":"Set up parameters for a community-type model — newCommunityParams","text":"functions creates MizerParams object describing community-type model.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/newCommunityParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up parameters for a community-type model — newCommunityParams","text":"","code":"newCommunityParams(   max_w = 1e+06,   min_w = 0.001,   no_w = 100,   min_w_pp = 1e-10,   z0 = 0.1,   alpha = 0.2,   f0 = 0.7,   h = 10,   gamma = NA,   beta = 100,   sigma = 2,   n = 2/3,   kappa = 1000,   lambda = 2.05,   r_pp = 10,   knife_edge_size = 1000,   reproduction )"},{"path":"https://sizespectrum.org/mizer/dev/reference/newCommunityParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up parameters for a community-type model — newCommunityParams","text":"max_w maximum size community. w_inf species used represent community set value. min_w minimum size community. no_w number size bins consumer spectrum. min_w_pp smallest size resource spectrum. default set smallest value consumers can feed. z0 background mortality community. alpha assimilation efficiency community. f0 average feeding level individuals feed power-law spectrum. value used calculate search rate parameter gamma. h coefficient maximum food intake rate. gamma Volumetric search rate. Estimated using h, f0 kappa supplied. beta preferred predator prey mass ratio. sigma width prey preference. n allometric growth exponent. Used allometric exponent maximum intake rate community well intrinsic growth rate resource. kappa Coefficient intrinsic resource carrying capacity lambda Scaling exponent intrinsic resource carrying capacity r_pp Coefficient intrinsic resource birth rate knife_edge_size size edge knife-edge-selectivity function. reproduction constant reproduction smallest size class community spectrum. default set community spectrum continuous resource spectrum.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/newCommunityParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up parameters for a community-type model — newCommunityParams","text":"object type MizerParams","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/newCommunityParams.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set up parameters for a community-type model — newCommunityParams","text":"community model several features distinguish multi-species model: Species identities individuals ignored. aggregated single community. resource spectrum extends start community spectrum. Reproductive rate constant, independent energy invested reproduction, set 0. Standard metabolism turned (parameter ks set 0). Consequently, growth rate now determined solely assimilated food function many arguments, default values. Fishing selectivity modelled knife-edge function one parameter, knife_edge_size, determines size species selected. resulting MizerParams object can projected forward using project() like MizerParams object. projecting community model may necessary keep small time step size dt around 0.1 avoid instabilities solver. can check numerical instabilities plotting biomass abundance time projection.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/newCommunityParams.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Set up parameters for a community-type model — newCommunityParams","text":"K. H. Andersen,J. E. Beyer P. Lundberg, 2009, Trophic individual efficiencies size-structured communities, Proceedings Royal Society, 276, 109-114","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/newCommunityParams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up parameters for a community-type model — newCommunityParams","text":"","code":"if (FALSE) { params <- newCommunityParams(f0 = 0.7, z0 = 0.2) sim <- project(params, t_max = 10) plotBiomass(sim) plotSpectra(sim) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/newMultispeciesParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up parameters for a general multispecies model — newMultispeciesParams","title":"Set up parameters for a general multispecies model — newMultispeciesParams","text":"Sets multi-species size spectrum model filling slots MizerParams object based user-provided default parameters. long list arguments, almost sensible default values. required argument species_params data frame. arguments described details sections list.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/newMultispeciesParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up parameters for a general multispecies model — newMultispeciesParams","text":"","code":"newMultispeciesParams(   species_params,   interaction = NULL,   no_w = 100,   min_w = 0.001,   max_w = NA,   min_w_pp = NA,   pred_kernel = NULL,   search_vol = NULL,   intake_max = NULL,   metab = NULL,   p = 0.7,   ext_mort = NULL,   z0pre = 0.6,   z0exp = n - 1,   maturity = NULL,   repro_prop = NULL,   RDD = \"BevertonHoltRDD\",   resource_rate = NULL,   resource_capacity = NULL,   n = 2/3,   r_pp = 10,   kappa = 1e+11,   lambda = 2.05,   w_pp_cutoff = 10,   resource_dynamics = \"resource_semichemostat\",   gear_params = NULL,   selectivity = NULL,   catchability = NULL,   initial_effort = NULL,   info_level = 3,   z0 = deprecated() )"},{"path":"https://sizespectrum.org/mizer/dev/reference/newMultispeciesParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up parameters for a general multispecies model — newMultispeciesParams","text":"species_params data frame species-specific parameter values. interaction Optional interaction matrix species (predator species x prey species). default entries 1. See \"Setting interaction matrix\" section . no_w number size bins consumer spectrum. min_w Sets size eggs species given w_min column species_params dataframe. max_w largest size consumer spectrum. default set largest w_inf specified species_params data frame. min_w_pp smallest size resource spectrum. default set smallest value consumers can feed. pred_kernel Optional. array (species x predator size x prey size) holds predation coefficient predator size prey size. supplied, default set described section \"Setting predation kernel\". search_vol Optional. array (species x size) holding search volume species size. supplied, default set described section \"Setting search volume\". intake_max Optional. array (species x size) holding maximum intake rate species size. supplied, default set described section \"Setting maximum intake rate\". metab Optional. array (species x size) holding metabolic rate species size. supplied, default set described section \"Setting metabolic rate\". p allometric metabolic exponent. used metab given explicitly exponent specified p column species_params. ext_mort Optional. array (species x size) holding external mortality rate. z0pre z0, mortality sources, column species data frame, calculated z0pre * w_inf ^ z0exp. Default value 0.6. z0exp z0, mortality sources, column species data frame, calculated z0pre * w_inf ^ z0exp. Default value n-1. maturity Optional. array (species x size) holds proportion individuals species size mature. supplied, default set described section \"Setting reproduction\". repro_prop Optional. array (species x size) holds proportion consumed energy mature individual allocates reproduction species size. supplied, default set described section \"Setting reproduction\". RDD name function calculating density-dependent reproduction rate density-independent rate. Defaults \"BevertonHoltRDD()\". resource_rate Optional. Vector resource intrinsic birth rates resource_capacity Optional. Vector resource intrinsic carrying capacity n allometric growth exponent. can overruled individual species including n column species_params. r_pp Coefficient intrinsic resource birth rate kappa Coefficient intrinsic resource carrying capacity lambda Scaling exponent intrinsic resource carrying capacity w_pp_cutoff upper cut size resource spectrum.  carrying capacity set 0 size. Default 10 g. resource_dynamics Optional. Name function determines resource dynamics calculating resource spectrum next time step current state. need specify want use default resource_semichemostat(). gear_params data frame gear-specific parameter values. selectivity Optional. array (gear x species x size) holds selectivity gear species size, \\(S_{g,,w}\\). catchability Optional. array (gear x species) holds catchability species gear, \\(Q_{g,}\\). initial_effort Optional. number named numeric vector specifying fishing effort. number, effort used gears. vector, must named gear. info_level Controls amount information messages shown function sets default values parameters. z0 Use ext_mort instead. confused species_parameter z0.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/newMultispeciesParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up parameters for a general multispecies model — newMultispeciesParams","text":"object type MizerParams","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/newMultispeciesParams.html","id":"species-parameters","dir":"Reference","previous_headings":"","what":"Species parameters","title":"Set up parameters for a general multispecies model — newMultispeciesParams","text":"essential argument data frame contains species parameters. data frame arranged species parameter, column parameter data frame parameter row values parameters one species model. two essential columns must included species parameter data.frame default values: species column hold strings names species w_inf column asymptotic sizes species grams. species_params dataframe also needs contain parameters needed predation kernel function size selectivity function. mentioned appropriate sections . species parameters, mizer calculate default values included species parameter data frame. automatically added MizerParams object created. parameters can also specify values species leave entries NA missing values set defaults. species_params data frame saved returned MizerParams object differ one supply missing species parameters filled default values. happy species parameter values used can always change later species_params<-(). parameters mentioned following sections.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/newMultispeciesParams.html","id":"size-grid","dir":"Reference","previous_headings":"","what":"Size grid","title":"Set up parameters for a general multispecies model — newMultispeciesParams","text":"size grid created log-sizes equally spaced. spacing chosen no_w fish size bins, smallest starting min_w largest starting max_w. resource spectrum larger set bins containing additional bins min_w, log size. number extra bins min_w_pp comes lie within smallest bin.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/newMultispeciesParams.html","id":"units-in-mizer","dir":"Reference","previous_headings":"","what":"Units in mizer","title":"Set up parameters for a general multispecies model — newMultispeciesParams","text":"Mizer uses grams measure weight, centimetres measure lengths, years measure time. Mizer agnostic whether abundances given numbers per area, numbers per volume total numbers entire study area. make choice convenient application stick . make choice 1 2 also choose unit area volume. choice determine units parameters. mentioned parameters discussed sections . choice also affect units quantities may want calculate model. example, yield grams/year/m^2 case 1 choose m^2 measure area, grams/year/m^3 case 2 choose m^3 unit volume, simply grams/year case 3. comment applies measures, like total biomass, grams/area case 1, grams/volume case 2 simply grams case 3. mizer puts units axes plots, choose units appropriate case 3. example plotBiomass() gives unit grams. can convert choices. example, use case 1, need multiply area ecosystem get total quantity. work case 2, need multiply area thickness productive layer. respect, case 2 bit cumbersome. function scaleModel() useful change units using.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/newMultispeciesParams.html","id":"setting-interaction-matrix","dir":"Reference","previous_headings":"","what":"Setting interaction matrix","title":"Set up parameters for a general multispecies model — newMultispeciesParams","text":"need specify interaction matrix. , predator-prey interactions purely determined size predator prey totally independent species predator prey. interaction matrix \\(\\theta_{ij}\\) describes interaction pair species model. can viewed proxy spatial interaction e.g. model predator-prey interaction size based. values interaction matrix used scale encountered food predation mortality (see website section predator-prey encounter rate predation mortality). first index refers predator species second prey species. used calculating food encounter rate getEncounter() predation mortality rate getPredMort(). entries dimensionless numbers. values interaction matrix equal predator-prey interactions determined entirely size-preference. function checks supplied interaction matrix valid stores interaction slot params object. order columns rows interaction argument order species params data frame params object. supply named array function check order warn different. One way creating interaction matrix enter data using spreadsheet program saving .csv file. data can read R using command read.csv(). interaction species resource set via column interaction_resource species_params data frame. default column set 1s.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/newMultispeciesParams.html","id":"setting-predation-kernel","dir":"Reference","previous_headings":"","what":"Setting predation kernel","title":"Set up parameters for a general multispecies model — newMultispeciesParams","text":"Kernel dependent predator prey size ratio pred_kernel argument supplied, function sets predation kernel depends ratio predator mass prey mass, two masses independently. shape kernel determined pred_kernel_type column species_params. default pred_kernel_type \"lognormal\". call function lognormal_pred_kernel() calculate predation kernel. alternative pred_kernel type \"box\", implemented function box_pred_kernel(), \"power_law\", implemented function power_law_pred_kernel(). functions require certain species parameters species_params data frame. lognormal kernel beta sigma, box kernel ppmr_min ppmr_max. explained help pages kernel functions. Except beta sigma, defaults set parameters. missing species_params data frame mizer issue error message. can use string pred_kernel_type. example choose \"\" need define function my_pred_kernel can model existing functions like lognormal_pred_kernel(). using kernel depends predator/prey size ratio , mizer need store entire three dimensional array MizerParams object. array can big large number size bins. Instead, mizer needs store two two-dimensional arrays hold Fourier transforms feeding kernel function allow encounter rate predation rate calculated efficiently. However, need full three-dimensional array can calculate getPredKernel() function. Kernel dependent predator prey size want work feeding kernel depends predator mass prey mass independently, can specify full feeding kernel three-dimensional array (predator species x predator size x prey size). use option kernel dependent predator/prey mass ratio appropriate. Using kernel dependent predator/prey mass ratio allows mizer use fast Fourier transform methods significantly reduce running time simulations. order predator species pred_kernel order species params dataframe params object. supply named array function check order warn different.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/newMultispeciesParams.html","id":"setting-search-volume","dir":"Reference","previous_headings":"","what":"Setting search volume","title":"Set up parameters for a general multispecies model — newMultispeciesParams","text":"search volume \\(\\gamma_i(w)\\) individual species \\(\\) weight \\(w\\) multiplies predation kernel calculating encounter rate getEncounter() predation rate getPredRate(). name \"search volume\" bit misleading, \\(\\gamma_i(w)\\) units volume. simply parameter determines rate predation. units depend choice, see section \"Units mizer\". chosen work total abundances, rate units 1/year. chosen work abundances per m^2 units m^2/year. chosen work abundances per m^3 units m^3/year. search_vol argument supplied, search volume set $$\\gamma_i(w) = \\gamma_i w^q_i.$$ values \\(\\gamma_i\\) (search volume 1g) \\(q_i\\) (allometric exponent search volume) taken gamma q columns species parameter dataframe. gamma column supplied species parameter dataframe, default calculated get_gamma_default() function. Note predators size \\(w = 1\\) gram value species parameter \\(\\gamma_i\\) value search volume \\(\\gamma_i(w)\\).","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/newMultispeciesParams.html","id":"setting-maximum-intake-rate","dir":"Reference","previous_headings":"","what":"Setting maximum intake rate","title":"Set up parameters for a general multispecies model — newMultispeciesParams","text":"maximum intake rate \\(h_i(w)\\) individual species \\(\\) weight \\(w\\) determines feeding level, calculated getFeedingLevel(). measured grams/year. intake_max argument supplied, maximum intake rate set $$h_i(w) = h_i w^{n_i}.$$ values \\(h_i\\) (maximum intake rate individual size 1 gram) \\(n_i\\) (allometric exponent intake rate) taken h n columns species parameter dataframe. h column supplied species parameter dataframe, calculated get_h_default() function, using f0 k_vb column, supplied. \\(h_i\\) set Inf, fish species consume encountered food.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/newMultispeciesParams.html","id":"setting-metabolic-rate","dir":"Reference","previous_headings":"","what":"Setting metabolic rate","title":"Set up parameters for a general multispecies model — newMultispeciesParams","text":"metabolic rate subtracted energy income rate calculate rate energy available growth reproduction, see getEReproAndGrowth(). measured grams/year. metab argument supplied, species metabolic rate \\(k(w)\\) individual size \\(w\\) set $$k(w) = k_s w^p + k w,$$ \\(k_s w^p\\) represents rate standard metabolism \\(k w\\) rate energy expended activity movement. values \\(k_s\\), \\(p\\) \\(k\\) taken ks, p k columns species parameter dataframe. parameters supplied, defaults \\(k = 0\\), \\(p = n\\) $$k_s = f_c h \\alpha w_{mat}^{n-p},$$ \\(f_c\\) critical feeding level taken fc column species parameter data frame. critical feeding level specified, default \\(f_c = 0.2\\) used.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/newMultispeciesParams.html","id":"setting-external-mortality-rate","dir":"Reference","previous_headings":"","what":"Setting external mortality rate","title":"Set up parameters for a general multispecies model — newMultispeciesParams","text":"external mortality mortality due fishing predation predators included model. external mortality due predation predators explicitly included model (e.g. mammals seabirds) due causes like illness. rate units 1/year. ext_mort argument allows specify external mortality rate depends species body size. can see example Examples section help page setExtMort(). ext_mort argument supplied, external mortality assumed depend species, size individual: \\(\\mu_{ext.}(w) = z_{0.}\\). value constant \\(z_0\\) species taken z0 column species parameter data frame, column exists. Otherwise calculated $$z_{0.} = {\\tt z0pre}_i\\, w_{inf}^{\\tt z0exp}.$$","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/newMultispeciesParams.html","id":"setting-reproduction","dir":"Reference","previous_headings":"","what":"Setting reproduction","title":"Set up parameters for a general multispecies model — newMultispeciesParams","text":"species size, proportion \\(\\psi\\) available energy invested reproduction product two factors: proportion maturity individuals mature proportion repro_prop energy available mature individual invested reproduction.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/newMultispeciesParams.html","id":"maturity-ogive","dir":"Reference","previous_headings":"","what":"Maturity ogive","title":"Set up parameters for a general multispecies model — newMultispeciesParams","text":"proportion individuals mature supplied via maturity argument , set sigmoidal maturity ogive changes 0 1 around maturity size: $${\\tt maturity}(w) = \\left[1+\\left(\\frac{w}{w_{mat}}\\right)^{-U}\\right]^{-1}.$$ (avoid clutter, showing species index equations, although species maturity ogive.) maturity weights taken w_mat column species_params data frame. missing maturity weights set 1/4 asymptotic weight w_inf column. exponent \\(U\\) determines steepness maturity ogive. default chosen \\(U = 10\\), however can overridden including column w_mat25 species parameter dataframe specifies weight 25% individuals mature, sets \\(U = \\log(3) / \\log(w_{mat} / w_{25}).\\) sigmoidal function given strictly reach 1 asymptotically. Mizer instead sets function equal 1 already species' maximum size, taken compulsory w_inf column species parameter data frame. Also, computational simplicity, proportion smaller 1e-8 set 0.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/newMultispeciesParams.html","id":"investment-into-reproduction","dir":"Reference","previous_headings":"","what":"Investment into reproduction","title":"Set up parameters for a general multispecies model — newMultispeciesParams","text":"energy available mature individual invested reproduction supplied via repro_prop argument, set allometric form $${\\tt repro\\_prop}(w) = \\left(\\frac{w}{w_{inf}}\\right)^{m-n}.$$ \\(n\\) scaling exponent energy income rate. Hence exponent \\(m\\) determines scaling investment reproduction mature individuals. default chosen \\(m = 1\\) rate energy invested reproduction scales linearly size. default can overridden including column m species parameter dataframe. asymptotic sizes taken compulsory w_inf column species parameter data frame. total proportion energy invested reproduction individual size \\(w\\) $$\\psi(w) = {\\tt maturity}(w){\\tt repro\\_prop}(w)$$","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/newMultispeciesParams.html","id":"reproductive-efficiency","dir":"Reference","previous_headings":"","what":"Reproductive efficiency","title":"Set up parameters for a general multispecies model — newMultispeciesParams","text":"reproductive efficiency \\(\\epsilon\\), .e., proportion energy allocated reproduction results egg biomass, set erepro column species_params data frame. provided, default set 1 (want override). offspring biomass divided egg biomass gives rate egg production, returned getRDI(): $$R_{di} = \\frac{\\epsilon}{2 w_{min}} \\int N(w)  E_r(w) \\psi(w) \\, dw$$","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/newMultispeciesParams.html","id":"density-dependence","dir":"Reference","previous_headings":"","what":"Density dependence","title":"Set up parameters for a general multispecies model — newMultispeciesParams","text":"stock-recruitment relationship emergent phenomenon mizer, several sources density dependence. Firstly, amount energy invested reproduction depends energy income spawners, density-dependent due competition prey. Secondly, proportion larvae grow recruitment size depends larval mortality, depends density predators, larval growth rate, depends density prey. Finally, encode density dependence stock-recruitment relationship already included two sources density dependence, mizer puts density-independent rate egg production density-dependence function. result returned getRDD(). name density-dependence function specified RDD argument. default Beverton-Holt function BevertonHoltRDD(), requires R_max column species_params data frame giving maximum egg production rate. column exist, initialised Inf, leading density-dependence. functions provided mizer RickerRDD() SheperdRDD() can easily use models writing functions.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/newMultispeciesParams.html","id":"setting-fishing","dir":"Reference","previous_headings":"","what":"Setting fishing","title":"Set up parameters for a general multispecies model — newMultispeciesParams","text":"Gears mizer, fishing mortality imposed species fishing gears. total per-capita fishing mortality (1/year) obtained summing mortality gears, $$\\mu_{f.}(w) = \\sum_g F_{g,}(w),$$ fishing mortality \\(F_{g,}(w)\\) imposed gear \\(g\\) species \\(\\) size \\(w\\) calculated : $$F_{g,}(w) = S_{g,}(w) Q_{g,} E_{g},$$ \\(S\\) selectivity species, gear size, \\(Q\\) catchability species gear \\(E\\) fishing effort gear. Selectivity selectivity size gear species saved three dimensional array (gear x species x size). entry range 0 (gear selecting species size) 1 (gear selecting individuals species size). three dimensional array can specified explicitly via selectivity argument, usually mizer calculates gear_params slot MizerParams object. allow calculation selectivity array, gear_params slot must data frame one row gear-species combination. example gear can select three species, gear contributes three rows gear_params data frame, one species can select. data frame must columns gear, holding name gear, species, holding name species, sel_func, holding name function calculates selectivity curve. selectivity functions included package: knife_edge(), sigmoid_length(), double_sigmoid_length(), sigmoid_weight(). Users able write size-based selectivity function. first argument function must w function must return vector selectivity (0 1) size. selectivity function may parameters. Values parameters must included columns gear parameters data.frame. names columns must exactly match names corresponding arguments selectivity function. example, default selectivity function knife_edge() sudden change selectivity 0 1 certain size. help page can see knife_edge() function arguments w knife_edge_size. first argument, w, size (function calculates selectivity size). selectivity functions must w first argument. values arguments must found gear parameters data.frame. knife_edge() function knife_edge_size column. knife_edge() default selectivity function, knife_edge_size argument default value = w_mat. case species selected one gear, columns gear_params data frame can alternatively provided columns species_params data frame, convenient user set . Mizer copy columns create gear_params data frame creates MizerParams object. However changing columns species parameter data frame later update gear_params data frame. Catchability Catchability used additional factor make link gear selectivity, fishing effort fishing mortality. example, can set effort 1 gives desired fishing mortality. way effort can specified relative 'base effort', e.g. effort particular year. Catchability stored two dimensional array (gear x species). can either provided explicitly via catchability argument, information can provided via catchability column gear_params data frame. case species selected single gear, catchability column can also provided species_params data frame. Mizer copy gear_params data frame MizerParams object created. Effort initial fishing effort stored MizerParams object. supplied, set zero. initial effort can overruled simulation run project(), also possible specify effort varies time.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/newMultispeciesParams.html","id":"setting-resource-dynamics","dir":"Reference","previous_headings":"","what":"Setting resource dynamics","title":"Set up parameters for a general multispecies model — newMultispeciesParams","text":"default, mizer uses semichemostat model describe resource dynamics size class independently. semichemostat dynamics implemented function resource_semichemostat(). can change resource dynamics writing function, modelled resource_semichemostat(), passing name function resource_dynamics argument. resource_rate argument vector specifying intrinsic resource growth rate size class. supplied, intrinsic growth rate \\(r(w)\\) size \\(w\\) set $$r(w) = r_{pp}\\, w^{n-1}.$$ values \\(r_{pp}\\) \\(n\\) taken r_pp n arguments. resource_capacity argument vector specifying intrinsic resource carrying capacity size class. supplied, intrinsic carrying capacity \\(c(w)\\) size \\(w\\) set $$c(w) = \\kappa\\, w^{-\\lambda}$$ \\(w\\) less w_pp_cutoff zero larger sizes. values \\(\\kappa\\) \\(\\lambda\\) taken kappa lambda arguments.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/newMultispeciesParams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up parameters for a general multispecies model — newMultispeciesParams","text":"","code":"params <- newMultispeciesParams(NS_species_params) #> No h provided for some species, so using f0 and k_vb to calculate it. #> No ks column so calculating from critical feeding level. #> Using z0 = z0pre * w_inf ^ z0exp for missing z0 values."},{"path":"https://sizespectrum.org/mizer/dev/reference/newSingleSpeciesParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up parameters for a single species in a power-law background — newSingleSpeciesParams","title":"Set up parameters for a single species in a power-law background — newSingleSpeciesParams","text":"functions creates MizerParams object single species. species embedded fixed power-law community spectrum $$N_c(w) = \\kappa w^{-\\lambda}$$ community provides food income species. Cannibalism switched . predation mortality arises predators power-law community assumed predators community feeding parameters foreground species. function many arguments, default values.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/newSingleSpeciesParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up parameters for a single species in a power-law background — newSingleSpeciesParams","text":"","code":"newSingleSpeciesParams(   species_name = \"Target species\",   w_inf = 100,   w_min = 0.001,   eta = 10^(-0.6),   w_mat = w_inf * eta,   no_w = log10(w_inf/w_min) * 20 + 1,   n = 3/4,   p = n,   lambda = 2.05,   kappa = 0.005,   alpha = 0.4,   k_vb = 1,   beta = 100,   sigma = 1.3,   f0 = 0.6,   fc = 0.25,   ks = NA,   gamma = NA,   ext_mort_prop = 0,   reproduction_level = 0,   R_factor = deprecated() )"},{"path":"https://sizespectrum.org/mizer/dev/reference/newSingleSpeciesParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up parameters for a single species in a power-law background — newSingleSpeciesParams","text":"species_name string name species. used plot legends. w_inf Asymptotic size species w_min Egg size species eta Ratio maturity size w_mat asymptotic size w_inf. Default 10^(-0.6), approximately 1/4. Ignored w_mat supplied explicitly. w_mat Maturity size species. Default value eta * w_inf. no_w number size bins community spectrum. bins equally spaced logarithmic scale. Default value 20 bins factor 10 weight. n Scaling exponent maximum intake rate. p Scaling exponent standard metabolic rate. default equal exponent n. lambda Exponent abundance power law. kappa Coefficient abundance power law. alpha assimilation efficiency. k_vb von Bertalanffy growth parameter. beta Preferred predator prey mass ratio. sigma Width prey size preference. f0 Expected average feeding level. Used set gamma, coefficient search rate. Ignored gamma given explicitly. fc Critical feeding level. Used determine ks given explicitly. ks Standard metabolism coefficient. provided, default calculated critical feeding level argument fc. gamma Volumetric search rate. provided, default determined get_gamma_default() using value f0. ext_mort_prop proportion total mortality comes external mortality, .e., sources explicitly modelled. number interval [0, 1). reproduction_level number 0 1 determines level density dependence reproduction, see setBevertonHolt(). R_factor Use reproduction_level = 1 / R_factor instead.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/newSingleSpeciesParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up parameters for a single species in a power-law background — newSingleSpeciesParams","text":"object type MizerParams","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/newSingleSpeciesParams.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set up parameters for a single species in a power-law background — newSingleSpeciesParams","text":"addition setting parameters, function also sets initial condition close steady state, assumption fishing.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/newSingleSpeciesParams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up parameters for a single species in a power-law background — newSingleSpeciesParams","text":"","code":"params <- newSingleSpeciesParams() sim <- project(params, t_max = 5, effort = 0) plotSpectra(sim)"},{"path":"https://sizespectrum.org/mizer/dev/reference/newTraitParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up parameters for a trait-based multispecies model — newTraitParams","title":"Set up parameters for a trait-based multispecies model — newTraitParams","text":"functions creates MizerParams object describing trait-based model. simplification general size-based model used mizer species-specific parameters species, except asymptotic size, considered important trait characterizing species. parameters related asymptotic size. example, size maturity given w_inf * eta, eta species. trait-based model number species important. applications trait-based model see Andersen & Pedersen (2010). See mizer website details examples trait-based model.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/newTraitParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up parameters for a trait-based multispecies model — newTraitParams","text":"","code":"newTraitParams(   no_sp = 11,   min_w_inf = 10,   max_w_inf = 10^4,   min_w = 10^(-3),   max_w = max_w_inf,   eta = 10^(-0.6),   min_w_mat = min_w_inf * eta,   no_w = round(log10(max_w_inf/min_w) * 20 + 1),   min_w_pp = 1e-10,   w_pp_cutoff = min_w_mat,   n = 2/3,   p = n,   lambda = 2.05,   r_pp = 0.1,   kappa = 0.005,   alpha = 0.4,   h = 40,   beta = 100,   sigma = 1.3,   f0 = 0.6,   fc = 0.25,   ks = NA,   gamma = NA,   ext_mort_prop = 0,   reproduction_level = 1/4,   R_factor = deprecated(),   gear_names = \"knife_edge_gear\",   knife_edge_size = 1000,   egg_size_scaling = FALSE,   resource_scaling = FALSE,   perfect_scaling = FALSE )"},{"path":"https://sizespectrum.org/mizer/dev/reference/newTraitParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up parameters for a trait-based multispecies model — newTraitParams","text":"no_sp number species model. min_w_inf asymptotic size smallest species community. rounded lie grid point. max_w_inf asymptotic size largest species community. rounded lie grid point. min_w size egg smallest species. also defines start community size spectrum. max_w largest size model. default set largest asymptotic size max_w_inf. Setting something larger makes sense plan add larger species model later. eta Ratio maturity size asymptotic size species. Ignored min_w_mat supplied. Default 10^(-0.6), approximately 1/4. min_w_mat maturity size smallest species. Default value eta * min_w_inf. rounded lie grid point. no_w number size bins community spectrum. bins equally spaced logarithmic scale. Default value 20 bins factor 10 weight. min_w_pp smallest size resource spectrum. default set smallest value consumers can feed. w_pp_cutoff largest size resource spectrum. Default value min_w_inf unless perfect_scaling = TRUE Inf. n Scaling exponent maximum intake rate. p Scaling exponent standard metabolic rate. default equal exponent n. lambda Exponent abundance power law. r_pp Growth rate parameter resource spectrum. kappa Coefficient abundance power law. alpha assimilation efficiency. h Maximum food intake rate. beta Preferred predator prey mass ratio. sigma Width prey size preference. f0 Expected average feeding level. Used set gamma, coefficient search rate. Ignored gamma given explicitly. fc Critical feeding level. Used determine ks given explicitly. ks Standard metabolism coefficient. provided, default calculated critical feeding level argument fc. gamma Volumetric search rate. provided, default determined get_gamma_default() using value f0. ext_mort_prop proportion total mortality comes external mortality, .e., sources explicitly modelled. number interval [0, 1). reproduction_level number 0 1 determines level density dependence reproduction, see setBevertonHolt(). R_factor Use reproduction_level = 1 / R_factor instead. gear_names names fishing gears species. character vector, length number species. knife_edge_size minimum size gear gears select fish. single value gear vector one value gear. egg_size_scaling TRUE, egg size constant fraction maximum size species. fraction min_w / min_w_inf. FALSE, species egg size w_min. resource_scaling TRUE, carrying capacity larger resource reduced compensate fact fish eggs larvae present size range. perfect_scaling TRUE parameters set community abundance, growth reproduction death perfect power laws. particular scaling corrections turned .","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/newTraitParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up parameters for a trait-based multispecies model — newTraitParams","text":"object type MizerParams","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/newTraitParams.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set up parameters for a trait-based multispecies model — newTraitParams","text":"function many arguments, default values. particular interest user number species model minimum maximum asymptotic sizes. characteristic weights smallest species defined min_w (egg size), min_w_mat (maturity size) min_w_inf (asymptotic size). asymptotic sizes no_sp species logarithmically evenly spaced, ranging min_w_inf max_w_inf. Similarly maturity sizes species logarithmically evenly spaced, ratio eta maturity size asymptotic size species. egg_size_scaling = TRUE also ratio asymptotic size egg size species. Otherwise species egg size. addition setting parameters, function also sets initial condition close steady state. search rate coefficient gamma calculated using expected feeding level, f0. option including fishing given, steady state may loose natural stability much fishing included. case user may wish include stabilising effects (like reproduction_level) ensure steady state stable. Fishing selectivity modelled knife-edge function one parameter, knife_edge_size, size species selected. species can either fished gear (knife_edge_size length 1) different gear (length knife_edge_size length number species order selectivity size asymptotic size). resulting MizerParams object can projected forward using project() like MizerParams object. projecting model may necessary reduce dt 0.1 avoid instabilities solver. can check plotting biomass abundance time projection.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/newTraitParams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up parameters for a trait-based multispecies model — newTraitParams","text":"","code":"if (FALSE) { params <- newTraitParams() sim <- project(params, t_max = 5, effort = 0) plotSpectra(sim) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/noRDD.html","id":null,"dir":"Reference","previous_headings":"","what":"Give density-independent reproduction rate — noRDD","title":"Give density-independent reproduction rate — noRDD","text":"Simply returns rdi argument.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/noRDD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Give density-independent reproduction rate — noRDD","text":"","code":"noRDD(rdi, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/noRDD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Give density-independent reproduction rate — noRDD","text":"rdi Vector density-independent reproduction rates \\(R_{di}\\) species. ... used.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/noRDD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Give density-independent reproduction rate — noRDD","text":"Vector density-dependent reproduction rates.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/plotBiomass.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the biomass of species through time — plotBiomass","title":"Plot the biomass of species through time — plotBiomass","text":"running projection, biomass species can plotted time. biomass calculated within user defined size limits (min_w, max_w, min_l, max_l, see getBiomass()).","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotBiomass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the biomass of species through time — plotBiomass","text":"","code":"plotBiomass(   sim,   species = NULL,   start_time,   end_time,   y_ticks = 6,   ylim = c(NA, NA),   total = FALSE,   background = TRUE,   highlight = NULL,   return_data = FALSE,   ... )  plotlyBiomass(   sim,   species = NULL,   start_time,   end_time,   y_ticks = 6,   ylim = c(NA, NA),   total = FALSE,   background = TRUE,   highlight = NULL,   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/plotBiomass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the biomass of species through time — plotBiomass","text":"sim object class MizerSim species species selected. Optional. default target species selected. vector species names, numeric vector species indices, logical vector indicating species whether selected (TRUE) . start_time first time plotted. Default beginning time series. end_time last time plotted. Default end time series. y_ticks approximate number ticks desired y axis ylim numeric vector length two providing lower upper limits y axis. Use NA refer existing minimum maximum. values 1e-20 always cut . total boolean value determines whether total biomass species plotted well. Default FALSE. background boolean value determines whether background species included. Ignored model contain background species. Default TRUE. highlight Name vector names species highlighted. return_data boolean value determines whether formatted data used plot returned instead plot . Default value FALSE ... Arguments passed get_size_range_array min_w Smallest weight size range. Defaults smallest weight model. max_w Largest weight size range. Defaults largest weight model. min_l Smallest length size range. supplied, takes precedence min_w. max_l Largest length size range. supplied, takes precedence max_w.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotBiomass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the biomass of species through time — plotBiomass","text":"ggplot2 object, unless return_data = TRUE, case data frame four variables 'Year', 'Biomass', 'Species', 'Legend' returned.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/plotBiomass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the biomass of species through time — plotBiomass","text":"","code":"# \\donttest{ plotBiomass(NS_sim)  plotBiomass(NS_sim, species = c(\"Sandeel\", \"Herring\"), total = TRUE)  plotBiomass(NS_sim, start_time = 1980, end_time = 1990)   # Returning the data frame fr <- plotBiomass(NS_sim, return_data = TRUE) str(fr) #> 'data.frame':\t528 obs. of  4 variables: #>  $ Year   : int  1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 ... #>  $ Biomass: num  5.08e+10 5.57e+10 5.48e+10 5.32e+10 5.16e+10 ... #>  $ Species: Factor w/ 12 levels \"Sprat\",\"Sandeel\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  $ Legend : Factor w/ 12 levels \"Sprat\",\"Sandeel\",..: 1 1 1 1 1 1 1 1 1 1 ... # }"},{"path":"https://sizespectrum.org/mizer/dev/reference/plotBiomassObservedVsModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting observed vs. model biomass data — plotBiomassObservedVsModel","title":"Plotting observed vs. model biomass data — plotBiomassObservedVsModel","text":"biomass observations available least species via biomass_observed column species parameter data frame, function plots biomass species model observed biomasses. called MizerSim object, plot use model biomasses predicted final time step simulation.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotBiomassObservedVsModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting observed vs. model biomass data — plotBiomassObservedVsModel","text":"","code":"plotBiomassObservedVsModel(   object,   species = NULL,   ratio = FALSE,   log_scale = TRUE,   return_data = FALSE,   labels = TRUE,   show_unobserved = FALSE )  plotlyBiomassObservedVsModel(   object,   species = NULL,   ratio = FALSE,   log_scale = TRUE,   return_data = FALSE,   show_unobserved = FALSE )"},{"path":"https://sizespectrum.org/mizer/dev/reference/plotBiomassObservedVsModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting observed vs. model biomass data — plotBiomassObservedVsModel","text":"object object class MizerParams MizerSim. species species included. Optional. default observed biomasses included. vector species names, numeric vector species indices, logical vector indicating species whether included (TRUE) . ratio Whether plot model biomass vs. observed biomass (FALSE) ratio model : observed biomass (TRUE). Default FALSE. log_scale Whether plot log10 scale (TRUE) (FALSE). non-ratio plot applies axes, ratio plot x-axis log10 scale. Default TRUE. return_data Whether return data frame plot (TRUE) (FALSE). Default FALSE. labels Whether show text labels species (TRUE) (FALSE). Default TRUE. show_unobserved Whether include also species biomass observation available. TRUE, species shown observed biomass equal model biomass.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotBiomassObservedVsModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting observed vs. model biomass data — plotBiomassObservedVsModel","text":"ggplot2 object plot model biomass species compared observed biomass. return_data = TRUE, data frame used create plot returned instead plot.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotBiomassObservedVsModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plotting observed vs. model biomass data — plotBiomassObservedVsModel","text":"can use function need added biomass_observed column model gives observed biomass grams.  species observed biomass, set value biomass_observed column 0 NA. Biomass observations usually include individuals certain size. size specified biomass_cutoff column species parameter data frame. missing, assumed sizes included observed biomass, .e., includes larval biomass. total relative error shown caption plot, calculated $$TRE = \\sum_i|1-\\rm{ratio_i}|$$ \\(\\rm{ratio_i}\\) ratio model biomass / observed biomass species .","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotBiomassObservedVsModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting observed vs. model biomass data — plotBiomassObservedVsModel","text":"","code":"# create an example params <- NS_params species_params(params)$biomass_observed <-     c(0.8, 61, 12, 35, 1.6, NA, 10, 7.6, 135, 60, 30, NA) species_params(params)$biomass_cutoff <- 10 params <- calibrateBiomass(params)  # Plot with default options plotBiomassObservedVsModel(params)   # Plot including also species without observations plotBiomassObservedVsModel(params, show_unobserved = TRUE)   # Show the ratio instead plotBiomassObservedVsModel(params, ratio = TRUE)   # Run a simulation params <- matchBiomasses(params) sim <- project(params, t_max = 10, progress_bar = FALSE) plotBiomass(sim)   # Plot the biomass comparison at the final time plotBiomassObservedVsModel(sim)   # The same with no log scaling of axes plotBiomassObservedVsModel(sim, log_scale = FALSE)"},{"path":"https://sizespectrum.org/mizer/dev/reference/plotDataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a plot from a data frame — plotDataFrame","title":"Make a plot from a data frame — plotDataFrame","text":"used internally plotting functions.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotDataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a plot from a data frame — plotDataFrame","text":"","code":"plotDataFrame(   frame,   params,   xlab = waiver(),   ylab = waiver(),   xtrans = \"identity\",   ytrans = \"identity\",   y_ticks = 6,   highlight = NULL,   legend_var = NULL,   wrap_var = NULL )"},{"path":"https://sizespectrum.org/mizer/dev/reference/plotDataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a plot from a data frame — plotDataFrame","text":"frame data frame least three variables. first three variables used, order, : Variable plotted x-axis Variable plotted y-axis Grouping variable params MizerParams object, used line colours line types. xlab Label x-axis ylab Label y-axis xtrans Transformation x-axis. Often \"log10\" may useful instead default \"identity\". ytrans Transformation y-axis. y_ticks approximate number ticks desired y axis highlight Name vector names species highlighted. legend_var name variable used legend determine line style. NULL grouping variable used purpose. wrap_var Optional. name variable used creating wrapped facets.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotDiet.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot diet, resolved by prey species, as function of predator at size. — plotDiet","title":"Plot diet, resolved by prey species, as function of predator at size. — plotDiet","text":"Plots proportions prey species contributes total biomass consumed specified predator species, function predator's size. proportions obtained getDiet().","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotDiet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot diet, resolved by prey species, as function of predator at size. — plotDiet","text":"","code":"plotDiet(object, species = NULL, return_data = FALSE)"},{"path":"https://sizespectrum.org/mizer/dev/reference/plotDiet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot diet, resolved by prey species, as function of predator at size. — plotDiet","text":"object object class MizerSim MizerParams. species name predator species plot diet. return_data boolean value determines whether formatted data used plot returned instead plot . Default value FALSE","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotDiet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot diet, resolved by prey species, as function of predator at size. — plotDiet","text":"ggplot2 object, unless return_data = TRUE, case data frame three variables 'w', 'Proportion', 'Prey' returned.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotDiet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot diet, resolved by prey species, as function of predator at size. — plotDiet","text":"Prey species contribute less 1 permille diet suppressed plot.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/plotDiet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot diet, resolved by prey species, as function of predator at size. — plotDiet","text":"","code":"# \\donttest{ plotDiet(NS_params, species = \"Cod\")   # Returning the data frame fr <- plotDiet(NS_params, species = \"Cod\", return_data = TRUE) str(fr) #> 'data.frame':\t812 obs. of  3 variables: #>  $ w         : num  0.486 0.58 0.693 0.827 0.987 ... #>  $ Proportion: num  0.00113 0.00139 0.0017 0.00208 0.00254 ... #>  $ Prey      : Factor w/ 13 levels \"Resource\",\"Saithe\",..: 13 13 13 13 13 13 13 13 13 13 ... # }"},{"path":"https://sizespectrum.org/mizer/dev/reference/plotFMort.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot total fishing mortality of each species by size — plotFMort","title":"Plot total fishing mortality of each species by size — plotFMort","text":"running projection, plot total fishing mortality species size. total fishing mortality averaged specified time range (single value time range can used plot single time step).","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotFMort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot total fishing mortality of each species by size — plotFMort","text":"","code":"plotFMort(   object,   species = NULL,   time_range,   all.sizes = FALSE,   highlight = NULL,   return_data = FALSE,   ... )  plotlyFMort(object, species = NULL, time_range, highlight = NULL, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/plotFMort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot total fishing mortality of each species by size — plotFMort","text":"object object class MizerSim MizerParams. species species selected. Optional. default target species selected. vector species names, numeric vector species indices, logical vector indicating species whether selected (TRUE) . time_range time range (either vector values, vector min max time, single value) average abundances . Default final time step. Ignored called MizerParams object. .sizes TRUE, fishing mortality plotted also sizes outside species' size range. Default FALSE. highlight Name vector names species highlighted. return_data boolean value determines whether formatted data used plot returned instead plot . Default value FALSE ... arguments (currently unused)","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotFMort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot total fishing mortality of each species by size — plotFMort","text":"ggplot2 object, unless return_data = TRUE, case data frame three variables 'w', 'value', 'Species' returned.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/plotFMort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot total fishing mortality of each species by size — plotFMort","text":"","code":"# \\donttest{ params <-  NS_params sim <- project(params, effort=1, t_max=20, t_save = 2, progress_bar = FALSE) plotFMort(sim)  plotFMort(sim, highlight = c(\"Cod\", \"Haddock\"))    # Returning the data frame fr <- plotFMort(sim, return_data = TRUE) str(fr) #> 'data.frame':\t934 obs. of  3 variables: #>  $ w      : num  0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 ... #>  $ value  : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ Species: chr  \"Sprat\" \"Sandeel\" \"N.pout\" \"Herring\" ... # }"},{"path":"https://sizespectrum.org/mizer/dev/reference/plotFeedingLevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the feeding level of species by size — plotFeedingLevel","title":"Plot the feeding level of species by size — plotFeedingLevel","text":"running projection, plot feeding level species size. feeding level averaged specified time range (single value time range can used).","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotFeedingLevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the feeding level of species by size — plotFeedingLevel","text":"","code":"plotFeedingLevel(   object,   species = NULL,   time_range,   highlight = NULL,   all.sizes = FALSE,   include_critical = FALSE,   return_data = FALSE,   ... )  plotlyFeedingLevel(   object,   species = NULL,   time_range,   highlight = NULL,   include_critical,   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/plotFeedingLevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the feeding level of species by size — plotFeedingLevel","text":"object object class MizerSim MizerParams. species species selected. Optional. default target species selected. vector species names, numeric vector species indices, logical vector indicating species whether selected (TRUE) . time_range time range (either vector values, vector min max time, single value) average abundances . Default final time step. Ignored called MizerParams object. highlight Name vector names species highlighted. .sizes TRUE, feeding level plotted also sizes outside species' size range. Default FALSE. include_critical TRUE, critical feeding level also plotted. Default FALSE. return_data boolean value determines whether formatted data used plot returned instead plot . Default value FALSE ... arguments (currently unused)","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotFeedingLevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the feeding level of species by size — plotFeedingLevel","text":"ggplot2 object, unless return_data = TRUE, case data frame variables 'w', 'value' 'Species' returned. also include_critical = TRUE data frame contains fourth variable 'Type' distinguishes 'actual' 'critical' feeding level.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotFeedingLevel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the feeding level of species by size — plotFeedingLevel","text":"called MizerSim object, feeding level averaged specified time range (single value time range can used plot single time step). called MizerParams object initial feeding level plotted. include_critical = TRUE critical feeding level (feeding level intake just covers metabolic cost) also plotted, thinner line. line always stay line actual feeding level, species stop growing point feeding level drops critical feeding level.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/plotFeedingLevel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the feeding level of species by size — plotFeedingLevel","text":"","code":"# \\donttest{ params <-  NS_params sim <- project(params, effort=1, t_max=20, t_save = 2, progress_bar = FALSE) plotFeedingLevel(sim)  plotFeedingLevel(sim, time_range = 10:20, species = c(\"Cod\", \"Herring\"),                  include_critical = TRUE)   # Returning the data frame fr <- plotFeedingLevel(sim, return_data = TRUE) str(fr) #> 'data.frame':\t934 obs. of  3 variables: #>  $ w      : num  0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 ... #>  $ value  : num  0.622 0.622 0.614 0.621 0.619 ... #>  $ Species: chr  \"Sprat\" \"Sandeel\" \"N.pout\" \"Herring\" ... # }"},{"path":"https://sizespectrum.org/mizer/dev/reference/plotGrowthCurves.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot growth curves giving weight as a function of age — plotGrowthCurves","title":"Plot growth curves giving weight as a function of age — plotGrowthCurves","text":"growth curve single species plotted, horizontal lines included indicate maturity size maximum size species. furthermore species parameters contain variables b length weight conversion von Bertalanffy parameter k_vb (optionally t0), von Bertalanffy growth curve superimposed black.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotGrowthCurves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot growth curves giving weight as a function of age — plotGrowthCurves","text":"","code":"plotGrowthCurves(   object,   species = NULL,   max_age = 20,   percentage = FALSE,   species_panel = FALSE,   highlight = NULL,   return_data = FALSE,   ... )  plotlyGrowthCurves(   object,   species = NULL,   max_age = 20,   percentage = FALSE,   species_panel = FALSE,   highlight = NULL )"},{"path":"https://sizespectrum.org/mizer/dev/reference/plotGrowthCurves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot growth curves giving weight as a function of age — plotGrowthCurves","text":"object MizerSim MizerParams object. given MizerSim object, uses growth rates final time simulation calculate size age. given MizerParams object, uses initial growth rates instead. species species selected. Optional. default target species selected. vector species names, numeric vector species indices, logical vector indicating species whether selected (TRUE) . max_age age run growth curve. Default 20. percentage Boolean value. TRUE, size given percentage maximal size. species_panel TRUE, display species Von Bertalanffy curves facets (need species percentage set default). Default FALSE. highlight Name vector names species highlighted. return_data boolean value determines whether formatted data used plot returned instead plot . Default value FALSE ... arguments (currently unused)","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotGrowthCurves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot growth curves giving weight as a function of age — plotGrowthCurves","text":"ggplot2 object","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/plotGrowthCurves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot growth curves giving weight as a function of age — plotGrowthCurves","text":"","code":"# \\donttest{ params <-  NS_params sim <- project(params, effort=1, t_max=20, t_save = 2, progress_bar = FALSE) plotGrowthCurves(sim, percentage = TRUE)  plotGrowthCurves(sim, species = \"Cod\", max_age = 24)  plotGrowthCurves(sim, species_panel = TRUE)    # Returning the data frame fr <- plotGrowthCurves(sim, return_data = TRUE) str(fr) #> 'data.frame':\t600 obs. of  4 variables: #>  $ Species: Factor w/ 12 levels \"Sprat\",\"Sandeel\",..: 1 2 3 4 5 6 7 8 9 10 ... #>  $ Age    : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ value  : num  0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 ... #>  $ Legend : chr  \"model\" \"model\" \"model\" \"model\" ... # }"},{"path":"https://sizespectrum.org/mizer/dev/reference/plotM2.html","id":null,"dir":"Reference","previous_headings":"","what":"Alias for plotPredMort() — plotM2","title":"Alias for plotPredMort() — plotM2","text":"alias provided backward compatibility mizer version <= 1.0","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotM2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alias for plotPredMort() — plotM2","text":"","code":"plotM2(   object,   species = NULL,   time_range,   all.sizes = FALSE,   highlight = NULL,   return_data = FALSE,   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/plotM2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alias for plotPredMort() — plotM2","text":"object object class MizerSim MizerParams. species species selected. Optional. default target species selected. vector species names, numeric vector species indices, logical vector indicating species whether selected (TRUE) . time_range time range (either vector values, vector min max time, single value) average abundances . Default final time step. Ignored called MizerParams object. .sizes TRUE, predation mortality plotted also sizes outside species' size range. Default FALSE. highlight Name vector names species highlighted. return_data boolean value determines whether formatted data used plot returned instead plot . Default value FALSE ... arguments (currently unused)","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotM2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alias for plotPredMort() — plotM2","text":"ggplot2 object, unless return_data = TRUE, case data frame three variables 'w', 'value', 'Species' returned.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/plotM2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Alias for plotPredMort() — plotM2","text":"","code":"# \\donttest{ params <-  NS_params sim <- project(params, effort=1, t_max=20, t_save = 2, progress_bar = FALSE) plotPredMort(sim)  plotPredMort(sim, time_range = 10:20)   # Returning the data frame fr <- plotPredMort(sim, return_data = TRUE) str(fr) #> 'data.frame':\t934 obs. of  3 variables: #>  $ w      : num  0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 ... #>  $ value  : num  2.67 1.11 3.87 4.24 3.4 ... #>  $ Species: chr  \"Sprat\" \"Sandeel\" \"N.pout\" \"Herring\" ... # }"},{"path":"https://sizespectrum.org/mizer/dev/reference/plotMizerSim.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary plot for MizerSim objects — plot,MizerSim,missing-method","title":"Summary plot for MizerSim objects — plot,MizerSim,missing-method","text":"running projection, produces 5 plots window: feeding level, abundance spectra, predation mortality fishing mortality species size; biomass species time. method just uses plotting functions puts one window. Produces 3 plots window: abundance spectra, feeding level predation mortality species time. method just uses plotting functions puts one window.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotMizerSim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary plot for MizerSim objects — plot,MizerSim,missing-method","text":"","code":"# S4 method for MizerSim,missing plot(x, y, ...)  # S4 method for MizerParams,missing plot(x, y, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/plotMizerSim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary plot for MizerSim objects — plot,MizerSim,missing-method","text":"x object class MizerSim y used ... additional arguments see documentation plotBiomass(), plotFeedingLevel(),plotSpectra(),plotPredMort() plotFMort().","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotMizerSim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary plot for MizerSim objects — plot,MizerSim,missing-method","text":"viewport object viewport object","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/plotMizerSim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary plot for MizerSim objects — plot,MizerSim,missing-method","text":"","code":"# \\donttest{ params <-  NS_params sim <- project(params, effort=1, t_max=20, t_save = 2, progress_bar = FALSE) plot(sim)  plot(sim, time_range = 10:20) # change time period for size-based plots  plot(sim, min_w = 10, max_w = 1000) # change size range for biomass plot  # } # \\donttest{ params <-  NS_params plot(params)  plot(params, min_w = 10, max_w = 1000) # change size range for biomass plot  # }"},{"path":"https://sizespectrum.org/mizer/dev/reference/plotPredMort.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot predation mortality rate of each species against size — plotPredMort","title":"Plot predation mortality rate of each species against size — plotPredMort","text":"running projection, plot predation mortality rate species size. mortality rate averaged specified time range (single value time range can used plot single time step).","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotPredMort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot predation mortality rate of each species against size — plotPredMort","text":"","code":"plotPredMort(   object,   species = NULL,   time_range,   all.sizes = FALSE,   highlight = NULL,   return_data = FALSE,   ... )  plotlyPredMort(object, species = NULL, time_range, highlight = NULL, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/plotPredMort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot predation mortality rate of each species against size — plotPredMort","text":"object object class MizerSim MizerParams. species species selected. Optional. default target species selected. vector species names, numeric vector species indices, logical vector indicating species whether selected (TRUE) . time_range time range (either vector values, vector min max time, single value) average abundances . Default final time step. Ignored called MizerParams object. .sizes TRUE, predation mortality plotted also sizes outside species' size range. Default FALSE. highlight Name vector names species highlighted. return_data boolean value determines whether formatted data used plot returned instead plot . Default value FALSE ... arguments (currently unused)","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotPredMort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot predation mortality rate of each species against size — plotPredMort","text":"ggplot2 object, unless return_data = TRUE, case data frame three variables 'w', 'value', 'Species' returned.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/plotPredMort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot predation mortality rate of each species against size — plotPredMort","text":"","code":"# \\donttest{ params <-  NS_params sim <- project(params, effort=1, t_max=20, t_save = 2, progress_bar = FALSE) plotPredMort(sim)  plotPredMort(sim, time_range = 10:20)   # Returning the data frame fr <- plotPredMort(sim, return_data = TRUE) str(fr) #> 'data.frame':\t934 obs. of  3 variables: #>  $ w      : num  0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 ... #>  $ value  : num  2.67 1.11 3.87 4.24 3.4 ... #>  $ Species: chr  \"Sprat\" \"Sandeel\" \"N.pout\" \"Herring\" ... # }"},{"path":"https://sizespectrum.org/mizer/dev/reference/plotSpectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the abundance spectra — plotSpectra","title":"Plot the abundance spectra — plotSpectra","text":"Plots number density multiplied power weight, power specified power argument.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotSpectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the abundance spectra — plotSpectra","text":"","code":"plotSpectra(   object,   species = NULL,   time_range,   wlim = c(NA, NA),   ylim = c(NA, NA),   power = 1,   biomass = TRUE,   total = FALSE,   resource = TRUE,   background = TRUE,   highlight = NULL,   return_data = FALSE,   ... )  plotlySpectra(   object,   species = NULL,   time_range,   wlim = c(NA, NA),   ylim = c(NA, NA),   power = 1,   biomass = TRUE,   total = FALSE,   resource = TRUE,   background = TRUE,   highlight = NULL,   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/plotSpectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the abundance spectra — plotSpectra","text":"object object class MizerSim MizerParams. species species selected. Optional. default target species selected. vector species names, numeric vector species indices, logical vector indicating species whether selected (TRUE) . time_range time range (either vector values, vector min max time, single value) average abundances . Default final time step. Ignored called MizerParams object. wlim numeric vector length two providing lower upper limits w axis. Use NA refer existing minimum maximum. ylim numeric vector length two providing lower upper limits y axis. Use NA refer existing minimum maximum. values 1e-20 always cut . power abundance plotted number density times weight raised power. default power = 1 gives biomass density, whereas power = 2 gives biomass density respect logarithmic size bins. biomass used power argument missing. biomass = TRUE equivalent power=1 biomass = FALSE equivalent power=0 total boolean value determines whether total species system plotted well. Note even plot shows selection species, total including species. Default FALSE. resource boolean value determines whether resource included. Default TRUE. background boolean value determines whether background species included. Ignored model contain background species. Default TRUE. highlight Name vector names species highlighted. return_data boolean value determines whether formatted data used plot returned instead plot . Default value FALSE ... arguments (currently unused)","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotSpectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the abundance spectra — plotSpectra","text":"ggplot2 object, unless return_data = TRUE, case data frame four variables 'w', 'value', 'Species', 'Legend' returned.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotSpectra.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the abundance spectra — plotSpectra","text":"called MizerSim object, abundance averaged specified time range (single value time range can used plot single time step). called MizerParams object initial abundance plotted.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/plotSpectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the abundance spectra — plotSpectra","text":"","code":"# \\donttest{ params <-  NS_params sim <- project(params, effort=1, t_max=20, t_save = 2, progress_bar = FALSE) plotSpectra(sim)  plotSpectra(sim, wlim = c(1e-6, NA))  plotSpectra(sim, time_range = 10:20)  plotSpectra(sim, time_range = 10:20, power = 0)  plotSpectra(sim, species = c(\"Cod\", \"Herring\"), power = 1)   # Returning the data frame fr <- plotSpectra(sim, return_data = TRUE) str(fr) #> 'data.frame':\t1024 obs. of  4 variables: #>  $ w      : num  0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 ... #>  $ value  : num  1.83e+10 6.92e+09 1.30e+11 1.46e+10 1.69e+08 ... #>  $ Species: chr  \"Sprat\" \"Sandeel\" \"N.pout\" \"Herring\" ... #>  $ Legend : chr  \"Sprat\" \"Sandeel\" \"N.pout\" \"Herring\" ... # }"},{"path":"https://sizespectrum.org/mizer/dev/reference/plotYield.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the total yield of species through time — plotYield","title":"Plot the total yield of species through time — plotYield","text":"running projection, total yield species across fishing gears can plotted time. yield obtained getYield().","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotYield.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the total yield of species through time — plotYield","text":"","code":"plotYield(   sim,   sim2,   species = NULL,   total = FALSE,   log = TRUE,   highlight = NULL,   return_data = FALSE,   ... )  plotlyYield(   sim,   sim2,   species = NULL,   total = FALSE,   log = TRUE,   highlight = NULL,   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/plotYield.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the total yield of species through time — plotYield","text":"sim object class MizerSim sim2 optional second object class MizerSim. provided yields shown plot bolder lines. species species selected. Optional. default target species selected. vector species names, numeric vector species indices, logical vector indicating species whether selected (TRUE) . total boolean value determines whether total species system plotted well. Note even plot shows selection species, total including species. Default FALSE. log Boolean whether yield plotted logarithmic axis. Defaults true. highlight Name vector names species highlighted. return_data boolean value determines whether formatted data used plot returned instead plot . Default value FALSE ... arguments (currently unused)","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotYield.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the total yield of species through time — plotYield","text":"ggplot2 object, unless return_data = TRUE, case data frame three variables 'Year', 'Yield', 'Species' returned.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/plotYield.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the total yield of species through time — plotYield","text":"","code":"# \\donttest{ params <- NS_params sim <- project(params, effort = 1, t_max = 20, t_save = 0.2, progress_bar = FALSE) plotYield(sim)  plotYield(sim, species = c(\"Cod\", \"Herring\"), total = TRUE)   # Comparing with yield from twice the effort sim2 <- project(params, effort=2, t_max=20, t_save = 0.2, progress_bar = FALSE) plotYield(sim, sim2, species = c(\"Cod\", \"Herring\"), log = FALSE)   # Returning the data frame fr <- plotYield(sim, return_data = TRUE) str(fr) #> 'data.frame':\t1212 obs. of  3 variables: #>  $ Year   : num  0 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6 1.8 ... #>  $ Yield  : num  2.21e+11 1.86e+11 1.60e+11 1.42e+11 1.30e+11 ... #>  $ Species: Factor w/ 12 levels \"Sprat\",\"Sandeel\",..: 1 1 1 1 1 1 1 1 1 1 ... # }"},{"path":"https://sizespectrum.org/mizer/dev/reference/plotYieldGear.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the total yield of each species by gear through time — plotYieldGear","title":"Plot the total yield of each species by gear through time — plotYieldGear","text":"running projection, total yield species fishing gear can plotted time.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotYieldGear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the total yield of each species by gear through time — plotYieldGear","text":"","code":"plotYieldGear(   sim,   species = NULL,   total = FALSE,   highlight = NULL,   return_data = FALSE,   ... )  plotlyYieldGear(sim, species = NULL, total = FALSE, highlight = NULL, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/plotYieldGear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the total yield of each species by gear through time — plotYieldGear","text":"sim object class MizerSim species species selected. Optional. default target species selected. vector species names, numeric vector species indices, logical vector indicating species whether selected (TRUE) . total boolean value determines whether total species system plotted well. Note even plot shows selection species, total including species. Default FALSE. highlight Name vector names species highlighted. return_data boolean value determines whether formatted data used plot returned instead plot . Default value FALSE ... arguments (currently unused)","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotYieldGear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the total yield of each species by gear through time — plotYieldGear","text":"ggplot2 object, unless return_data = TRUE, case data frame four variables 'Year', 'Yield', 'Species' 'Gear' returned.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotYieldGear.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the total yield of each species by gear through time — plotYieldGear","text":"plot pretty easy hand. just gets biomass using getYieldGear() method plots using ggplot2 package. can fiddle colours linetypes etc. Just look source code details.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/plotYieldGear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the total yield of each species by gear through time — plotYieldGear","text":"","code":"# \\donttest{ params <-  NS_params sim <- project(params, effort=1, t_max=20, t_save = 0.2, progress_bar = FALSE) plotYieldGear(sim)  plotYieldGear(sim, species = c(\"Cod\", \"Herring\"), total = TRUE)   # Returning the data frame fr <- plotYieldGear(sim, return_data = TRUE) str(fr) #> 'data.frame':\t1212 obs. of  4 variables: #>  $ Year   : num  0 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6 1.8 ... #>  $ Yield  : num  2.21e+11 1.86e+11 1.60e+11 1.42e+11 1.30e+11 ... #>  $ Species: Factor w/ 12 levels \"Sprat\",\"Sandeel\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  $ Gear   : Factor w/ 4 levels \"Industrial\",\"Pelagic\",..: 1 1 1 1 1 1 1 1 1 1 ... # }"},{"path":"https://sizespectrum.org/mizer/dev/reference/plotYieldObservedVsModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting observed vs. model yields — plotYieldObservedVsModel","title":"Plotting observed vs. model yields — plotYieldObservedVsModel","text":"yield observations available least species via yield_observed column species parameter data frame, function plots yield species model observed yields. called MizerSim object, plot use model yields predicted final time step simulation.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotYieldObservedVsModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting observed vs. model yields — plotYieldObservedVsModel","text":"","code":"plotYieldObservedVsModel(   object,   species = NULL,   ratio = FALSE,   log_scale = TRUE,   return_data = FALSE,   labels = TRUE,   show_unobserved = FALSE )  plotlyYieldObservedVsModel(   object,   species = NULL,   ratio = FALSE,   log_scale = TRUE,   return_data = FALSE,   show_unobserved = FALSE )"},{"path":"https://sizespectrum.org/mizer/dev/reference/plotYieldObservedVsModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting observed vs. model yields — plotYieldObservedVsModel","text":"object object class MizerParams MizerSim. species species included. Optional. default observed yields included. vector species names, numeric vector species indices, logical vector indicating species whether included (TRUE) . ratio Whether plot model yield vs. observed yield (FALSE) ratio model : observed yield (TRUE). Default FALSE. log_scale Whether plot log10 scale (TRUE) (FALSE). non-ratio plot applies axes, ratio plot x-axis log10 scale. Default TRUE. return_data Whether return data frame plot (TRUE) (FALSE). Default FALSE. labels Whether show text labels species (TRUE) (FALSE). Default TRUE. show_unobserved Whether include also species yield observation available. TRUE, species shown observed yield equal model yield.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotYieldObservedVsModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting observed vs. model yields — plotYieldObservedVsModel","text":"ggplot2 object plot model yield species compared observed yield. return_data = TRUE, data frame used create plot returned instead plot.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotYieldObservedVsModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plotting observed vs. model yields — plotYieldObservedVsModel","text":"can use function need added yield_observed column model gives observed yield grams per year.  species observed yield, set value yield_observed column 0 NA. total relative error shown caption plot, calculated $$TRE = \\sum_i|1-\\rm{ratio_i}|$$ \\(\\rm{ratio_i}\\) ratio model yield / observed yield species .","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotYieldObservedVsModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting observed vs. model yields — plotYieldObservedVsModel","text":"","code":"# create an example params <- NS_params species_params(params)$yield_observed <-     c(0.8, 61, 12, 35, 1.6, NA, 10, 7.6, 135, 60, 30, NA) params <- calibrateYield(params)  # Plot with default options plotYieldObservedVsModel(params) #> The following species are not being fished in your model and will not be included in the plot: Sprat, Sandeel, N.pout.   # Plot including also species without observations plotYieldObservedVsModel(params, show_unobserved = TRUE) #> The following species are not being fished in your model and will not be included in the plot: Sprat, Sandeel, N.pout.   # Show the ratio instead plotYieldObservedVsModel(params, ratio = TRUE) #> The following species are not being fished in your model and will not be included in the plot: Sprat, Sandeel, N.pout.   # Run a simulation params <- matchYields(params) #> The following species have no yield observations and their abundances will not be changed: Whiting, Saithe. #> The following species are not being fished in your model and their abundances will not be changed: Sprat, Sandeel, N.pout. sim <- project(params, t_max = 10, progress_bar = FALSE) plotBiomass(sim)   # Plot the yield comparison at the final time plotYieldObservedVsModel(sim) #> The following species are not being fished in your model and will not be included in the plot: Sprat, Sandeel, N.pout.   # The same with no log scaling of axes plotYieldObservedVsModel(sim, log_scale = FALSE) #> The following species are not being fished in your model and will not be included in the plot: Sprat, Sandeel, N.pout."},{"path":"https://sizespectrum.org/mizer/dev/reference/plotting_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Description of the plotting functions — plotting_functions","title":"Description of the plotting functions — plotting_functions","text":"Mizer provides range plotting functions visualising results running simulation, stored MizerSim object, initial state stored MizerParams object. Every plotting function exists two versions, plotSomething plotlySomething. plotly version interactive suitable inclusion documents.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/plotting_functions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Description of the plotting functions — plotting_functions","text":"table shows available plotting functions. functions use ggplot2 package return plot ggplot object. means can manipulate plot creation using ggplot grammar graphics. corresponding function names plot replaced plotly produce interactive plots help plotly package. plot functions take data MizerSim object, make plots representing data single time can also take data initial values MizerParams object. plots show results species, line colour line type species specified linecolour linetype slots MizerParams object. either taken default palette hard-coded emptyParams() specified user species parameters dataframe used set MizerParams object. linecolour linetype slots hold named vectors, named species. can overwritten user time. plots allow user select show subset species, specified vector species argument plot function. ordering species legend ordering species parameter data frame.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/plotting_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Description of the plotting functions — plotting_functions","text":"","code":"# \\donttest{ sim <- NS_sim  # Some example plots plotFeedingLevel(sim)   # Plotting only a subset of species plotFeedingLevel(sim, species = c(\"Cod\", \"Herring\"))   # Specifying new colours and linetypes for some species sim@params@linetype[\"Cod\"] <- \"dashed\" sim@params@linecolour[\"Cod\"] <- \"red\" plotFeedingLevel(sim, species = c(\"Cod\", \"Herring\"))   # Manipulating the plot library(ggplot2) p <- plotFeedingLevel(sim) p <- p + geom_hline(aes(yintercept = 0.7)) p <- p + theme_bw() p  # }"},{"path":"https://sizespectrum.org/mizer/dev/reference/power_law_pred_kernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Power-law predation kernel — power_law_pred_kernel","title":"Power-law predation kernel — power_law_pred_kernel","text":"predation kernel power-law, sigmoidal cut-offs large small predator/prey mass ratios.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/power_law_pred_kernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power-law predation kernel — power_law_pred_kernel","text":"","code":"power_law_pred_kernel(   ppmr,   kernel_exp,   kernel_l_l,   kernel_u_l,   kernel_l_r,   kernel_u_r )"},{"path":"https://sizespectrum.org/mizer/dev/reference/power_law_pred_kernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power-law predation kernel — power_law_pred_kernel","text":"ppmr vector predator/prey size ratios evaluate predation kernel. kernel_exp exponent power law kernel_l_l location left, rising sigmoid kernel_u_l shape left, rising sigmoid kernel_l_r location right, falling sigmoid kernel_u_r shape right, falling sigmoid","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/power_law_pred_kernel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power-law predation kernel — power_law_pred_kernel","text":"vector giving value predation kernel predator/prey mass ratios ppmr argument.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/power_law_pred_kernel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Power-law predation kernel — power_law_pred_kernel","text":"return value calculated ppmr^kernel_exp /   (1 + (exp(kernel_l_l) / ppmr)^kernel_u_l) /   (1 + (ppmr / exp(kernel_l_r))^kernel_u_r) parameters need given columns species parameter dataframe.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/project.html","id":null,"dir":"Reference","previous_headings":"","what":"Project size spectrum forward in time — project","title":"Project size spectrum forward in time — project","text":"Runs size spectrum model simulation. function returns object type MizerSim can explored range summary_functions, indicator_functions plotting_functions.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Project size spectrum forward in time — project","text":"","code":"project(   object,   effort,   t_max = 100,   dt = 0.1,   t_save = 1,   t_start = 0,   initial_n,   initial_n_pp,   append = TRUE,   progress_bar = TRUE,   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Project size spectrum forward in time — project","text":"object Either MizerParams object MizerSim object (contains MizerParams object). effort effort fishing gear time. See notes . t_max number years projection runs . default value 100. argument ignored array used effort argument. See notes . dt Time step solver. default value 0.1. t_save frequency output stored. default value 1. argument ignored array used effort argument. See notes . t_start year start simulation. simulation cover period t_start t_start + t_max. Defaults 0. Ignored array used effort argument MizerSim object argument. initial_n initial abundances species. Instead using argument set initialN(params) desired value. initial_n_pp initial abundances resource. Instead using argument set initialNResource(params) desired value. append boolean determines whether new simulation results appended previous ones. relevant object MizerSim object. Default = TRUE. progress_bar Either boolean value determine whether progress bar shown console, shiny Progress object implement progress bar shiny app. ... arguments passed rate functions.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Project size spectrum forward in time — project","text":"object class MizerSim.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/project.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Project size spectrum forward in time — project","text":"effort argument specifies level fishing effort simulation. supplied, initial effort stored params object used. effort can specified three different ways: single numeric value. specifies effort fishing gears constant time (.e. gears constant effort). numerical vector length number fishing gears. vector must named names must correspond gear names MizerParams object. values vector specify constant fishing effort fishing gears, .e. effort constant time gear may different fishing effort. numerical array dimensions time x gear. specifies fishing effort gear time step.  first dimension, time, must named numerically increasing. second dimension array must named names must correspond gear names MizerParams argument. value effort particular time used interval time next time array. effort specified array smallest time array used initial time simulation. Otherwise initial time set final time previous simulation object MizerSim object t_start otherwise. Also, effort array t_max t_save arguments ignored simulation times taken effort array. object argument class MizerSim initial values simulation taken final values MizerSim object corresponding arguments function ignored.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Project size spectrum forward in time — project","text":"","code":"if (FALSE) { params <-  NS_params # With constant fishing effort for all gears for 20 time steps sim <- project(params, t_max = 20, effort = 0.5) # With constant fishing effort which is different for each gear effort <- c(Industrial = 0, Pelagic = 1, Beam = 0.5, Otter = 0.5) sim <- project(params, t_max = 20, effort = effort) # With fishing effort that varies through time for each gear gear_names <- c(\"Industrial\",\"Pelagic\",\"Beam\",\"Otter\") times <- seq(from = 1, to = 10, by = 1) effort_array <- array(NA, dim = c(length(times), length(gear_names)),     dimnames = list(time = times, gear = gear_names)) effort_array[,\"Industrial\"] <- 0.5 effort_array[,\"Pelagic\"] <- seq(from = 1, to = 2, length = length(times)) effort_array[,\"Beam\"] <- seq(from = 1, to = 0, length = length(times)) effort_array[,\"Otter\"] <- seq(from = 1, to = 0.5, length = length(times)) sim <- project(params, effort = effort_array) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/projectToSteady.html","id":null,"dir":"Reference","previous_headings":"","what":"Project to steady state — projectToSteady","title":"Project to steady state — projectToSteady","text":"Run full dynamics, project(), stop change slowed sufficiently, sense distance states successive time steps less tol. determine distance calculated.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/projectToSteady.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Project to steady state — projectToSteady","text":"","code":"projectToSteady(   params,   effort = params@initial_effort,   distance_func = distanceSSLogN,   t_per = 1.5,   t_max = 100,   dt = 0.1,   tol = 0.1 * t_per,   return_sim = FALSE,   progress_bar = TRUE,   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/projectToSteady.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Project to steady state — projectToSteady","text":"params MizerParams object effort fishing effort used throughout simulation. must vector list one named entry per fishing gear. distance_func function called every t_per years previous new state return number sense measures distance states. default uses function distanceSSLogN() can use model distance function. t_per simulation broken shorter runs t_per years, check convergence. Default value 1.5. chosen odd multiple timestep dt order able detect period 2 cycles. t_max maximum number years run simulation. Default 100. dt time step use project(). tol simulation stops relative change egg production RDI t_per years less tol every species. return_sim TRUE, function returns MizerSim object holding result simulation run. FALSE (default) function returns MizerParams object \"initial\" slots set steady state. progress_bar shiny progress object implement progress bar shiny app. Default FALSE. ... arguments passed distance function.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/project_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Project abundances by a given number of time steps into the future — project_simple","title":"Project abundances by a given number of time steps into the future — project_simple","text":"internal function used user-facing project() function. potential interest mizer extension authors.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/project_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Project abundances by a given number of time steps into the future — project_simple","text":"","code":"project_simple(   params,   n = params@initial_n,   n_pp = params@initial_n_pp,   n_other = params@initial_n_other,   effort = params@initial_effort,   t = 0,   dt = 0.1,   steps,   resource_dynamics_fn = get(params@resource_dynamics),   other_dynamics_fns = lapply(params@other_dynamics, get),   rates_fns = lapply(params@rates_funcs, get),   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/project_simple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Project abundances by a given number of time steps into the future — project_simple","text":"params MizerParams object. n array (species x size) number density start simulation. n_pp vector (size) resource number density start simulation. n_other named list abundances components start simulation. effort fishing effort used throughout simulation. must vector list one named entry per fishing gear. t Time start simulation. dt Size time step. steps number time steps project. resource_dynamics_fn function resource dynamics. See Details. other_dynamics_fns List functions dynamics components. See Details. rates_fns List functions calculating rates. See Details. ... arguments passed rate functions.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/project_simple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Project abundances by a given number of time steps into the future — project_simple","text":"List final values n, n_pp n_other, rates.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/project_simple.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Project abundances by a given number of time steps into the future — project_simple","text":"function check arguments meant fast possible allow used loop. example, called project() every saved value. function also save intermediate results returns result time t + dt * steps. time uses constant fishing effort effort. functional arguments can calculated slots params object   reason function shave 20 microseconds running time, pays function called hundreds times row. function also used steady(). calls project_simple() steady() function checks whether values still changing significantly, can stop steady state approached. Mizer extension packages might similar need run simulation repeatedly short periods run code . code may want use values rates final time step, included returned list.","code":"resource_dynamics_fn <- get(params@resource_dynamics) other_dynamics_fns <- lapply(params@other_dynamics, get) rates_fns <- lapply(params@rates_funcs, get)"},{"path":"https://sizespectrum.org/mizer/dev/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. reshape2 melt","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/removeSpecies.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove species — removeSpecies","title":"Remove species — removeSpecies","text":"function simply removes entries MizerParams object refer selected species. recalculate steady state remaining species retune reproductive efficiency.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/removeSpecies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove species — removeSpecies","text":"","code":"removeSpecies(params, species)"},{"path":"https://sizespectrum.org/mizer/dev/reference/removeSpecies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove species — removeSpecies","text":"params mizer params object original system. species species removed. vector species names, numeric vector species indices, logical vector indicating species whether removed (TRUE) .","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/removeSpecies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove species — removeSpecies","text":"object type MizerParams","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/removeSpecies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove species — removeSpecies","text":"","code":"if (FALSE) { params <- NS_params species_params(params)$species params <- removeSpecies(params, c(\"Cod\", \"Haddock\")) species_params(params)$species }"},{"path":"https://sizespectrum.org/mizer/dev/reference/renameSpecies.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename species — renameSpecies","title":"Rename species — renameSpecies","text":"Changes names species MizerParams object. involves example changing species dimension names rate arrays appropriately.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/renameSpecies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename species — renameSpecies","text":"","code":"renameSpecies(params, replace)"},{"path":"https://sizespectrum.org/mizer/dev/reference/renameSpecies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename species — renameSpecies","text":"params mizer params object replace named character vector, new names values, old names names.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/renameSpecies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename species — renameSpecies","text":"object type MizerParams","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/renameSpecies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename species — renameSpecies","text":"","code":"replace <- c(Cod = \"Kabeljau\", Haddock = \"Schellfisch\") params <- renameSpecies(NS_params, replace) species_params(params)$species #>  [1] \"Sprat\"       \"Sandeel\"     \"N.pout\"      \"Herring\"     \"Dab\"         #>  [6] \"Whiting\"     \"Sole\"        \"Gurnard\"     \"Plaice\"      \"Schellfisch\" #> [11] \"Kabeljau\"    \"Saithe\""},{"path":"https://sizespectrum.org/mizer/dev/reference/resource_constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep resource abundance constant — resource_constant","title":"Keep resource abundance constant — resource_constant","text":"function can used instead standard resource_semichemostat() order keep resource spectrum constant time.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/resource_constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep resource abundance constant — resource_constant","text":"","code":"resource_constant(params, n_pp, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/resource_constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep resource abundance constant — resource_constant","text":"params MizerParams object n_pp vector resource abundance size ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/resource_constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Keep resource abundance constant — resource_constant","text":"Vector containing resource spectrum next timestep","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/resource_constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep resource abundance constant — resource_constant","text":"","code":"if (FALSE) { params <- newMultispeciesParams(NS_species_params_gears, NS_interaction,                                 resource_dynamics = \"resource_constant\") }"},{"path":"https://sizespectrum.org/mizer/dev/reference/resource_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Resource parameters — resource_params","title":"Resource parameters — resource_params","text":"functions allow get set resource parameters stored MizerParams object. resource parameters stored named list slot names r_pp, kappa, lambda, n, w_pp_cutoff. meaning see Details . change parameters recalculate resource rate resource capacity, unless set custom values . specified different resource dynamics function requires additional parameters, also added resource_params list.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/resource_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resource parameters — resource_params","text":"","code":"resource_params(params)  resource_params(params) <- value"},{"path":"https://sizespectrum.org/mizer/dev/reference/resource_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resource parameters — resource_params","text":"params MizerParams object value named list resource parameters.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/resource_params.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Resource parameters — resource_params","text":"resource parameters r_pp n used set intrinsic replenishment rate \\(r_R(w)\\) resource size \\(w\\) $$r_R(w) = r_{pp}\\, w^{n-1}.$$ resource parameters kappa, lambda w_pp_cutoff used set intrinsic resource carrying capacity capacity \\(c_R(w)\\) size \\(w\\) set $$c_R(w) = \\kappa\\, w^{-\\lambda}$$ \\(w\\) less w_pp_cutoff zero larger sizes. use default semichemostat dynamics resource rates enter equation resource abundance density $$\\frac{\\partial N_R(w,t)}{\\partial t} = r_R(w) \\Big[ c_R (w) - N_R(w,t) \\Big] - \\mu_R(w, t) N_R(w,t)$$ mortality \\(\\mu_R(w, t)\\) due predation consumers calculate getResourceMort(). can however set different resource dynamics resource_dynamics<-().","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/resource_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resource parameters — resource_params","text":"","code":"resource_params(NS_params) #> $kappa #> [1] 1e+11 #>  #> $lambda #> [1] 2.133333 #>  #> $r_pp #> [1] 10 #>  #> $n #> [1] 0.6666667 #>  #> $w_pp_cutoff #> [1] 9.820907 #>  # Doubling the replenishment rate params <- NS_params resource_params(params)$r_pp <- 2 * resource_params(params)$r_pp"},{"path":"https://sizespectrum.org/mizer/dev/reference/resource_semichemostat.html","id":null,"dir":"Reference","previous_headings":"","what":"Project resource using semichemostat model — resource_semichemostat","title":"Project resource using semichemostat model — resource_semichemostat","text":"function calculates resource abundance time t + dt abundances rates time t.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/resource_semichemostat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Project resource using semichemostat model — resource_semichemostat","text":"","code":"resource_semichemostat(   params,   n,   n_pp,   n_other,   rates,   t,   dt,   resource_rate,   resource_capacity,   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/resource_semichemostat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Project resource using semichemostat model — resource_semichemostat","text":"params MizerParams object n matrix species abundances (species x size) n_pp vector resource abundance size n_other list abundances components rates list rates returned mizerRates() t current time dt Time step resource_rate Resource replenishment rate resource_capacity Resource carrying capacity ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/resource_semichemostat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Project resource using semichemostat model — resource_semichemostat","text":"Vector containing resource spectrum next timestep","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/resource_semichemostat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Project resource using semichemostat model — resource_semichemostat","text":"time evolution resource spectrum described semi-chemostat equation $$\\frac{\\partial N_R(w,t)}{\\partial t} = r_R(w) \\Big[ c_R (w) - N_R(w,t) \\Big] - \\mu_R(w, t) N_R(w,t)$$ \\(r_R(w)\\) resource regeneration rate \\(c_R(w)\\) carrying capacity absence predation. parameters changed setResource(). mortality \\(\\mu_R(w, t)\\) due predation consumers calculate getResourceMort(). function uses analytic solution equation, keeping mortality fixed timestep. also possible implement resource dynamics, described help page setResource().","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/resource_semichemostat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Project resource using semichemostat model — resource_semichemostat","text":"","code":"if (FALSE) { params <- newMultispeciesParams(NS_species_params_gears, NS_interaction,                                 resource_dynamics = \"resource_semichemostat\") }"},{"path":"https://sizespectrum.org/mizer/dev/reference/saveParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a MizerParams object to file, and restore it — saveParams","title":"Save a MizerParams object to file, and restore it — saveParams","text":"saveParams() saves MizerParams object file. can restored readParams().","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/saveParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a MizerParams object to file, and restore it — saveParams","text":"","code":"saveParams(params, file)  readParams(file)"},{"path":"https://sizespectrum.org/mizer/dev/reference/saveParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a MizerParams object to file, and restore it — saveParams","text":"params MizerParams object file name file connection MizerParams object saved read .","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/saveParams.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save a MizerParams object to file, and restore it — saveParams","text":"Issues warning model saving relies custom functions. saving model may want set metadata setMetadata().","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/scaleModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Change scale of the model — scaleModel","title":"Change scale of the model — scaleModel","text":"abundances mizer rates depend size area refer. given per square meter per square kilometer entire study area choice . function allows change scale model automatically changing abundances rates accordingly.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/scaleModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change scale of the model — scaleModel","text":"","code":"scaleModel(params, factor)"},{"path":"https://sizespectrum.org/mizer/dev/reference/scaleModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change scale of the model — scaleModel","text":"params MizerParams object factor factor scale multiplied","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/scaleModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change scale of the model — scaleModel","text":"rescaled MizerParams object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/scaleModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Change scale of the model — scaleModel","text":"rescale model factor \\(c\\) function makes following rescalings params object: initial abundances rescaled \\(c\\). search volume rescaled \\(1/c\\). resource carrying capacity rescaled \\(c\\) maximum reproduction rate \\(R_{max}\\) rescaled \\(c\\). effect dynamics rescaled model identical unscaled model, sense matter whether one first calls scaleModel() runs simulation project() whether one first runs simulation rescales resulting abundances. Note use non-standard resource dynamics components may need rescale additional parameters appear dynamics. practice need use observations set scale model. biomass observations can use calibrateBiomass(), yearly yields can use calibrateYield().","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setBevertonHolt.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Beverton-Holt density dependence — setBevertonHolt","title":"Set Beverton-Holt density dependence — setBevertonHolt","text":"Takes MizerParams object params arbitrary density dependence returns MizerParams object Beverton-Holt density-dependence way energy invested reproduction mature individuals leads reproduction rate required maintain given egg abundance. Hence tuned params object describe particular steady state, setting Beverton-Holt density dependence function leave exact steady state. specifying one parameters erepro, R_max reproduction_level pick desired reproduction curve. details parameters provided .","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setBevertonHolt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Beverton-Holt density dependence — setBevertonHolt","text":"","code":"setBevertonHolt(   params,   R_factor = deprecated(),   erepro,   R_max,   reproduction_level )"},{"path":"https://sizespectrum.org/mizer/dev/reference/setBevertonHolt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Beverton-Holt density dependence — setBevertonHolt","text":"params MizerParams object R_factor Use reproduction_level = 1 / R_factor instead. erepro Reproductive efficiency species. See details. R_max Maximum reproduction rate. See details. reproduction_level Sets R_max reproduction rate initial state R_max * reproduction_level.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setBevertonHolt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Beverton-Holt density dependence — setBevertonHolt","text":"MizerParams object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setBevertonHolt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Beverton-Holt density dependence — setBevertonHolt","text":"Beverton-Holt density dependence relation energy invested reproduction number eggs hatched determined two parameters: reproductive efficiency erepro maximum reproduction rate R_max. maximum imposed reproduction rate (\\(R_{max} = \\infty\\)) resulting density-independent reproduction rate \\(R_{di}\\) proportional total rate \\(E_R\\) energy invested reproduction, $$R_{di} = \\frac{\\rm{erepro}}{2 w_{min}} E_R,$$ proportionality factor given reproductive efficiency erepro divided egg size w_min convert energy egg number divided 2 account two sexes. Imposing finite maximum reproduction rate \\(R_{max}\\) leads non-linear relationship energy invested eggs hatched. density-dependent reproduction rate \\(R_{dd}\\) given $$R_{dd} = R_{di} \\frac{R_{max}}{R_{di} + R_{max}}.$$ (quantities equations species-specific dropped species index simplicity.) following plot illustrates Beverton-Holt density dependence reproduction rate two different choices parameters. plot shows given energy \\(E_R\\) invested reproduction can lead reproduction rate \\(R_{dd}\\) different choices parameters R_max erepro. R_max determines asymptote curve erepro initial slope. higher R_max coupled lower erepro (black curves) can give value lower R_max coupled higher erepro (blue curves). given initial state MizerParams object params one can calculate energy \\(E_R\\) invested reproduction mature individuals reproduction rate \\(R_{dd}\\) required keep egg abundance constant. two values determine location black dot graph. need one parameter select one curve family Beverton-Holt curves going point. parameter can erepro R_max. Instead R_max can alternatively specify reproduction_level ratio density-dependent reproduction rate \\(R_{dd}\\) maximal reproduction rate  \\(R_{max}\\). provide value reproduction parameter arguments, erepro set value current species parameter data frame. provide one reproduction parameters, can either vector one value species, named vector names determine species affected, single unnamed value used species. species given value NA remain unaffected. values R_max must larger \\(R_{dd}\\) can range Inf. smaller value requested warning issued value increased value required reproduction level 0.99. values reproduction_level must positive less 1. values erepro must large enough allow required reproduction rate. smaller value requested warning issued value increased smallest possible value. values erepro also smaller 1 physiologically sensible, enforced function. can seen graph , choosing lower value R_max higher value erepro means near steady state reproduction less sensitive change energy invested reproduction hence less sensitive changes spawning stock biomass energy income. result species also less sensitive fishing, leading higher F_MSY.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setBevertonHolt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Beverton-Holt density dependence — setBevertonHolt","text":"","code":"params <- NS_params species_params(params)$erepro #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 # Attempting to set the same erepro for all species params <- setBevertonHolt(params, erepro = 0.1) #> Warning: For the following species `erepro` has been increased to the smallest possible value: erepro[Gurnard] = 0.558; erepro[Plaice] = 0.921 t(species_params(params)[, c(\"erepro\", \"R_max\")]) #>               Sprat      Sandeel       N.pout      Herring          Dab #> erepro 1.000000e-01 1.000000e-01 1.000000e-01 1.000000e-01 1.000000e-01 #> R_max  8.071481e+11 4.112049e+11 3.472063e+13 1.197577e+12 1.167176e+10 #>            Whiting         Sole   Gurnard    Plaice      Haddock          Cod #> erepro 1.00000e-01 1.000000e-01 0.5582259 0.9212325 1.000000e-01          0.1 #> R_max  6.22081e+11 4.007876e+10       Inf       Inf 3.929056e+12 8280106764.0 #>              Saithe #> erepro 1.000000e-01 #> R_max  1.145835e+11 # Setting erepro for some species params <- setBevertonHolt(params, erepro = c(\"Gurnard\" = 0.6, \"Plaice\" = 0.95)) t(species_params(params)[, c(\"erepro\", \"R_max\")]) #>               Sprat      Sandeel       N.pout      Herring          Dab #> erepro 1.000000e-01 1.000000e-01 1.000000e-01 1.000000e-01 1.000000e-01 #> R_max  8.071481e+11 4.112049e+11 3.472063e+13 1.197577e+12 1.167176e+10 #>            Whiting         Sole      Gurnard       Plaice      Haddock #> erepro 1.00000e-01 1.000000e-01 6.000000e-01 9.500000e-01 1.000000e-01 #> R_max  6.22081e+11 4.007876e+10 1.047481e+13 1.082568e+15 3.929056e+12 #>                 Cod       Saithe #> erepro          0.1 1.000000e-01 #> R_max  8280106764.0 1.145835e+11 # Setting R_max R_max <- 1e17 * species_params(params)$w_inf^-1 params <- setBevertonHolt(NS_params, R_max = R_max) #> Warning: The following species require an unrealistic reproductive efficiency greater than 1: Plaice t(species_params(params)[, c(\"erepro\", \"R_max\")]) #>               Sprat      Sandeel       N.pout      Herring          Dab #> erepro 9.274305e-03 1.297184e-04 7.257409e-02 8.045063e-03 4.224791e-03 #> R_max  3.030303e+15 2.777778e+15 1.000000e+15 2.994012e+14 3.086420e+14 #>             Whiting         Sole      Gurnard       Plaice      Haddock #> erepro 1.292557e-02 3.571380e-03 5.609587e-01 3.773957e+01 6.020565e-02 #> R_max  8.389262e+13 1.154734e+14 1.497006e+14 3.360215e+13 2.316692e+13 #>                 Cod       Saithe #> erepro 6.375069e-05 2.433424e-03 #> R_max  2.509328e+12 2.521521e+12 # Setting reproduction_level params <- setBevertonHolt(params, reproduction_level = 0.3) #> Warning: The following species require an unrealistic reproductive efficiency greater than 1: Plaice t(species_params(params)[, c(\"erepro\", \"R_max\")]) #>               Sprat      Sandeel       N.pout      Herring          Dab #> erepro 1.324581e-02 1.852847e-04 1.026645e-01 1.145066e-02 6.035197e-03 #> R_max  2.441029e+12 1.368905e+12 3.256200e+13 3.671952e+12 3.726224e+10 #>             Whiting         Sole      Gurnard       Plaice      Haddock #> erepro 1.834577e-02 5.100263e-03 7.974655e-01 1.316046e+00 7.954325e-02 #> R_max  1.807310e+12 1.288262e+11 2.430980e+12 1.092730e+14 5.804489e+12 #>                 Cod       Saithe #> erepro 9.077210e-05 3.322021e-03 #> R_max  2.758282e+10 3.730633e+11"},{"path":"https://sizespectrum.org/mizer/dev/reference/setColours.html","id":null,"dir":"Reference","previous_headings":"","what":"Set line colours and line types to be used in mizer plots — setColours","title":"Set line colours and line types to be used in mizer plots — setColours","text":"Used setting colour type lines representing \"Total\", \"Resource\", \"Fishing\", \"Background\" possibly categories plots.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setColours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set line colours and line types to be used in mizer plots — setColours","text":"","code":"setColours(params, colours)  getColours(params)  setLinetypes(params, linetypes)  getLinetypes(params)"},{"path":"https://sizespectrum.org/mizer/dev/reference/setColours.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set line colours and line types to be used in mizer plots — setColours","text":"params MizerParams object colours named list named vector line colours. linetypes named list named vector linetypes.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setColours.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set line colours and line types to be used in mizer plots — setColours","text":"setColours: MizerParams object updated line colours getColours(): named vector colours setLinetypes(): MizerParams object updated linetypes getLinetypes(): named vector linetypes","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setColours.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set line colours and line types to be used in mizer plots — setColours","text":"Colours names already colour set overwritten colour specify. Colours names yet colour appended list colours. use setting colours linetypes species, determined setting linecolour linetype variables species parameter data frame. can use colours ggplot2 plots adding scale_colour_manual(values = getColours(params)) plot. Similarly can use linetypes scale_linetype_manual(values = getLinetypes(params)).","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setColours.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set line colours and line types to be used in mizer plots — setColours","text":"","code":"params <- setColours(NS_params, list(\"Resource\" = \"red\", \"Total\" = \"#0000ff\")) params <- setLinetypes(NS_params, list(\"Total\" = \"dotted\")) # Set colours and linetypes for species species_params(params)[\"Cod\", \"linecolour\"] <- \"black\" species_params(params)[\"Cod\", \"linetype\"] <- \"dashed\" plotSpectra(params, total = TRUE)  getColours(params) #>      Sprat    Sandeel     N.pout    Herring        Dab    Whiting       Sole  #>  \"#E69F00\"  \"#56B4E9\"  \"#009E73\"  \"#F0E442\"  \"#0072B2\"  \"#D55E00\"  \"#CC79A7\"  #>    Gurnard     Plaice    Haddock        Cod     Saithe      Total   Resource  #>  \"#E69F00\"  \"#56B4E9\"  \"#009E73\"    \"black\"  \"#0072B2\"    \"black\"    \"green\"  #> Background  #>     \"grey\"  getLinetypes(params) #>      Sprat    Sandeel     N.pout    Herring        Dab    Whiting       Sole  #>    \"solid\"    \"solid\"    \"solid\"    \"solid\"    \"solid\"    \"solid\"    \"solid\"  #>    Gurnard     Plaice    Haddock        Cod     Saithe      Total   Resource  #>    \"solid\"    \"solid\"    \"solid\"   \"dashed\"    \"solid\"   \"dotted\"    \"solid\"  #> Background  #>    \"solid\""},{"path":"https://sizespectrum.org/mizer/dev/reference/setComponent.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a dynamical ecosystem component — setComponent","title":"Add a dynamical ecosystem component — setComponent","text":"default, mizer models number size-resolved consumer species single size-resolved resource spectrum. model may require additional components, like example detritus carrion multiple resources .... function allows set components.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setComponent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a dynamical ecosystem component — setComponent","text":"","code":"setComponent(   params,   component,   initial_value,   dynamics_fun,   encounter_fun,   mort_fun,   component_params )  removeComponent(params, component)"},{"path":"https://sizespectrum.org/mizer/dev/reference/setComponent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a dynamical ecosystem component — setComponent","text":"params MizerParams object component Name component initial_value Initial value component dynamics_fun Name function calculate value next time step encounter_fun Name function calculate contribution encounter rate. Optional. mort_fun Name function calculate contribution mortality rate. Optional. component_params Object holding parameters needed component functions. example named list parameters. Optional.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setComponent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a dynamical ecosystem component — setComponent","text":"updated MizerParams object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setComponent.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a dynamical ecosystem component — setComponent","text":"component can number, vector, array, list, data structure like. set component new name, new component added existing components. set component existing name, component overwritten. can remove component removeComponent().","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setExtMort.html","id":null,"dir":"Reference","previous_headings":"","what":"Set external mortality rate — setExtMort","title":"Set external mortality rate — setExtMort","text":"Set external mortality rate","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setExtMort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set external mortality rate — setExtMort","text":"","code":"setExtMort(   params,   ext_mort = NULL,   z0pre = 0.6,   z0exp = -1/4,   reset = FALSE,   z0 = deprecated(),   ... )  getExtMort(params)  ext_mort(params)  ext_mort(params) <- value"},{"path":"https://sizespectrum.org/mizer/dev/reference/setExtMort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set external mortality rate — setExtMort","text":"params MizerParams ext_mort Optional. array (species x size) holding external mortality rate. z0pre z0, mortality sources, column species data frame, calculated z0pre * w_inf ^ z0exp. Default value 0.6. z0exp z0, mortality sources, column species data frame, calculated z0pre * w_inf ^ z0exp. Default value n-1. reset set TRUE, external mortality rate reset value calculated z0 parameters, even previously overwritten custom value. set FALSE (default) recalculation species parameters take place custom value set. z0 Use ext_mort instead. confused species_parameter z0. ... Unused value ext_mort","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setExtMort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set external mortality rate — setExtMort","text":"setExtMort(): MizerParams object updated external mortality rate. getExtMort() equivalently ext_mort(): array (species x size) external mortality.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setExtMort.html","id":"setting-external-mortality-rate","dir":"Reference","previous_headings":"","what":"Setting external mortality rate","title":"Set external mortality rate — setExtMort","text":"external mortality mortality due fishing predation predators included model. external mortality due predation predators explicitly included model (e.g. mammals seabirds) due causes like illness. rate units 1/year. ext_mort argument allows specify external mortality rate depends species body size. can see example Examples section help page setExtMort(). ext_mort argument supplied, external mortality assumed depend species, size individual: \\(\\mu_{ext.}(w) = z_{0.}\\). value constant \\(z_0\\) species taken z0 column species parameter data frame, column exists. Otherwise calculated $$z_{0.} = {\\tt z0pre}_i\\, w_{inf}^{\\tt z0exp}.$$","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/setExtMort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set external mortality rate — setExtMort","text":"","code":"if (FALSE) { params <- newMultispeciesParams(NS_species_params)  #### Setting allometric death rate #######################  # Set coefficient for each species. Here we choose 0.1 for each species z0pre <- rep(0.1, nrow(species_params(params)))  # Multiply by power of size with exponent, here chosen to be -1/4 # The outer() function makes it an array species x size allo_mort <- outer(z0pre, w(params)^(-1/4))  # Change the external mortality rate in the params object ext_mort(params) <- allo_mort }"},{"path":"https://sizespectrum.org/mizer/dev/reference/setFishing.html","id":null,"dir":"Reference","previous_headings":"","what":"Set fishing parameters — setFishing","title":"Set fishing parameters — setFishing","text":"Set fishing parameters","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setFishing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set fishing parameters — setFishing","text":"","code":"setFishing(   params,   selectivity = NULL,   catchability = NULL,   reset = FALSE,   initial_effort = NULL,   ... )  getCatchability(params)  catchability(params)  catchability(params) <- value  getSelectivity(params)  selectivity(params)  selectivity(params) <- value  getInitialEffort(params)"},{"path":"https://sizespectrum.org/mizer/dev/reference/setFishing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set fishing parameters — setFishing","text":"params MizerParams object selectivity Optional. array (gear x species x size) holds selectivity gear species size, \\(S_{g,,w}\\). catchability Optional. array (gear x species) holds catchability species gear, \\(Q_{g,}\\). reset set TRUE, catchability selectivity reset values calculated gear parameters, even previously overwritten custom value. set FALSE (default) recalculation gear parameters take place custom value set. initial_effort Optional. number named numeric vector specifying fishing effort. number, effort used gears. vector, must named gear. ... Unused value .","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setFishing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set fishing parameters — setFishing","text":"setFishing(): MizerParams object updated fishing parameters. getCatchability() equivalently catchability(): array (gear x species) holds catchability species gear, \\(Q_{g,}\\). names dimensions \"gear, \"sp\". getSelectivity() equivalently selectivity(): array (gear x species x size) holds selectivity gear species size, \\(S_{g,,w}\\). names dimensions \"gear, \"sp\", \"w\". getInitialEffort() equivalently initial_effort(): named vector initial fishing effort gear.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setFishing.html","id":"setting-fishing","dir":"Reference","previous_headings":"","what":"Setting fishing","title":"Set fishing parameters — setFishing","text":"Gears mizer, fishing mortality imposed species fishing gears. total per-capita fishing mortality (1/year) obtained summing mortality gears, $$\\mu_{f.}(w) = \\sum_g F_{g,}(w),$$ fishing mortality \\(F_{g,}(w)\\) imposed gear \\(g\\) species \\(\\) size \\(w\\) calculated : $$F_{g,}(w) = S_{g,}(w) Q_{g,} E_{g},$$ \\(S\\) selectivity species, gear size, \\(Q\\) catchability species gear \\(E\\) fishing effort gear. Selectivity selectivity size gear species saved three dimensional array (gear x species x size). entry range 0 (gear selecting species size) 1 (gear selecting individuals species size). three dimensional array can specified explicitly via selectivity argument, usually mizer calculates gear_params slot MizerParams object. allow calculation selectivity array, gear_params slot must data frame one row gear-species combination. example gear can select three species, gear contributes three rows gear_params data frame, one species can select. data frame must columns gear, holding name gear, species, holding name species, sel_func, holding name function calculates selectivity curve. selectivity functions included package: knife_edge(), sigmoid_length(), double_sigmoid_length(), sigmoid_weight(). Users able write size-based selectivity function. first argument function must w function must return vector selectivity (0 1) size. selectivity function may parameters. Values parameters must included columns gear parameters data.frame. names columns must exactly match names corresponding arguments selectivity function. example, default selectivity function knife_edge() sudden change selectivity 0 1 certain size. help page can see knife_edge() function arguments w knife_edge_size. first argument, w, size (function calculates selectivity size). selectivity functions must w first argument. values arguments must found gear parameters data.frame. knife_edge() function knife_edge_size column. knife_edge() default selectivity function, knife_edge_size argument default value = w_mat. case species selected one gear, columns gear_params data frame can alternatively provided columns species_params data frame, convenient user set . Mizer copy columns create gear_params data frame creates MizerParams object. However changing columns species parameter data frame later update gear_params data frame. Catchability Catchability used additional factor make link gear selectivity, fishing effort fishing mortality. example, can set effort 1 gives desired fishing mortality. way effort can specified relative 'base effort', e.g. effort particular year. Catchability stored two dimensional array (gear x species). can either provided explicitly via catchability argument, information can provided via catchability column gear_params data frame. case species selected single gear, catchability column can also provided species_params data frame. Mizer copy gear_params data frame MizerParams object created. Effort initial fishing effort stored MizerParams object. supplied, set zero. initial effort can overruled simulation run project(), also possible specify effort varies time.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/setFishing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set fishing parameters — setFishing","text":"","code":"str(getCatchability(NS_params)) #>  num [1:4, 1:12] 1 0 0 0 1 0 0 0 1 0 ... #>  - attr(*, \"dimnames\")=List of 2 #>   ..$ gear: chr [1:4] \"Industrial\" \"Pelagic\" \"Beam\" \"Otter\" #>   ..$ sp  : chr [1:12] \"Sprat\" \"Sandeel\" \"N.pout\" \"Herring\" ... str(getSelectivity(NS_params)) #>  num [1:4, 1:12, 1:100] 0 0 0 0 0 0 0 0 0 0 ... #>  - attr(*, \"dimnames\")=List of 3 #>   ..$ gear: chr [1:4] \"Industrial\" \"Pelagic\" \"Beam\" \"Otter\" #>   ..$ sp  : chr [1:12] \"Sprat\" \"Sandeel\" \"N.pout\" \"Herring\" ... #>   ..$ w   : chr [1:100] \"0.001\" \"0.00119\" \"0.00142\" \"0.0017\" ... str(getInitialEffort(NS_params)) #>  Named num [1:4] 0 1 0.5 0.5 #>  - attr(*, \"names\")= chr [1:4] \"Industrial\" \"Pelagic\" \"Beam\" \"Otter\""},{"path":"https://sizespectrum.org/mizer/dev/reference/setInitialValues.html","id":null,"dir":"Reference","previous_headings":"","what":"Set initial values to values from a simulation — setInitialValues","title":"Set initial values to values from a simulation — setInitialValues","text":"used use results one simulation starting values another simulation.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setInitialValues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set initial values to values from a simulation — setInitialValues","text":"","code":"setInitialValues(params, sim, time_range)"},{"path":"https://sizespectrum.org/mizer/dev/reference/setInitialValues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set initial values to values from a simulation — setInitialValues","text":"params MizerParams() object sim MizerSim object. time_range time range (either vector values, vector min max time, single value) average abundances . Default final time step.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setInitialValues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set initial values to values from a simulation — setInitialValues","text":"params object updated initial values initial effort. way R language works, setInitialValues() make changes params object pass instead returns new params object. affect change call function form params <- setInitialValues(params, sim).","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setInitialValues.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set initial values to values from a simulation — setInitialValues","text":"initial abundances (species resource) params object set abundances MizerSim object, averaged range times. Similarly, initial effort params object set effort MizerSim object, averaged range times. time range specified, initial values taken final time step simulation.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/setInitialValues.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set initial values to values from a simulation — setInitialValues","text":"","code":"if (FALSE) { params <- NS_params sim <- project(params, t_max = 20, effort = 0.5) params <- setInitialValues(params, sim) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/setInteraction.html","id":null,"dir":"Reference","previous_headings":"","what":"Set species interaction matrix — setInteraction","title":"Set species interaction matrix — setInteraction","text":"Set species interaction matrix","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setInteraction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set species interaction matrix — setInteraction","text":"","code":"setInteraction(params, interaction = NULL)  getInteraction(params)"},{"path":"https://sizespectrum.org/mizer/dev/reference/setInteraction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set species interaction matrix — setInteraction","text":"params MizerParams object interaction Optional interaction matrix species (predator species x prey species). default entries 1. See \"Setting interaction matrix\" section .","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setInteraction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set species interaction matrix — setInteraction","text":"setInteraction: MizerParams object updated interaction matrix getInteraction(): interaction matrix (predator species x prey species)","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setInteraction.html","id":"setting-interaction-matrix","dir":"Reference","previous_headings":"","what":"Setting interaction matrix","title":"Set species interaction matrix — setInteraction","text":"need specify interaction matrix. , predator-prey interactions purely determined size predator prey totally independent species predator prey. interaction matrix \\(\\theta_{ij}\\) describes interaction pair species model. can viewed proxy spatial interaction e.g. model predator-prey interaction size based. values interaction matrix used scale encountered food predation mortality (see website section predator-prey encounter rate predation mortality). first index refers predator species second prey species. used calculating food encounter rate getEncounter() predation mortality rate getPredMort(). entries dimensionless numbers. values interaction matrix equal predator-prey interactions determined entirely size-preference. function checks supplied interaction matrix valid stores interaction slot params object. order columns rows interaction argument order species params data frame params object. supply named array function check order warn different. One way creating interaction matrix enter data using spreadsheet program saving .csv file. data can read R using command read.csv(). interaction species resource set via column interaction_resource species_params data frame. default column set 1s.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/setInteraction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set species interaction matrix — setInteraction","text":"","code":"params <- newTraitParams(no_sp = 3) inter <- getInteraction(params) inter[1, 2:3] <- 0 params <- setInteraction(params, interaction = inter) getInteraction(params) #>         prey #> predator 1 2 3 #>        1 1 0 0 #>        2 1 1 1 #>        3 1 1 1"},{"path":"https://sizespectrum.org/mizer/dev/reference/setMaxIntakeRate.html","id":null,"dir":"Reference","previous_headings":"","what":"Set maximum intake rate — setMaxIntakeRate","title":"Set maximum intake rate — setMaxIntakeRate","text":"Set maximum intake rate","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setMaxIntakeRate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set maximum intake rate — setMaxIntakeRate","text":"","code":"setMaxIntakeRate(params, intake_max = NULL, reset = FALSE, ...)  getMaxIntakeRate(params)  intake_max(params)  intake_max(params) <- value"},{"path":"https://sizespectrum.org/mizer/dev/reference/setMaxIntakeRate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set maximum intake rate — setMaxIntakeRate","text":"params MizerParams intake_max Optional. array (species x size) holding maximum intake rate species size. supplied, default set described section \"Setting maximum intake rate\". reset set TRUE, intake rate reset value calculated species parameters, even previously overwritten custom value. set FALSE (default) recalculation species parameters take place custom value set. ... Unused value intake_max","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setMaxIntakeRate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set maximum intake rate — setMaxIntakeRate","text":"setReproduction(): MizerParams object updated maximum intake rate. getMaxIntakeRate() equivalently intake_max(): array (species x size) maximum intake rate.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setMaxIntakeRate.html","id":"setting-maximum-intake-rate","dir":"Reference","previous_headings":"","what":"Setting maximum intake rate","title":"Set maximum intake rate — setMaxIntakeRate","text":"maximum intake rate \\(h_i(w)\\) individual species \\(\\) weight \\(w\\) determines feeding level, calculated getFeedingLevel(). measured grams/year. intake_max argument supplied, maximum intake rate set $$h_i(w) = h_i w^{n_i}.$$ values \\(h_i\\) (maximum intake rate individual size 1 gram) \\(n_i\\) (allometric exponent intake rate) taken h n columns species parameter dataframe. h column supplied species parameter dataframe, calculated get_h_default() function, using f0 k_vb column, supplied. \\(h_i\\) set Inf, fish species consume encountered food.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/setMetabolicRate.html","id":null,"dir":"Reference","previous_headings":"","what":"Set metabolic rate — setMetabolicRate","title":"Set metabolic rate — setMetabolicRate","text":"Sets rate energy used metabolism activity","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setMetabolicRate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set metabolic rate — setMetabolicRate","text":"","code":"setMetabolicRate(params, metab = NULL, p = NULL, reset = FALSE, ...)  getMetabolicRate(params)  metab(params)  metab(params) <- value"},{"path":"https://sizespectrum.org/mizer/dev/reference/setMetabolicRate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set metabolic rate — setMetabolicRate","text":"params MizerParams metab Optional. array (species x size) holding metabolic rate species size. supplied, default set described section \"Setting metabolic rate\". p allometric metabolic exponent. used metab given explicitly exponent specified p column species_params. reset set TRUE, metabolic rate reset value calculated species parameters, even previously overwritten custom value. set FALSE (default) recalculation species parameters take place custom value set. ... Unused value metab","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setMetabolicRate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set metabolic rate — setMetabolicRate","text":"setMetabolicRate(): MizerParams object updated metabolic rate. getMetabolicRate() equivalently metab(): array (species x size) metabolic rate.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setMetabolicRate.html","id":"setting-metabolic-rate","dir":"Reference","previous_headings":"","what":"Setting metabolic rate","title":"Set metabolic rate — setMetabolicRate","text":"metabolic rate subtracted energy income rate calculate rate energy available growth reproduction, see getEReproAndGrowth(). measured grams/year. metab argument supplied, species metabolic rate \\(k(w)\\) individual size \\(w\\) set $$k(w) = k_s w^p + k w,$$ \\(k_s w^p\\) represents rate standard metabolism \\(k w\\) rate energy expended activity movement. values \\(k_s\\), \\(p\\) \\(k\\) taken ks, p k columns species parameter dataframe. parameters supplied, defaults \\(k = 0\\), \\(p = n\\) $$k_s = f_c h \\alpha w_{mat}^{n-p},$$ \\(f_c\\) critical feeding level taken fc column species parameter data frame. critical feeding level specified, default \\(f_c = 0.2\\) used.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/setMetadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Set metadata for a model — setMetadata","title":"Set metadata for a model — setMetadata","text":"Setting metadata particularly important sharing model others. metadata fields optional can also add fields choosing. set value field already existed, old value overwritten.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setMetadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set metadata for a model — setMetadata","text":"","code":"setMetadata(params, title, description, authors, url, doi, ...)  getMetadata(params)"},{"path":"https://sizespectrum.org/mizer/dev/reference/setMetadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set metadata for a model — setMetadata","text":"params MizerParams object model title string title model description string description model. example contain information publications using model. authors author entry list author entries, author entry either just name list fields like name, orcid, possibly email. url URL information model can found. blog post mizer blog, example. doi digital object identifier model. create doi can use online services like https://zenodo.org/ https://figshare.com. ... Additional metadata fields like add","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setMetadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set metadata for a model — setMetadata","text":"setMetadata(): MizerParams object updated metadata getMetadata(): list metadata entries set, including least mizer_version, extensions, time_created time_modified.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setMetadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set metadata for a model — setMetadata","text":"addition metadata fields can set hand, four fields set automatically mizer: mizer_version version string mizer version model last saved. Can compared current version obtained packageVersion(\"mizer\"). purpose field model working expected current version mizer, can go back older version presumably working. extensions named vector strings name name extension package needed run model value string giving information remotes package needs install correct version extension package, see https://remotes.r-lib.org/. field set extension packages. time_created POSIXct date-time object creation time. time_modified POSIXct date-time object last modified time.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Set or change any model parameters — setParams","title":"Set or change any model parameters — setParams","text":"convenient wrapper function calling following functions setPredKernel() setSearchVolume() setInteraction() setMaxIntakeRate() setMetabolicRate() setExtMort() setReproduction() setFishing() setResource() See Details section discussion use function.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set or change any model parameters — setParams","text":"","code":"setParams(params, interaction = NULL, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/setParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set or change any model parameters — setParams","text":"params MizerParams object interaction Optional interaction matrix species (predator species x prey species). default entries 1. See \"Setting interaction matrix\" section . ... Arguments passed setPredKernel, setSearchVolume, setMaxIntakeRate, setMetabolicRate, setExtMort, setReproduction, setFishing, setResource pred_kernel Optional. array (species x predator size x prey size) holds predation coefficient predator size prey size. supplied, default set described section \"Setting predation kernel\". search_vol Optional. array (species x size) holding search volume species size. supplied, default set described section \"Setting search volume\". intake_max Optional. array (species x size) holding maximum intake rate species size. supplied, default set described section \"Setting maximum intake rate\". metab Optional. array (species x size) holding metabolic rate species size. supplied, default set described section \"Setting metabolic rate\". p allometric metabolic exponent. used metab given explicitly exponent specified p column species_params. ext_mort Optional. array (species x size) holding external mortality rate. z0pre z0, mortality sources, column species data frame, calculated z0pre * w_inf ^ z0exp. Default value 0.6. z0exp z0, mortality sources, column species data frame, calculated z0pre * w_inf ^ z0exp. Default value n-1. z0 Use ext_mort instead. confused species_parameter z0. maturity Optional. array (species x size) holds proportion individuals species size mature. supplied, default set described section \"Setting reproduction\". repro_prop Optional. array (species x size) holds proportion consumed energy mature individual allocates reproduction species size. supplied, default set described section \"Setting reproduction\". RDD name function calculating density-dependent reproduction rate density-independent rate. Defaults \"BevertonHoltRDD()\". selectivity Optional. array (gear x species x size) holds selectivity gear species size, \\(S_{g,,w}\\). catchability Optional. array (gear x species) holds catchability species gear, \\(Q_{g,}\\). initial_effort Optional. number named numeric vector specifying fishing effort. number, effort used gears. vector, must named gear. resource_rate Optional. Vector resource intrinsic birth rates resource_capacity Optional. Vector resource intrinsic carrying capacity r_pp Coefficient intrinsic resource birth rate n Allometric growth exponent resource kappa Coefficient intrinsic resource carrying capacity lambda Scaling exponent intrinsic resource carrying capacity w_pp_cutoff upper cut size resource spectrum.  carrying capacity set 0 size. Default 10 g. resource_dynamics Optional. Name function determines resource dynamics calculating resource spectrum next time step current state. need specify want use default resource_semichemostat().","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set or change any model parameters — setParams","text":"MizerParams object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setParams.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set or change any model parameters — setParams","text":"happy assumptions mizer makes default shape model functions, example want change one allometric scaling assumptions, can providing choice array appropriate argument setParams(). sections discuss model functions can change way. way R language works, setParams make changes params object pass instead returns new params object. affect change call function form params <- setParams(params, ...). Usually, happy way mizer calculates model functions species parameters want change values species parameters, make changes species_params data frame contained params object using species_params<-(). example assumes MizerParams object params just want change gamma parameter third species:   Internally actually call setParams() recalculate parameters affected change species parameter. setParams() use species parameters params object recalculate values model functions except set custom values.","code":"species_params(params)$gamma[[3]] <- 1000"},{"path":"https://sizespectrum.org/mizer/dev/reference/setParams.html","id":"units-in-mizer","dir":"Reference","previous_headings":"","what":"Units in mizer","title":"Set or change any model parameters — setParams","text":"Mizer uses grams measure weight, centimetres measure lengths, years measure time. Mizer agnostic whether abundances given numbers per area, numbers per volume total numbers entire study area. make choice convenient application stick . make choice 1 2 also choose unit area volume. choice determine units parameters. mentioned parameters discussed sections . choice also affect units quantities may want calculate model. example, yield grams/year/m^2 case 1 choose m^2 measure area, grams/year/m^3 case 2 choose m^3 unit volume, simply grams/year case 3. comment applies measures, like total biomass, grams/area case 1, grams/volume case 2 simply grams case 3. mizer puts units axes plots, choose units appropriate case 3. example plotBiomass() gives unit grams. can convert choices. example, use case 1, need multiply area ecosystem get total quantity. work case 2, need multiply area thickness productive layer. respect, case 2 bit cumbersome. function scaleModel() useful change units using.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setParams.html","id":"setting-interaction-matrix","dir":"Reference","previous_headings":"","what":"Setting interaction matrix","title":"Set or change any model parameters — setParams","text":"need specify interaction matrix. , predator-prey interactions purely determined size predator prey totally independent species predator prey. interaction matrix \\(\\theta_{ij}\\) describes interaction pair species model. can viewed proxy spatial interaction e.g. model predator-prey interaction size based. values interaction matrix used scale encountered food predation mortality (see website section predator-prey encounter rate predation mortality). first index refers predator species second prey species. used calculating food encounter rate getEncounter() predation mortality rate getPredMort(). entries dimensionless numbers. values interaction matrix equal predator-prey interactions determined entirely size-preference. function checks supplied interaction matrix valid stores interaction slot params object. order columns rows interaction argument order species params data frame params object. supply named array function check order warn different. One way creating interaction matrix enter data using spreadsheet program saving .csv file. data can read R using command read.csv(). interaction species resource set via column interaction_resource species_params data frame. default column set 1s.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setParams.html","id":"setting-predation-kernel","dir":"Reference","previous_headings":"","what":"Setting predation kernel","title":"Set or change any model parameters — setParams","text":"Kernel dependent predator prey size ratio pred_kernel argument supplied, function sets predation kernel depends ratio predator mass prey mass, two masses independently. shape kernel determined pred_kernel_type column species_params. default pred_kernel_type \"lognormal\". call function lognormal_pred_kernel() calculate predation kernel. alternative pred_kernel type \"box\", implemented function box_pred_kernel(), \"power_law\", implemented function power_law_pred_kernel(). functions require certain species parameters species_params data frame. lognormal kernel beta sigma, box kernel ppmr_min ppmr_max. explained help pages kernel functions. Except beta sigma, defaults set parameters. missing species_params data frame mizer issue error message. can use string pred_kernel_type. example choose \"\" need define function my_pred_kernel can model existing functions like lognormal_pred_kernel(). using kernel depends predator/prey size ratio , mizer need store entire three dimensional array MizerParams object. array can big large number size bins. Instead, mizer needs store two two-dimensional arrays hold Fourier transforms feeding kernel function allow encounter rate predation rate calculated efficiently. However, need full three-dimensional array can calculate getPredKernel() function. Kernel dependent predator prey size want work feeding kernel depends predator mass prey mass independently, can specify full feeding kernel three-dimensional array (predator species x predator size x prey size). use option kernel dependent predator/prey mass ratio appropriate. Using kernel dependent predator/prey mass ratio allows mizer use fast Fourier transform methods significantly reduce running time simulations. order predator species pred_kernel order species params dataframe params object. supply named array function check order warn different.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setParams.html","id":"setting-search-volume","dir":"Reference","previous_headings":"","what":"Setting search volume","title":"Set or change any model parameters — setParams","text":"search volume \\(\\gamma_i(w)\\) individual species \\(\\) weight \\(w\\) multiplies predation kernel calculating encounter rate getEncounter() predation rate getPredRate(). name \"search volume\" bit misleading, \\(\\gamma_i(w)\\) units volume. simply parameter determines rate predation. units depend choice, see section \"Units mizer\". chosen work total abundances, rate units 1/year. chosen work abundances per m^2 units m^2/year. chosen work abundances per m^3 units m^3/year. search_vol argument supplied, search volume set $$\\gamma_i(w) = \\gamma_i w^q_i.$$ values \\(\\gamma_i\\) (search volume 1g) \\(q_i\\) (allometric exponent search volume) taken gamma q columns species parameter dataframe. gamma column supplied species parameter dataframe, default calculated get_gamma_default() function. Note predators size \\(w = 1\\) gram value species parameter \\(\\gamma_i\\) value search volume \\(\\gamma_i(w)\\).","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setParams.html","id":"setting-maximum-intake-rate","dir":"Reference","previous_headings":"","what":"Setting maximum intake rate","title":"Set or change any model parameters — setParams","text":"maximum intake rate \\(h_i(w)\\) individual species \\(\\) weight \\(w\\) determines feeding level, calculated getFeedingLevel(). measured grams/year. intake_max argument supplied, maximum intake rate set $$h_i(w) = h_i w^{n_i}.$$ values \\(h_i\\) (maximum intake rate individual size 1 gram) \\(n_i\\) (allometric exponent intake rate) taken h n columns species parameter dataframe. h column supplied species parameter dataframe, calculated get_h_default() function, using f0 k_vb column, supplied. \\(h_i\\) set Inf, fish species consume encountered food.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setParams.html","id":"setting-metabolic-rate","dir":"Reference","previous_headings":"","what":"Setting metabolic rate","title":"Set or change any model parameters — setParams","text":"metabolic rate subtracted energy income rate calculate rate energy available growth reproduction, see getEReproAndGrowth(). measured grams/year. metab argument supplied, species metabolic rate \\(k(w)\\) individual size \\(w\\) set $$k(w) = k_s w^p + k w,$$ \\(k_s w^p\\) represents rate standard metabolism \\(k w\\) rate energy expended activity movement. values \\(k_s\\), \\(p\\) \\(k\\) taken ks, p k columns species parameter dataframe. parameters supplied, defaults \\(k = 0\\), \\(p = n\\) $$k_s = f_c h \\alpha w_{mat}^{n-p},$$ \\(f_c\\) critical feeding level taken fc column species parameter data frame. critical feeding level specified, default \\(f_c = 0.2\\) used.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setParams.html","id":"setting-external-mortality-rate","dir":"Reference","previous_headings":"","what":"Setting external mortality rate","title":"Set or change any model parameters — setParams","text":"external mortality mortality due fishing predation predators included model. external mortality due predation predators explicitly included model (e.g. mammals seabirds) due causes like illness. rate units 1/year. ext_mort argument allows specify external mortality rate depends species body size. can see example Examples section help page setExtMort(). ext_mort argument supplied, external mortality assumed depend species, size individual: \\(\\mu_{ext.}(w) = z_{0.}\\). value constant \\(z_0\\) species taken z0 column species parameter data frame, column exists. Otherwise calculated $$z_{0.} = {\\tt z0pre}_i\\, w_{inf}^{\\tt z0exp}.$$","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setParams.html","id":"setting-reproduction","dir":"Reference","previous_headings":"","what":"Setting reproduction","title":"Set or change any model parameters — setParams","text":"species size, proportion \\(\\psi\\) available energy invested reproduction product two factors: proportion maturity individuals mature proportion repro_prop energy available mature individual invested reproduction.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setParams.html","id":"maturity-ogive","dir":"Reference","previous_headings":"","what":"Maturity ogive","title":"Set or change any model parameters — setParams","text":"proportion individuals mature supplied via maturity argument , set sigmoidal maturity ogive changes 0 1 around maturity size: $${\\tt maturity}(w) = \\left[1+\\left(\\frac{w}{w_{mat}}\\right)^{-U}\\right]^{-1}.$$ (avoid clutter, showing species index equations, although species maturity ogive.) maturity weights taken w_mat column species_params data frame. missing maturity weights set 1/4 asymptotic weight w_inf column. exponent \\(U\\) determines steepness maturity ogive. default chosen \\(U = 10\\), however can overridden including column w_mat25 species parameter dataframe specifies weight 25% individuals mature, sets \\(U = \\log(3) / \\log(w_{mat} / w_{25}).\\) sigmoidal function given strictly reach 1 asymptotically. Mizer instead sets function equal 1 already species' maximum size, taken compulsory w_inf column species parameter data frame. Also, computational simplicity, proportion smaller 1e-8 set 0.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setParams.html","id":"investment-into-reproduction","dir":"Reference","previous_headings":"","what":"Investment into reproduction","title":"Set or change any model parameters — setParams","text":"energy available mature individual invested reproduction supplied via repro_prop argument, set allometric form $${\\tt repro\\_prop}(w) = \\left(\\frac{w}{w_{inf}}\\right)^{m-n}.$$ \\(n\\) scaling exponent energy income rate. Hence exponent \\(m\\) determines scaling investment reproduction mature individuals. default chosen \\(m = 1\\) rate energy invested reproduction scales linearly size. default can overridden including column m species parameter dataframe. asymptotic sizes taken compulsory w_inf column species parameter data frame. total proportion energy invested reproduction individual size \\(w\\) $$\\psi(w) = {\\tt maturity}(w){\\tt repro\\_prop}(w)$$","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setParams.html","id":"reproductive-efficiency","dir":"Reference","previous_headings":"","what":"Reproductive efficiency","title":"Set or change any model parameters — setParams","text":"reproductive efficiency \\(\\epsilon\\), .e., proportion energy allocated reproduction results egg biomass, set erepro column species_params data frame. provided, default set 1 (want override). offspring biomass divided egg biomass gives rate egg production, returned getRDI(): $$R_{di} = \\frac{\\epsilon}{2 w_{min}} \\int N(w)  E_r(w) \\psi(w) \\, dw$$","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setParams.html","id":"density-dependence","dir":"Reference","previous_headings":"","what":"Density dependence","title":"Set or change any model parameters — setParams","text":"stock-recruitment relationship emergent phenomenon mizer, several sources density dependence. Firstly, amount energy invested reproduction depends energy income spawners, density-dependent due competition prey. Secondly, proportion larvae grow recruitment size depends larval mortality, depends density predators, larval growth rate, depends density prey. Finally, encode density dependence stock-recruitment relationship already included two sources density dependence, mizer puts density-independent rate egg production density-dependence function. result returned getRDD(). name density-dependence function specified RDD argument. default Beverton-Holt function BevertonHoltRDD(), requires R_max column species_params data frame giving maximum egg production rate. column exist, initialised Inf, leading density-dependence. functions provided mizer RickerRDD() SheperdRDD() can easily use models writing functions.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setParams.html","id":"setting-fishing","dir":"Reference","previous_headings":"","what":"Setting fishing","title":"Set or change any model parameters — setParams","text":"Gears mizer, fishing mortality imposed species fishing gears. total per-capita fishing mortality (1/year) obtained summing mortality gears, $$\\mu_{f.}(w) = \\sum_g F_{g,}(w),$$ fishing mortality \\(F_{g,}(w)\\) imposed gear \\(g\\) species \\(\\) size \\(w\\) calculated : $$F_{g,}(w) = S_{g,}(w) Q_{g,} E_{g},$$ \\(S\\) selectivity species, gear size, \\(Q\\) catchability species gear \\(E\\) fishing effort gear. Selectivity selectivity size gear species saved three dimensional array (gear x species x size). entry range 0 (gear selecting species size) 1 (gear selecting individuals species size). three dimensional array can specified explicitly via selectivity argument, usually mizer calculates gear_params slot MizerParams object. allow calculation selectivity array, gear_params slot must data frame one row gear-species combination. example gear can select three species, gear contributes three rows gear_params data frame, one species can select. data frame must columns gear, holding name gear, species, holding name species, sel_func, holding name function calculates selectivity curve. selectivity functions included package: knife_edge(), sigmoid_length(), double_sigmoid_length(), sigmoid_weight(). Users able write size-based selectivity function. first argument function must w function must return vector selectivity (0 1) size. selectivity function may parameters. Values parameters must included columns gear parameters data.frame. names columns must exactly match names corresponding arguments selectivity function. example, default selectivity function knife_edge() sudden change selectivity 0 1 certain size. help page can see knife_edge() function arguments w knife_edge_size. first argument, w, size (function calculates selectivity size). selectivity functions must w first argument. values arguments must found gear parameters data.frame. knife_edge() function knife_edge_size column. knife_edge() default selectivity function, knife_edge_size argument default value = w_mat. case species selected one gear, columns gear_params data frame can alternatively provided columns species_params data frame, convenient user set . Mizer copy columns create gear_params data frame creates MizerParams object. However changing columns species parameter data frame later update gear_params data frame. Catchability Catchability used additional factor make link gear selectivity, fishing effort fishing mortality. example, can set effort 1 gives desired fishing mortality. way effort can specified relative 'base effort', e.g. effort particular year. Catchability stored two dimensional array (gear x species). can either provided explicitly via catchability argument, information can provided via catchability column gear_params data frame. case species selected single gear, catchability column can also provided species_params data frame. Mizer copy gear_params data frame MizerParams object created. Effort initial fishing effort stored MizerParams object. supplied, set zero. initial effort can overruled simulation run project(), also possible specify effort varies time.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setParams.html","id":"setting-resource-dynamics","dir":"Reference","previous_headings":"","what":"Setting resource dynamics","title":"Set or change any model parameters — setParams","text":"default, mizer uses semichemostat model describe resource dynamics size class independently. semichemostat dynamics implemented function resource_semichemostat(). can change resource dynamics writing function, modelled resource_semichemostat(), passing name function resource_dynamics argument. resource_rate argument vector specifying intrinsic resource growth rate size class. supplied, intrinsic growth rate \\(r(w)\\) size \\(w\\) set $$r(w) = r_{pp}\\, w^{n-1}.$$ values \\(r_{pp}\\) \\(n\\) taken r_pp n arguments. resource_capacity argument vector specifying intrinsic resource carrying capacity size class. supplied, intrinsic carrying capacity \\(c(w)\\) size \\(w\\) set $$c(w) = \\kappa\\, w^{-\\lambda}$$ \\(w\\) less w_pp_cutoff zero larger sizes. values \\(\\kappa\\) \\(\\lambda\\) taken kappa lambda arguments.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/setPredKernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Set predation kernel — setPredKernel","title":"Set predation kernel — setPredKernel","text":"predation kernel determines distribution prey sizes predator feeds . used getEncounter() calculating rate food encountered getPredRate() calculating rate prey predated upon. predation kernel can function predator/prey size ratio can function predator size prey size separately. types can set function.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setPredKernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set predation kernel — setPredKernel","text":"","code":"setPredKernel(params, pred_kernel = NULL, reset = FALSE, ...)  getPredKernel(params)  pred_kernel(params)  pred_kernel(params) <- value"},{"path":"https://sizespectrum.org/mizer/dev/reference/setPredKernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set predation kernel — setPredKernel","text":"params MizerParams object pred_kernel Optional. array (species x predator size x prey size) holds predation coefficient predator size prey size. supplied, default set described section \"Setting predation kernel\". reset set TRUE, predation kernel reset value calculated species parameters, even previously overwritten custom value. set FALSE (default) recalculation species parameters take place custom value set. ... Unused value pred_kernel","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setPredKernel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set predation kernel — setPredKernel","text":"setPredKernel(): MizerParams object updated predation kernel. getPredKernel() equivalently pred_kernel(): array (predator species x predator_size x prey_size)","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setPredKernel.html","id":"setting-predation-kernel","dir":"Reference","previous_headings":"","what":"Setting predation kernel","title":"Set predation kernel — setPredKernel","text":"Kernel dependent predator prey size ratio pred_kernel argument supplied, function sets predation kernel depends ratio predator mass prey mass, two masses independently. shape kernel determined pred_kernel_type column species_params. default pred_kernel_type \"lognormal\". call function lognormal_pred_kernel() calculate predation kernel. alternative pred_kernel type \"box\", implemented function box_pred_kernel(), \"power_law\", implemented function power_law_pred_kernel(). functions require certain species parameters species_params data frame. lognormal kernel beta sigma, box kernel ppmr_min ppmr_max. explained help pages kernel functions. Except beta sigma, defaults set parameters. missing species_params data frame mizer issue error message. can use string pred_kernel_type. example choose \"\" need define function my_pred_kernel can model existing functions like lognormal_pred_kernel(). using kernel depends predator/prey size ratio , mizer need store entire three dimensional array MizerParams object. array can big large number size bins. Instead, mizer needs store two two-dimensional arrays hold Fourier transforms feeding kernel function allow encounter rate predation rate calculated efficiently. However, need full three-dimensional array can calculate getPredKernel() function. Kernel dependent predator prey size want work feeding kernel depends predator mass prey mass independently, can specify full feeding kernel three-dimensional array (predator species x predator size x prey size). use option kernel dependent predator/prey mass ratio appropriate. Using kernel dependent predator/prey mass ratio allows mizer use fast Fourier transform methods significantly reduce running time simulations. order predator species pred_kernel order species params dataframe params object. supply named array function check order warn different.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/setPredKernel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set predation kernel — setPredKernel","text":"","code":"if (FALSE) { ## Set up a MizerParams object params <-  NS_params  ## If you change predation kernel parameters after setting up a model,  #  this will be used to recalculate the kernel species_params(params)[\"Cod\", \"beta\"] <- 200  ## You can change to a different predation kernel type species_params(params)$ppmr_max <- 4000 species_params(params)$ppmr_min <- 200 species_params(params)$pred_kernel_type <- \"box\" plot(w_full(params), getPredKernel(params)[\"Cod\", 100, ], type=\"l\", log=\"x\")  ## If you need a kernel that depends also on prey size you need to define # it yourself. pred_kernel <- getPredKernel(params) pred_kernel[\"Herring\", , ] <- sweep(pred_kernel[\"Herring\", , ], 2,                                      params@w_full, \"*\") params<- setPredKernel(params, pred_kernel = pred_kernel) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/setRateFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Set own rate function to replace mizer rate function — setRateFunction","title":"Set own rate function to replace mizer rate function — setRateFunction","text":"way mizer calculates fundamental rate entering model flexible enough (example need introduce time dependence) can write functions calculating rate use setRateFunction() register mizer.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setRateFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set own rate function to replace mizer rate function — setRateFunction","text":"","code":"setRateFunction(params, rate, fun)  getRateFunction(params, rate)  other_params(params)  other_params(params) <- value"},{"path":"https://sizespectrum.org/mizer/dev/reference/setRateFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set own rate function to replace mizer rate function — setRateFunction","text":"params MizerParams object rate Name rate new function set. fun Name function use calculate rate. value Values parameters","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setRateFunction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set own rate function to replace mizer rate function — setRateFunction","text":"setRateFunction(): updated MizerParams object getRateFunction(): name registered rate function requested rate, list rate functions called without rate argument. other_params(): named list parameters set values.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setRateFunction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set own rate function to replace mizer rate function — setRateFunction","text":"time step simulation project() function, mizer needs calculate instantaneous values various rates. default calls mizerRates() function creates list following components: encounter mizerEncounter() feeding_level mizerFeedingLevel() pred_rate mizerPredRate() pred_mort mizerPredMort() f_mort mizerFMort() mort mizerMort() resource_mort mizerResourceMort() e mizerEReproAndGrowth() e_repro mizerERepro() e_growth mizerEGrowth() rdi mizerRDI() rdd BevertonHoltRDD() can substitute function. example written function calculating total mortality rate called myMort mizer model stored MizerParams object called params want run new mortality rate, call   general want replace function mizerSomeRateFunc() function myVersionOfThis() call   extreme cases may need swap entire mizerRates() function function called myRates(). can   new rate functions may need model parameters. can store other_params(params). example   Note rate functions need defined global environment package. defined within function mizer find .","code":"params <- setRateFunction(params, \"Mort\", \"myMort\") params <- setRateFunction(params, \"SomeRateFunc\", \"myVersionOfThis\") params <- setRateFunction(params, \"Rates\", \"myRates\") other_params(params)$my_param <- 42"},{"path":"https://sizespectrum.org/mizer/dev/reference/setReproduction.html","id":null,"dir":"Reference","previous_headings":"","what":"Set reproduction parameters — setReproduction","title":"Set reproduction parameters — setReproduction","text":"Sets proportion total energy available reproduction growth invested reproduction function size individual sets additional density dependence.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setReproduction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set reproduction parameters — setReproduction","text":"","code":"setReproduction(   params,   maturity = NULL,   repro_prop = NULL,   reset = FALSE,   RDD = NULL,   ... )  getMaturityProportion(params)  maturity(params)  maturity(params) <- value  getReproductionProportion(params)  repro_prop(params)  repro_prop(params) <- value"},{"path":"https://sizespectrum.org/mizer/dev/reference/setReproduction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set reproduction parameters — setReproduction","text":"params MizerParams object maturity Optional. array (species x size) holds proportion individuals species size mature. supplied, default set described section \"Setting reproduction\". repro_prop Optional. array (species x size) holds proportion consumed energy mature individual allocates reproduction species size. supplied, default set described section \"Setting reproduction\". reset set TRUE, maturity repro_prop reset value calculated species parameters, even previously overwritten custom values. set FALSE (default) recalculation species parameters take place custom values set. RDD name function calculating density-dependent reproduction rate density-independent rate. Defaults \"BevertonHoltRDD()\". ... Unused value .","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setReproduction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set reproduction parameters — setReproduction","text":"setReproduction(): MizerParams object updated reproduction parameters. getMaturityProportion() equivalently `maturity(): array (species x size) holds proportion individuals species size mature. getReproductionProportion() equivalently repro_prop(): array (species x size) holds proportion consumed energy mature individual allocates reproduction species size. sizes maturity proportion zero, also reproduction proportion returned zero.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setReproduction.html","id":"setting-reproduction","dir":"Reference","previous_headings":"","what":"Setting reproduction","title":"Set reproduction parameters — setReproduction","text":"species size, proportion \\(\\psi\\) available energy invested reproduction product two factors: proportion maturity individuals mature proportion repro_prop energy available mature individual invested reproduction.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setReproduction.html","id":"maturity-ogive","dir":"Reference","previous_headings":"","what":"Maturity ogive","title":"Set reproduction parameters — setReproduction","text":"proportion individuals mature supplied via maturity argument , set sigmoidal maturity ogive changes 0 1 around maturity size: $${\\tt maturity}(w) = \\left[1+\\left(\\frac{w}{w_{mat}}\\right)^{-U}\\right]^{-1}.$$ (avoid clutter, showing species index equations, although species maturity ogive.) maturity weights taken w_mat column species_params data frame. missing maturity weights set 1/4 asymptotic weight w_inf column. exponent \\(U\\) determines steepness maturity ogive. default chosen \\(U = 10\\), however can overridden including column w_mat25 species parameter dataframe specifies weight 25% individuals mature, sets \\(U = \\log(3) / \\log(w_{mat} / w_{25}).\\) sigmoidal function given strictly reach 1 asymptotically. Mizer instead sets function equal 1 already species' maximum size, taken compulsory w_inf column species parameter data frame. Also, computational simplicity, proportion smaller 1e-8 set 0.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setReproduction.html","id":"investment-into-reproduction","dir":"Reference","previous_headings":"","what":"Investment into reproduction","title":"Set reproduction parameters — setReproduction","text":"energy available mature individual invested reproduction supplied via repro_prop argument, set allometric form $${\\tt repro\\_prop}(w) = \\left(\\frac{w}{w_{inf}}\\right)^{m-n}.$$ \\(n\\) scaling exponent energy income rate. Hence exponent \\(m\\) determines scaling investment reproduction mature individuals. default chosen \\(m = 1\\) rate energy invested reproduction scales linearly size. default can overridden including column m species parameter dataframe. asymptotic sizes taken compulsory w_inf column species parameter data frame. total proportion energy invested reproduction individual size \\(w\\) $$\\psi(w) = {\\tt maturity}(w){\\tt repro\\_prop}(w)$$","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setReproduction.html","id":"reproductive-efficiency","dir":"Reference","previous_headings":"","what":"Reproductive efficiency","title":"Set reproduction parameters — setReproduction","text":"reproductive efficiency \\(\\epsilon\\), .e., proportion energy allocated reproduction results egg biomass, set erepro column species_params data frame. provided, default set 1 (want override). offspring biomass divided egg biomass gives rate egg production, returned getRDI(): $$R_{di} = \\frac{\\epsilon}{2 w_{min}} \\int N(w)  E_r(w) \\psi(w) \\, dw$$","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setReproduction.html","id":"density-dependence","dir":"Reference","previous_headings":"","what":"Density dependence","title":"Set reproduction parameters — setReproduction","text":"stock-recruitment relationship emergent phenomenon mizer, several sources density dependence. Firstly, amount energy invested reproduction depends energy income spawners, density-dependent due competition prey. Secondly, proportion larvae grow recruitment size depends larval mortality, depends density predators, larval growth rate, depends density prey. Finally, encode density dependence stock-recruitment relationship already included two sources density dependence, mizer puts density-independent rate egg production density-dependence function. result returned getRDD(). name density-dependence function specified RDD argument. default Beverton-Holt function BevertonHoltRDD(), requires R_max column species_params data frame giving maximum egg production rate. column exist, initialised Inf, leading density-dependence. functions provided mizer RickerRDD() SheperdRDD() can easily use models writing functions.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/setReproduction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set reproduction parameters — setReproduction","text":"","code":"# \\donttest{ # Plot maturity and reproduction ogives for Cod in North Sea model maturity <- getMaturityProportion(NS_params)[\"Cod\", ] repro_prop <- getReproductionProportion(NS_params)[\"Cod\", ] df <- data.frame(Size = w(NS_params),                   Reproduction = repro_prop,                   Maturity = maturity,                   Total = maturity * repro_prop) dff <- melt(df, id.vars = \"Size\",              variable.name = \"Type\",              value.name = \"Proportion\") library(ggplot2) ggplot(dff) + geom_line(aes(x = Size, y = Proportion, colour = Type))  # }"},{"path":"https://sizespectrum.org/mizer/dev/reference/setResource.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up resource — setResource","title":"Set up resource — setResource","text":"Sets intrinsic resource growth rate intrinsic resource carrying capacity well name function used simulate resource dynamics","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setResource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up resource — setResource","text":"","code":"setResource(   params,   resource_rate = NULL,   resource_capacity = NULL,   reset = FALSE,   r_pp = resource_params(params)[[\"r_pp\"]],   kappa = resource_params(params)[[\"kappa\"]],   lambda = resource_params(params)[[\"lambda\"]],   n = resource_params(params)[[\"n\"]],   w_pp_cutoff = resource_params(params)[[\"w_pp_cutoff\"]],   resource_dynamics = NULL,   ... )  getResourceRate(params)  resource_rate(params)  resource_rate(params) <- value  getResourceCapacity(params)  resource_capacity(params)  resource_capacity(params) <- value  getResourceDynamics(params)  resource_dynamics(params)  resource_dynamics(params) <- value"},{"path":"https://sizespectrum.org/mizer/dev/reference/setResource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up resource — setResource","text":"params MizerParams object resource_rate Optional. Vector resource intrinsic birth rates resource_capacity Optional. Vector resource intrinsic carrying capacity reset set TRUE, resource_rate resource_capacity reset value calculated resource parameters, even previously overwritten custom values. set FALSE (default) recalculation resource parameters take place custom values set. r_pp Coefficient intrinsic resource birth rate kappa Coefficient intrinsic resource carrying capacity lambda Scaling exponent intrinsic resource carrying capacity n Allometric growth exponent resource w_pp_cutoff upper cut size resource spectrum.  carrying capacity set 0 size. Default 10 g. resource_dynamics Optional. Name function determines resource dynamics calculating resource spectrum next time step current state. need specify want use default resource_semichemostat(). ... Unused value .","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setResource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up resource — setResource","text":"setResource: MizerParams object updated resource parameters","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setResource.html","id":"setting-resource-dynamics","dir":"Reference","previous_headings":"","what":"Setting resource dynamics","title":"Set up resource — setResource","text":"default, mizer uses semichemostat model describe resource dynamics size class independently. semichemostat dynamics implemented function resource_semichemostat(). can change resource dynamics writing function, modelled resource_semichemostat(), passing name function resource_dynamics argument. resource_rate argument vector specifying intrinsic resource growth rate size class. supplied, intrinsic growth rate \\(r(w)\\) size \\(w\\) set $$r(w) = r_{pp}\\, w^{n-1}.$$ values \\(r_{pp}\\) \\(n\\) taken r_pp n arguments. resource_capacity argument vector specifying intrinsic resource carrying capacity size class. supplied, intrinsic carrying capacity \\(c(w)\\) size \\(w\\) set $$c(w) = \\kappa\\, w^{-\\lambda}$$ \\(w\\) less w_pp_cutoff zero larger sizes. values \\(\\kappa\\) \\(\\lambda\\) taken kappa lambda arguments.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/setRmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Alias for setBevertonHolt() — setRmax","title":"Alias for setBevertonHolt() — setRmax","text":"alias provided backward compatibility mizer version <= 2.0.4","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setRmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alias for setBevertonHolt() — setRmax","text":"","code":"setRmax(params, R_factor = deprecated(), erepro, R_max, reproduction_level)"},{"path":"https://sizespectrum.org/mizer/dev/reference/setRmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alias for setBevertonHolt() — setRmax","text":"params MizerParams object R_factor Use reproduction_level = 1 / R_factor instead. erepro Reproductive efficiency species. See details. R_max Maximum reproduction rate. See details. reproduction_level Sets R_max reproduction rate initial state R_max * reproduction_level.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setRmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alias for setBevertonHolt() — setRmax","text":"MizerParams object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setRmax.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Alias for setBevertonHolt() — setRmax","text":"Beverton-Holt density dependence relation energy invested reproduction number eggs hatched determined two parameters: reproductive efficiency erepro maximum reproduction rate R_max. maximum imposed reproduction rate (\\(R_{max} = \\infty\\)) resulting density-independent reproduction rate \\(R_{di}\\) proportional total rate \\(E_R\\) energy invested reproduction, $$R_{di} = \\frac{\\rm{erepro}}{2 w_{min}} E_R,$$ proportionality factor given reproductive efficiency erepro divided egg size w_min convert energy egg number divided 2 account two sexes. Imposing finite maximum reproduction rate \\(R_{max}\\) leads non-linear relationship energy invested eggs hatched. density-dependent reproduction rate \\(R_{dd}\\) given $$R_{dd} = R_{di} \\frac{R_{max}}{R_{di} + R_{max}}.$$ (quantities equations species-specific dropped species index simplicity.) following plot illustrates Beverton-Holt density dependence reproduction rate two different choices parameters. plot shows given energy \\(E_R\\) invested reproduction can lead reproduction rate \\(R_{dd}\\) different choices parameters R_max erepro. R_max determines asymptote curve erepro initial slope. higher R_max coupled lower erepro (black curves) can give value lower R_max coupled higher erepro (blue curves). given initial state MizerParams object params one can calculate energy \\(E_R\\) invested reproduction mature individuals reproduction rate \\(R_{dd}\\) required keep egg abundance constant. two values determine location black dot graph. need one parameter select one curve family Beverton-Holt curves going point. parameter can erepro R_max. Instead R_max can alternatively specify reproduction_level ratio density-dependent reproduction rate \\(R_{dd}\\) maximal reproduction rate  \\(R_{max}\\). provide value reproduction parameter arguments, erepro set value current species parameter data frame. provide one reproduction parameters, can either vector one value species, named vector names determine species affected, single unnamed value used species. species given value NA remain unaffected. values R_max must larger \\(R_{dd}\\) can range Inf. smaller value requested warning issued value increased value required reproduction level 0.99. values reproduction_level must positive less 1. values erepro must large enough allow required reproduction rate. smaller value requested warning issued value increased smallest possible value. values erepro also smaller 1 physiologically sensible, enforced function. can seen graph , choosing lower value R_max higher value erepro means near steady state reproduction less sensitive change energy invested reproduction hence less sensitive changes spawning stock biomass energy income. result species also less sensitive fishing, leading higher F_MSY.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setRmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Alias for setBevertonHolt() — setRmax","text":"","code":"params <- NS_params species_params(params)$erepro #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 # Attempting to set the same erepro for all species params <- setBevertonHolt(params, erepro = 0.1) #> Warning: For the following species `erepro` has been increased to the smallest possible value: erepro[Gurnard] = 0.558; erepro[Plaice] = 0.921 t(species_params(params)[, c(\"erepro\", \"R_max\")]) #>               Sprat      Sandeel       N.pout      Herring          Dab #> erepro 1.000000e-01 1.000000e-01 1.000000e-01 1.000000e-01 1.000000e-01 #> R_max  8.071481e+11 4.112049e+11 3.472063e+13 1.197577e+12 1.167176e+10 #>            Whiting         Sole   Gurnard    Plaice      Haddock          Cod #> erepro 1.00000e-01 1.000000e-01 0.5582259 0.9212325 1.000000e-01          0.1 #> R_max  6.22081e+11 4.007876e+10       Inf       Inf 3.929056e+12 8280106764.0 #>              Saithe #> erepro 1.000000e-01 #> R_max  1.145835e+11 # Setting erepro for some species params <- setBevertonHolt(params, erepro = c(\"Gurnard\" = 0.6, \"Plaice\" = 0.95)) t(species_params(params)[, c(\"erepro\", \"R_max\")]) #>               Sprat      Sandeel       N.pout      Herring          Dab #> erepro 1.000000e-01 1.000000e-01 1.000000e-01 1.000000e-01 1.000000e-01 #> R_max  8.071481e+11 4.112049e+11 3.472063e+13 1.197577e+12 1.167176e+10 #>            Whiting         Sole      Gurnard       Plaice      Haddock #> erepro 1.00000e-01 1.000000e-01 6.000000e-01 9.500000e-01 1.000000e-01 #> R_max  6.22081e+11 4.007876e+10 1.047481e+13 1.082568e+15 3.929056e+12 #>                 Cod       Saithe #> erepro          0.1 1.000000e-01 #> R_max  8280106764.0 1.145835e+11 # Setting R_max R_max <- 1e17 * species_params(params)$w_inf^-1 params <- setBevertonHolt(NS_params, R_max = R_max) #> Warning: The following species require an unrealistic reproductive efficiency greater than 1: Plaice t(species_params(params)[, c(\"erepro\", \"R_max\")]) #>               Sprat      Sandeel       N.pout      Herring          Dab #> erepro 9.274305e-03 1.297184e-04 7.257409e-02 8.045063e-03 4.224791e-03 #> R_max  3.030303e+15 2.777778e+15 1.000000e+15 2.994012e+14 3.086420e+14 #>             Whiting         Sole      Gurnard       Plaice      Haddock #> erepro 1.292557e-02 3.571380e-03 5.609587e-01 3.773957e+01 6.020565e-02 #> R_max  8.389262e+13 1.154734e+14 1.497006e+14 3.360215e+13 2.316692e+13 #>                 Cod       Saithe #> erepro 6.375069e-05 2.433424e-03 #> R_max  2.509328e+12 2.521521e+12 # Setting reproduction_level params <- setBevertonHolt(params, reproduction_level = 0.3) #> Warning: The following species require an unrealistic reproductive efficiency greater than 1: Plaice t(species_params(params)[, c(\"erepro\", \"R_max\")]) #>               Sprat      Sandeel       N.pout      Herring          Dab #> erepro 1.324581e-02 1.852847e-04 1.026645e-01 1.145066e-02 6.035197e-03 #> R_max  2.441029e+12 1.368905e+12 3.256200e+13 3.671952e+12 3.726224e+10 #>             Whiting         Sole      Gurnard       Plaice      Haddock #> erepro 1.834577e-02 5.100263e-03 7.974655e-01 1.316046e+00 7.954325e-02 #> R_max  1.807310e+12 1.288262e+11 2.430980e+12 1.092730e+14 5.804489e+12 #>                 Cod       Saithe #> erepro 9.077210e-05 3.322021e-03 #> R_max  2.758282e+10 3.730633e+11"},{"path":"https://sizespectrum.org/mizer/dev/reference/setSearchVolume.html","id":null,"dir":"Reference","previous_headings":"","what":"Set search volume — setSearchVolume","title":"Set search volume — setSearchVolume","text":"Set search volume","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setSearchVolume.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set search volume — setSearchVolume","text":"","code":"setSearchVolume(params, search_vol = NULL, reset = FALSE, ...)  getSearchVolume(params)  search_vol(params)  search_vol(params) <- value"},{"path":"https://sizespectrum.org/mizer/dev/reference/setSearchVolume.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set search volume — setSearchVolume","text":"params MizerParams search_vol Optional. array (species x size) holding search volume species size. supplied, default set described section \"Setting search volume\". reset set TRUE, search volume reset value calculated species parameters, even previously overwritten custom value. set FALSE (default) recalculation species parameters take place custom value set. ... Unused value search_vol","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setSearchVolume.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set search volume — setSearchVolume","text":"setSearchVolume(): MizerParams object updated search volume. getSearchVolume() equivalently search_vol(): array (species x size) holding search volume","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/setSearchVolume.html","id":"setting-search-volume","dir":"Reference","previous_headings":"","what":"Setting search volume","title":"Set search volume — setSearchVolume","text":"search volume \\(\\gamma_i(w)\\) individual species \\(\\) weight \\(w\\) multiplies predation kernel calculating encounter rate getEncounter() predation rate getPredRate(). name \"search volume\" bit misleading, \\(\\gamma_i(w)\\) units volume. simply parameter determines rate predation. units depend choice, see section \"Units mizer\". chosen work total abundances, rate units 1/year. chosen work abundances per m^2 units m^2/year. chosen work abundances per m^3 units m^3/year. search_vol argument supplied, search volume set $$\\gamma_i(w) = \\gamma_i w^q_i.$$ values \\(\\gamma_i\\) (search volume 1g) \\(q_i\\) (allometric exponent search volume) taken gamma q columns species parameter dataframe. gamma column supplied species parameter dataframe, default calculated get_gamma_default() function. Note predators size \\(w = 1\\) gram value species parameter \\(\\gamma_i\\) value search volume \\(\\gamma_i(w)\\).","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/set_community_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated function for setting up parameters for a community-type model — set_community_model","title":"Deprecated function for setting up parameters for a community-type model — set_community_model","text":"function deprecated favour function newCommunityParams() sets better default values.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/set_community_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated function for setting up parameters for a community-type model — set_community_model","text":"","code":"set_community_model(   max_w = 1e+06,   min_w = 0.001,   min_w_pp = 1e-10,   z0 = 0.1,   alpha = 0.2,   h = 10,   beta = 100,   sigma = 2,   q = 0.8,   n = 2/3,   kappa = 1000,   lambda = 2 + q - n,   f0 = 0.7,   r_pp = 10,   gamma = NA,   knife_edge_size = 1000,   knife_is_min = TRUE,   recruitment = kappa * min_w^-lambda,   rec_mult = 1,   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/set_community_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated function for setting up parameters for a community-type model — set_community_model","text":"max_w maximum size community. w_inf species used represent community set value. default value 1e6. min_w minimum size community. Default value 1e-3. min_w_pp smallest size resource spectrum. z0 background mortality community. Default value 0.1. alpha assimilation efficiency community. Default value 0.2 h maximum food intake rate. Default value 10. beta preferred predator prey mass ratio. Default value 100. sigma width prey preference. Default value 2.0. q search volume exponent. Default value 0.8. n scaling intake. Default value 2/3. kappa carrying capacity resource spectrum. Default value 1000. lambda exponent resource spectrum. Default value 2 + q - n. f0 average feeding level individuals feed power-law spectrum. value used calculate search rate parameter gamma (see package vignette). Default value 0.7. r_pp Growth rate parameter resource spectrum. Default value 10. gamma Volumetric search rate. Estimated using h, f0 kappa supplied. knife_edge_size size edge knife-selectivity function. Default value 1000. knife_is_min knife-edge selectivity function selecting (TRUE) (FALSE) edge. Default TRUE. recruitment constant recruitment smallest size class community spectrum. set community spectrum continues resource spectrum. Default value = kappa * min_w^-lambda. rec_mult Additional multiplier constant recruitment. Default value 1. ... arguments pass MizerParams constructor.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/set_community_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated function for setting up parameters for a community-type model — set_community_model","text":"object type MizerParams","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/set_community_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deprecated function for setting up parameters for a community-type model — set_community_model","text":"functions creates MizerParams object community-type models can easily set run. community model several features distinguish food-web type models. one 'species' resolved, .e. one 'species' used represent whole community. resource spectrum extends start community spectrum. Recruitment smallest size community spectrum constant set user. recruitment constant, proportion energy invested reproduction (slot psi returned MizerParams object) set 0. Standard metabolism turned (parameter ks set 0). Consequently, growth rate now determined solely assimilated food (see package vignette details). function many arguments, default values. main arguments users concerned z0, recruitment, alpha f0 determine average growth rate community. Fishing selectivity modelled knife-edge function one parameter, knife_edge_size, determines size species selected. resulting MizerParams object can projected forward using project() like MizerParams object. projecting community model may necessary keep small time step size dt around 0.1 avoid instabilities solver. can check numerical instabilities plotting biomass abundance time projection.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/set_community_model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Deprecated function for setting up parameters for a community-type model — set_community_model","text":"K. H. Andersen,J. E. Beyer P. Lundberg, 2009, Trophic individual efficiencies size-structured communities, Proceedings Royal Society, 276, 109-114","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/set_community_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deprecated function for setting up parameters for a community-type model — set_community_model","text":"","code":"if (FALSE) { params <- set_community_model(f0=0.7, z0=0.2, recruitment=3e7) # This is now achieved with params <- newCommunityParams(f0 = 0.7, z0 = 0.2) sim <- project(params, effort = 0, t_max = 100, dt=0.1) plotBiomass(sim) plotSpectra(sim) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/set_multispecies_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated obsolete function for setting up multispecies parameters — set_multispecies_model","title":"Deprecated obsolete function for setting up multispecies parameters — set_multispecies_model","text":"function deprecated favour function newMultispeciesParams() sets better default values.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/set_multispecies_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated obsolete function for setting up multispecies parameters — set_multispecies_model","text":"","code":"set_multispecies_model(   species_params,   interaction = matrix(1, nrow = nrow(species_params), ncol = nrow(species_params)),   min_w_pp = 1e-10,   min_w = 0.001,   max_w = max(species_params$w_inf) * 1.1,   no_w = 100,   n = 2/3,   q = 0.8,   f0 = 0.6,   kappa = 1e+11,   lambda = 2 + q - n,   r_pp = 10,   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/set_multispecies_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated obsolete function for setting up multispecies parameters — set_multispecies_model","text":"species_params data frame species-specific parameter values. interaction Optional interaction matrix species (predator species x prey species). default entries 1. See \"Setting interaction matrix\" section . min_w_pp smallest size resource spectrum. default set smallest value consumers can feed. min_w Sets size eggs species given w_min column species_params dataframe. max_w largest size consumer spectrum. default set largest w_inf specified species_params data frame. no_w number size bins consumer spectrum. n allometric growth exponent. can overruled individual species including n column species_params. q Allometric exponent search volume f0 Expected average feeding level. Used set gamma, coefficient search rate. Ignored gamma given explicitly. kappa Coefficient intrinsic resource carrying capacity lambda Scaling exponent intrinsic resource carrying capacity r_pp Coefficient intrinsic resource birth rate ... Unused","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/set_species_param_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a species parameter to a default value — set_species_param_default","title":"Set a species parameter to a default value — set_species_param_default","text":"species parameter yet exist species parameter data frame, create fill default. Otherwise use default fill NAs. Optionally gives message parameter already exist.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/set_species_param_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a species parameter to a default value — set_species_param_default","text":"","code":"set_species_param_default(object, parname, default, message = NULL)"},{"path":"https://sizespectrum.org/mizer/dev/reference/set_species_param_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a species parameter to a default value — set_species_param_default","text":"object Either MizerParams object species parameter data frame parname string name species parameter set default single default value vector one default value species message string message issued parameter already exist","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/set_species_param_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set a species parameter to a default value — set_species_param_default","text":"object updated column species params data frame.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/set_trait_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated function for setting up parameters for a trait-based model — set_trait_model","title":"Deprecated function for setting up parameters for a trait-based model — set_trait_model","text":"function deprecated favour function newTraitParams() sets better default values.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/set_trait_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated function for setting up parameters for a trait-based model — set_trait_model","text":"","code":"set_trait_model(   no_sp = 10,   min_w_inf = 10,   max_w_inf = 1e+05,   no_w = 100,   min_w = 0.001,   max_w = max_w_inf * 1.1,   min_w_pp = 1e-10,   w_pp_cutoff = 1,   k0 = 50,   n = 2/3,   p = 0.75,   q = 0.9,   eta = 0.25,   r_pp = 4,   kappa = 0.005,   lambda = 2 + q - n,   alpha = 0.6,   ks = 4,   z0pre = 0.6,   h = 30,   beta = 100,   sigma = 1.3,   f0 = 0.5,   gamma = NA,   knife_edge_size = 1000,   gear_names = \"knife_edge_gear\",   ... )"},{"path":"https://sizespectrum.org/mizer/dev/reference/set_trait_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated function for setting up parameters for a trait-based model — set_trait_model","text":"no_sp number species model. default value 10. species, longer takes run. min_w_inf asymptotic size smallest species community. max_w_inf asymptotic size largest species community. no_w number size bins community spectrum. min_w smallest size community spectrum. max_w Obsolete argument maximum size consumer spectrum set max_w_inf. min_w_pp Obsolete argument smallest resource size set smallest size consumers feed. w_pp_cutoff cut size resource spectrum. Default value 1. k0 Multiplier maximum recruitment. Default value 50. n Scaling intake. Default value 2/3. p Scaling standard metabolism. Default value 0.75. q Exponent search volume. Default value 0.9. eta Factor calculate w_mat asymptotic size. r_pp Growth rate parameter resource spectrum. Default value 4. kappa Coefficient abundance power law. Default value 0.005. lambda Exponent abundance power law. Default value (2+q-n). alpha assimilation efficiency community. default value 0.6 ks Standard metabolism coefficient. Default value 4. z0pre coefficient background mortality community. z0 = z0pre * w_inf ^ (n-1). default value 0.6. h Maximum food intake rate. Default value 30. beta Preferred predator prey mass ratio. Default value 100. sigma Width prey size preference. Default value 1.3. f0 Expected average feeding level. Used set gamma, factor search volume. default value 0.5. gamma Volumetric search rate. Estimated using h, f0 kappa supplied. knife_edge_size minimum size gear gears select species. Must length 1 no_sp. gear_names names fishing gears. character vector, length number species. Default 1 - no_sp. ... arguments pass MizerParams constructor.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/set_trait_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated function for setting up parameters for a trait-based model — set_trait_model","text":"object type MizerParams","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/set_trait_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deprecated function for setting up parameters for a trait-based model — set_trait_model","text":"functions creates MizerParams object trait-based-type models can easily set run. trait-based size spectrum model can derived simplification general size-based model used mizer. species-specific parameters species, except asymptotic size, considered important trait characterizing species. parameters related asymptotic size. example, size maturity given w_inf * eta, eta species. trait-based model number species important. applications trait-based model see Andersen & Pedersen (2010). See mizer vignette details examples trait-based model. function many arguments, default values. particular interest user number species model minimum maximum asymptotic sizes. asymptotic sizes species spread evenly logarithmic scale within range. stock recruitment relationship default Beverton-Holt style. maximum recruitment calculated using equilibrium theory (see Andersen & Pedersen, 2010) multiplier, k0. Users adjust k0 get spectra want. factor search volume, gamma, calculated using expected feeding level, f0. Fishing selectivity modelled knife-edge function one parameter, knife_edge_size, size species selected. species can either fished gear (knife_edge_size length 1) different gear (length knife_edge_size length number species order selectivity size asymptotic size). resulting MizerParams object can projected forward using project like MizerParams object. projecting community model may necessary reduce dt 0.1 avoid instabilities solver. can check plotting biomass abundance time projection.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/set_trait_model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Deprecated function for setting up parameters for a trait-based model — set_trait_model","text":"K. H. Andersen M. Pedersen, 2010, Damped trophic cascades driven fishing model marine ecosystems. Proceedings Royal Society V, Biological Sciences, 1682, 795-802.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/sigmoid_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Length based sigmoid selectivity function — sigmoid_length","title":"Length based sigmoid selectivity function — sigmoid_length","text":"sigmoid shaped selectivity function. Based two parameters l25 l50 determine length 25% 50% stock selected respectively. size-based model weight based, selectivity function length based, uses length-weight parameters b convert length weight.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/sigmoid_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Length based sigmoid selectivity function — sigmoid_length","text":"","code":"sigmoid_length(w, l25, l50, species_params, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/sigmoid_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Length based sigmoid selectivity function — sigmoid_length","text":"w size individual. l25 length gives selectivity 25%. l50 length gives selectivity 50%. species_params list species params current species. Used get length-weight parameters b ... Unused","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/sigmoid_weight.html","id":null,"dir":"Reference","previous_headings":"","what":"Weight based sigmoidal selectivity function — sigmoid_weight","title":"Weight based sigmoidal selectivity function — sigmoid_weight","text":"sigmoidal selectivity function 50% selectivity weight sigmoidal_weight width sigmoidal_sigma.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/sigmoid_weight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weight based sigmoidal selectivity function — sigmoid_weight","text":"","code":"sigmoid_weight(w, sigmoidal_weight, sigmoidal_sigma, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/sigmoid_weight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weight based sigmoidal selectivity function — sigmoid_weight","text":"w size individual. sigmoidal_weight weight knife-edge operates. sigmoidal_sigma width selection function ... Unused","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/species_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Species parameters — species_params","title":"Species parameters — species_params","text":"functions allow get set species parameters stored MizerParams object.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/species_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Species parameters — species_params","text":"","code":"species_params(params)  species_params(params) <- value"},{"path":"https://sizespectrum.org/mizer/dev/reference/species_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Species parameters — species_params","text":"params MizerParams object value data frame species parameters","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/species_params.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Species parameters — species_params","text":"species_params data frame holds species-specific parameters. data frame one row species one column species parameter. lot species parameters list , sensible default values. required columns species species name w_inf asymptotic size. However information values parameters include species_params data frame. species parameters used set size-dependent parameters used mizer model: gamma q used set search volume, see setSearchVolume(). h n used set maximum intake rate, see setMaxIntakeRate(). k, ks p used set activity basic metabolic rate, see setMetabolicRate(). z0 used set external mortality rate, see setExtMort(). w_mat, w_mat25, w_inf m used set allocation reproduction, see setReproduction(). pred_kernel_type specifies shape predation kernel. default \"lognormal\", options see \"Setting predation kernel\" section help setPredKernel(). beta sigma parameters lognormal predation kernel, see lognormal_pred_kernel(). parameters using predation kernel functions. change one species parameters already existing MizerParams object using species_params<-(), new value used update corresponding size-dependent rates automatically, unless set size-dependent rates manually, case corresponding species parameters ignored. species parameters used directly model rather used setting size-dependent parameters: alpha assimilation efficiency, proportion consumed biomass can used growth, metabolism reproduction, see help getEReproAndGrowth(). w_min egg size. interaction_resource sets interaction strength resource, see \"Predation encounter\" section help getEncounter(). erepro reproductive efficiency, proportion energy invested reproduction converted egg biomass, see getRDI(). Rmax parameter Beverton-Holt density dependence added reproduction, see setBevertonHolt(). parameters use density dependence functions, see \"Density dependence\" section help setReproduction(). Two parameters used functions need convert weight length: b parameters allometric weight-length relationship \\(w = l ^ b\\). species parameters specified user. missing, newMultispeciesParams() give default values, sometimes using species parameters. parameters used calculate default values parameters : k_vb t0 von Bertalanffy growth parameters used together length-weight relationship exponent b egg size w_min get default value coefficient maximum intake rate h, see get_h_default(). f0 feeding level used get default value coefficient search volume gamma, see get_gamma_default(). fc critical feeding level species can maintain . used get default value coefficient metabolic rate ks, see get_ks_default(). Note parameters ignored parameters allow defaults calculated instead set explicitly. Also, parameters used setting new model newMultispeciesParams(). Changing later effect default parameters recalculated. species parameters used tuning model observations: biomass_observed biomass_cutoff allow specify species total observed biomass cutoff size. used calibrateBiomass() matchBiomasses(). yield_observed allows specify species total annual fisheries yield. used calibrateYield() matchYields(). Finally two species parameters control way species represented plots: linecolour specifies colour can valid R colour value. linetype specifies line type (\"solid\", \"dashed\", \"dotted\", \"dotdash\", \"longdash\", \"twodash\" \"blank\") species-specific information related species fished specified gear parameter data frame, see gear_params(). However case species caught single gear, information can also optionally provided columns species_params data frame newMultispeciesParams() transfer gear_params data frame. However changing parameters later species parameter data frame effect. allowed include additional columns species_params data frame. simply ignored mizer stored MizerParams object, case code makes use .","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/steady.html","id":null,"dir":"Reference","previous_headings":"","what":"Set initial values to a steady state for the model — steady","title":"Set initial values to a steady state for the model — steady","text":"steady state found running dynamics keeping reproduction components constant size spectra longer change much (time t_max reached, earlier). reproduction parameters set values give level reproduction observed steady state.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/steady.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set initial values to a steady state for the model — steady","text":"","code":"steady(   params,   t_max = 100,   t_per = 1.5,   dt = 0.1,   tol = 0.1 * dt,   return_sim = FALSE,   preserve = c(\"reproduction_level\", \"erepro\", \"R_max\"),   progress_bar = TRUE )"},{"path":"https://sizespectrum.org/mizer/dev/reference/steady.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set initial values to a steady state for the model — steady","text":"params MizerParams object t_max maximum number years run simulation. Default 100. t_per simulation broken shorter runs t_per years, check convergence. Default value 1.5. chosen odd multiple timestep dt order able detect period 2 cycles. dt time step use project(). tol simulation stops relative change egg production RDI t_per years less tol every species. return_sim TRUE, function returns MizerSim object holding result simulation run. FALSE (default) function returns MizerParams object \"initial\" slots set steady state. preserve Specifies whether reproduction_level preserved (default) maximum reproduction rate R_max reproductive efficiency erepro. See setBevertonHolt() explanation reproduction_level. progress_bar shiny progress object implement progress bar shiny app. Default FALSE.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/steady.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set initial values to a steady state for the model — steady","text":"","code":"if (FALSE) { params <- newTraitParams() species_params(params)$gamma[5] <- 3000 params <- steady(params) plotSpectra(params) }"},{"path":"https://sizespectrum.org/mizer/dev/reference/summary-MizerParams-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize MizerParams object — summary,MizerParams-method","title":"Summarize MizerParams object — summary,MizerParams-method","text":"Outputs general summary structure content object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/summary-MizerParams-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize MizerParams object — summary,MizerParams-method","text":"","code":"# S4 method for MizerParams summary(object, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/summary-MizerParams-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize MizerParams object — summary,MizerParams-method","text":"object MizerParams object. ... arguments (currently used).","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/summary-MizerParams-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize MizerParams object — summary,MizerParams-method","text":"","code":"summary(NS_params) #> An object of class \"MizerParams\"  #> Consumer size spectrum: #> \tminimum size:\t0.001 #> \tmaximum size:\t39851.3 #> \tno. size bins:\t100 #> Resource size spectrum: #> \tminimum size:\t2.12182e-13 #> \tmaximum size:\t9.82091 #> \tno. size bins:\t179\t(226 size bins in total) #> Species details: #>    species   w_inf w_mat w_min  f0  k_vb   beta sigma #> 1    Sprat    33.0    13 0.001 0.6 0.681  51076   0.8 #> 2  Sandeel    36.0     4 0.001 0.6 1.000 398849   1.9 #> 3   N.pout   100.0    23 0.001 0.6 0.849     22   1.5 #> 4  Herring   334.0    99 0.001 0.6 0.606 280540   3.2 #> 5      Dab   324.0    21 0.001 0.6 0.536    191   1.9 #> 6  Whiting  1192.0    75 0.001 0.6 0.323     22   1.5 #> 7     Sole   866.0    78 0.001 0.6 0.284    381   1.9 #> 8  Gurnard   668.0    39 0.001 0.6 0.266    283   1.8 #> 9   Plaice  2976.0   105 0.001 0.6 0.122    113   1.6 #> 10 Haddock  4316.5   165 0.001 0.6 0.271    558   2.1 #> 11     Cod 39851.3  1606 0.001 0.6 0.216     66   1.3 #> 12  Saithe 39658.6  1076 0.001 0.6 0.175     40   1.1 #>  #> Fishing gear details: #> Gear          Effort  Target species  #>  ---------------------------------- #> Industrial     0.00   Sprat, Sandeel, N.pout  #> Pelagic        1.00   Herring  #> Beam           0.50   Dab, Sole, Plaice  #> Otter          0.50   Whiting, Gurnard, Haddock, Cod, Saithe"},{"path":"https://sizespectrum.org/mizer/dev/reference/summary-MizerSim-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize MizerSim object — summary,MizerSim-method","title":"Summarize MizerSim object — summary,MizerSim-method","text":"Outputs general summary structure content object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/summary-MizerSim-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize MizerSim object — summary,MizerSim-method","text":"","code":"# S4 method for MizerSim summary(object, ...)"},{"path":"https://sizespectrum.org/mizer/dev/reference/summary-MizerSim-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize MizerSim object — summary,MizerSim-method","text":"object MizerSim object. ... arguments (currently used).","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/summary-MizerSim-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize MizerSim object — summary,MizerSim-method","text":"","code":"summary(NS_sim) #> An object of class \"MizerSim\"  #> Parameters: #> An object of class \"MizerParams\"  #> Consumer size spectrum: #> \tminimum size:\t0.001 #> \tmaximum size:\t39851.3 #> \tno. size bins:\t100 #> Resource size spectrum: #> \tminimum size:\t8.72744e-13 #> \tmaximum size:\t9.82091 #> \tno. size bins:\t171\t(218 size bins in total) #> Species details: #>    species   w_inf w_mat w_min  k_vb   beta sigma #> 1    Sprat    33.0    13 0.001 0.681  51076   0.8 #> 2  Sandeel    36.0     4 0.001 1.000 398849   1.9 #> 3   N.pout   100.0    23 0.001 0.849     22   1.5 #> 4  Herring   334.0    99 0.001 0.606 280540   3.2 #> 5      Dab   324.0    21 0.001 0.536    191   1.9 #> 6  Whiting  1192.0    75 0.001 0.323     22   1.5 #> 7     Sole   866.0    78 0.001 0.284    381   1.9 #> 8  Gurnard   668.0    39 0.001 0.266    283   1.8 #> 9   Plaice  2976.0   105 0.001 0.122    113   1.6 #> 10 Haddock  4316.5   165 0.001 0.271    558   2.1 #> 11     Cod 39851.3  1606 0.001 0.216     66   1.3 #> 12  Saithe 39658.6  1076 0.001 0.175     40   1.1 #>  #> Fishing gear details: #> Gear          Effort  Target species  #>  ---------------------------------- #> Sprat          0.00   Sprat  #> Sandeel        0.00   Sandeel  #> N.pout         0.00   N.pout  #> Herring        1.81   Herring  #> Dab            0.76   Dab  #> Whiting        0.63   Whiting  #> Sole           0.91   Sole  #> Gurnard        0.00   Gurnard  #> Plaice         0.76   Plaice  #> Haddock        0.56   Haddock  #> Cod            0.68   Cod  #> Saithe         0.53   Saithe  #> Simulation parameters: #> \tTime period: 1967 to 2010 #> \tOutput stored every 1 years"},{"path":"https://sizespectrum.org/mizer/dev/reference/summary_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Description of summary functions — summary_functions","title":"Description of summary functions — summary_functions","text":"Mizer provides range functions summarise results simulation.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/summary_functions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Description of summary functions — summary_functions","text":"list available summary functions given table .","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/truncated_lognormal_pred_kernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncated lognormal predation kernel — truncated_lognormal_pred_kernel","title":"Truncated lognormal predation kernel — truncated_lognormal_pred_kernel","text":"like lognormal_pred_kernel() imposed maximum predator/prey mass ratio","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/truncated_lognormal_pred_kernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncated lognormal predation kernel — truncated_lognormal_pred_kernel","text":"","code":"truncated_lognormal_pred_kernel(ppmr, beta, sigma)"},{"path":"https://sizespectrum.org/mizer/dev/reference/truncated_lognormal_pred_kernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncated lognormal predation kernel — truncated_lognormal_pred_kernel","text":"ppmr vector predator/prey size ratios beta preferred predator/prey size ratio sigma width parameter log-normal kernel","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/truncated_lognormal_pred_kernel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Truncated lognormal predation kernel — truncated_lognormal_pred_kernel","text":"vector giving value predation kernel predator/prey mass ratios ppmr argument.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/truncated_lognormal_pred_kernel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Truncated lognormal predation kernel — truncated_lognormal_pred_kernel","text":"Writing predator mass \\(w\\) prey mass \\(w_p\\), feeding kernel given $$\\phi_i(w, w_p) =  \\exp \\left[ \\frac{-(\\ln(w / w_p / \\beta_i))^2}{2\\sigma_i^2} \\right] $$ \\(w/w_p\\) 1 \\(\\beta_i\\exp(3\\sigma_i)\\) zero otherwise. \\(\\beta_i\\) preferred predator-prey mass ratio \\(\\sigma_i\\) determines width kernel. two parameters need given species parameter dataframe columns beta sigma. function called setPredKernel() set predation kernel slots MizerParams object.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/upgradeParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Upgrade MizerParams object from earlier mizer versions — upgradeParams","title":"Upgrade MizerParams object from earlier mizer versions — upgradeParams","text":"Occasionally development new features mizer, MizerParams object gains extra slots. MizerParams objects created older versions mizer longer valid new version missing slots. need upgrade   params replaced name MizerParams object. function adds missing slots fills default values. object version 0.4 onwards can upgraded. old MizerSim objects similarly updated upgradeSim(). function uses newMultispeciesParams() create new MizerParams object using parameters extracted old MizerParams object.","code":"params <- upgradeParams(params)"},{"path":"https://sizespectrum.org/mizer/dev/reference/upgradeParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upgrade MizerParams object from earlier mizer versions — upgradeParams","text":"","code":"upgradeParams(params)"},{"path":"https://sizespectrum.org/mizer/dev/reference/upgradeParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upgrade MizerParams object from earlier mizer versions — upgradeParams","text":"params old MizerParams object upgraded","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/upgradeParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upgrade MizerParams object from earlier mizer versions — upgradeParams","text":"upgraded MizerParams object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/upgradeParams.html","id":"backwards-compatibility","dir":"Reference","previous_headings":"","what":"Backwards compatibility","title":"Upgrade MizerParams object from earlier mizer versions — upgradeParams","text":"internal numerics mizer changed time, may small discrepancies results obtained upgraded object new version original object old version. important reproduce exact results install version mizer obtained results. can   replace \"v0.2\" version number require. can see list available releases https://github.com/sizespectrum/mizer/tags. serialised version old object, example created via saveRDS(), get error trying read readRDS() unfortunately need install old version mizer first read params object workspace, switch current version call upgradeParams(). can save new version saveRDS().","code":"remotes::install_github(\"sizespectrum/mizer\", ref = \"v0.2\")"},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/upgradeSim.html","id":null,"dir":"Reference","previous_headings":"","what":"Upgrade MizerSim object from earlier mizer versions — upgradeSim","title":"Upgrade MizerSim object from earlier mizer versions — upgradeSim","text":"Occasionally, development new features mizer, MizerSim class MizerParams class gains extra slots. MizerSim objects created older versions mizer longer valid new version missing slots. need upgrade   sim replaced name MizerSim object.","code":"sim <- upgradeSim(sim)"},{"path":"https://sizespectrum.org/mizer/dev/reference/upgradeSim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upgrade MizerSim object from earlier mizer versions — upgradeSim","text":"","code":"upgradeSim(sim)"},{"path":"https://sizespectrum.org/mizer/dev/reference/upgradeSim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upgrade MizerSim object from earlier mizer versions — upgradeSim","text":"sim old MizerSim object upgraded","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/upgradeSim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upgrade MizerSim object from earlier mizer versions — upgradeSim","text":"upgraded MizerSim object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/upgradeSim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Upgrade MizerSim object from earlier mizer versions — upgradeSim","text":"function adds missing slots fills default values. calls upgradeParams() upgrade MizerParams object inside MizerSim object. object version 0.4 onwards can upgraded.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/upgradeSim.html","id":"backwards-compatibility","dir":"Reference","previous_headings":"","what":"Backwards compatibility","title":"Upgrade MizerSim object from earlier mizer versions — upgradeSim","text":"internal numerics mizer changed time, may small discrepancies results obtained upgraded object new version original object old version. important reproduce exact results install version mizer obtained results. can   replace \"v0.2\" version number require. can see list available releases https://github.com/sizespectrum/mizer/tags. serialised version old object, example created via saveRDS(), get error trying read readRDS() unfortunately need install old version mizer first read params object workspace, switch current version call upgradeParams(). can save new version saveRDS().","code":"remotes::install_github(\"sizespectrum/mizer\", ref = \"v0.2\")"},{"path":"https://sizespectrum.org/mizer/dev/reference/validGearParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Check validity of gear parameters and set defaults — validGearParams","title":"Check validity of gear parameters and set defaults — validGearParams","text":"function returns valid gear parameter data frame can used setFishing() gives error message.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/validGearParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check validity of gear parameters and set defaults — validGearParams","text":"","code":"validGearParams(gear_params, species_params)"},{"path":"https://sizespectrum.org/mizer/dev/reference/validGearParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check validity of gear parameters and set defaults — validGearParams","text":"gear_params Gear parameter data frame species_params Species parameter data frame","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/validGearParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check validity of gear parameters and set defaults — validGearParams","text":"valid gear parameter data frame","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/validGearParams.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check validity of gear parameters and set defaults — validGearParams","text":"gear_params data frame allowed zero rows, rows, following requirements apply: must columns species gear species - gear pair allowed appear . species appears must also appear species_params data frame. must sel_func column. selectivity function supplied, set \"knife_edge\". must catchability column. catchability supplied, set 1. parameters required selectivity functions must provided. gear_params empty, function tries find necessary information species_params data frame. restricts species fished one gear. Defaults used information can found species_params dataframe, follows: gear column NA new gear named species introduced. sel_func column NA knife_edge used. catchability column NA set 1. selectivity function knife_edge knife_edge_size provided, set w_mat. row names returned data frame form \"species, gear\". gear_params NULL gear information species_params, gear called knife_edge_gear set knife_edge selectivity species knive_edge_size equal w_mat. Catchability set 0.3 species.","code":""},{"path":[]},{"path":"https://sizespectrum.org/mizer/dev/reference/validParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate MizerParams object and upgrade if necessary — validParams","title":"Validate MizerParams object and upgrade if necessary — validParams","text":"Validate MizerParams object upgrade necessary","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/validParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate MizerParams object and upgrade if necessary — validParams","text":"","code":"validParams(params)"},{"path":"https://sizespectrum.org/mizer/dev/reference/validParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate MizerParams object and upgrade if necessary — validParams","text":"params MizerParams object validate","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/validParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate MizerParams object and upgrade if necessary — validParams","text":"valid MizerParams object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/validSpeciesParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate species parameter data frame — validSpeciesParams","title":"Validate species parameter data frame — validSpeciesParams","text":"Check validity species parameters set defaults missing required parameters","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/validSpeciesParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate species parameter data frame — validSpeciesParams","text":"","code":"validSpeciesParams(species_params)"},{"path":"https://sizespectrum.org/mizer/dev/reference/validSpeciesParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate species parameter data frame — validSpeciesParams","text":"species_params user-supplied species parameter data frame","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/validSpeciesParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate species parameter data frame — validSpeciesParams","text":"valid species parameter data frame function throws error species column exist contains duplicates w_inf column exist contains NAs numeric sets default values following missing NA w_mat set w_inf/4 w_min set 0.001 alpha set 0.6 interaction_resource set 1 w_mat given smaller w_inf set w_inf / 4. w_mat25 given smaller w_mat set w_mat * 3^(-0.1). row names returned data frame species names. species_params provided tibble converted back ordinary data frame.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/valid_species_arg.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to assure validity of species argument — valid_species_arg","title":"Helper function to assure validity of species argument — valid_species_arg","text":"species argument contains invalid species, ignored warning issued.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/valid_species_arg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to assure validity of species argument — valid_species_arg","text":"","code":"valid_species_arg(object, species = NULL, return.logical = FALSE)"},{"path":"https://sizespectrum.org/mizer/dev/reference/valid_species_arg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to assure validity of species argument — valid_species_arg","text":"object MizerSim MizerParams object species selected. species species selected. Optional. default target species selected. vector species names, numeric vector species indices, logical vector indicating species whether selected (TRUE) . return.logical Whether return value logical vector. Default FALSE.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/valid_species_arg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to assure validity of species argument — valid_species_arg","text":"vector species names, order specified 'species' argument. 'return.logical = TRUE' logical vector returned instead, length equal number species, TRUE entry selected species.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/w.html","id":null,"dir":"Reference","previous_headings":"","what":"Size bins — w","title":"Size bins — w","text":"Functions fetch information size bins used model described params.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/w.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Size bins — w","text":"","code":"w(params)  w_full(params)  dw(params)  dw_full(params)"},{"path":"https://sizespectrum.org/mizer/dev/reference/w.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Size bins — w","text":"params MizerParams object","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/w.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Size bins — w","text":"w() returns vector sizes start size bin consumer spectrum. w_full() returns vector sizes start size bin resource spectrum, typically starts smaller sizes consumer spectrum. dw() returns vector widths size bins consumer spectrum. dw_full() returns vector widths size bins resource spectrum.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/w.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Size bins — w","text":"represent continuous size spectrum computer, size variable discretized vector w discrete weights, providing grid sizes spanning range smallest egg size largest asymptotic size. grid values divide full size range finite number size bins. size bins chosen small enough avoid discretisation errors becoming big. can fetch vector w() vector bin widths dw(). weight grid set logarithmically spaced, w[j]=w[1]*10^(j*dx) fixed dx. means bin widths increase size: dw[j] = w[j] * (10^dx - 1). grid set automatically creating MizerParams object. resource spectrum spans larger range sizes, sizes discretized different vector weights w_full. usually starts much smaller size w, also runs largest size, last entries w_full coincide entries w. logarithmic spacing w_full w, w_full[j]=w_full[1]*10^(j*dx). function w_full() gives vector sizes dw_full() gives vector bin widths. need vectors converting number densities numbers. example size spectrum species stored vector values represent density fish size bin rather number fish. number fish size bin w[j] w[j+1]=w[j]+dw[j] obtained N[j]*dw[j]. vector w can used example convert number individuals size bin biomass size bin. biomass jth bin biomass[j] = N[j] * dw[j] * w[j]. course calculations discrete sizes size bins giving approximations continuous values, approximations get better smaller size bins , .e., size bins used. However using size bins also slows calculations, trade-. functions setting MizerParams objects allow choose number size bins no_w.","code":""},{"path":"https://sizespectrum.org/mizer/dev/reference/w.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Size bins — w","text":"","code":"str(w(NS_params)) #>  num [1:100] 0.001 0.00119 0.00142 0.0017 0.00203 ... str(dw(NS_params)) #>  num [1:100] 0.000193 0.000231 0.000275 0.000329 0.000392 ... str(w_full(NS_params)) #>  num [1:226] 2.12e-13 2.53e-13 3.02e-13 3.61e-13 4.30e-13 ... str(dw_full(NS_params)) #>  num [1:226] 4.10e-14 4.90e-14 5.84e-14 6.97e-14 8.32e-14 ...  # Calculating the biomass of Cod in each bin in the North Sea model biomass <- initialN(NS_params)[\"Cod\", ] * dw(NS_params) * w(NS_params) # Summing to get total biomass sum(biomass) #> [1] 601591842546"},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"mizer-development-version","dir":"Changelog","previous_headings":"","what":"mizer (development version)","title":"mizer (development version)","text":"Improved defaults can now implemented keeping backwards compatibility via defaults_edition(). entries interaction matrix interaction_resource longer restricted less equal 1. #232 user supplies row names interaction matrix give column names column names also used row names. #247","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"mizer-231","dir":"Changelog","previous_headings":"","what":"mizer 2.3.1","title":"mizer 2.3.1","text":"CRAN release: 2022-07-06 Resolved conflict mizerPredRate() argument t function base::t(). Assert upgradeParams() must called MizerParams object upgradeSim() MizerSim object. Errors changed warnings getRequiredRDD() renameSpecies() longer fails linecolour linetype different lengths. matchYields() now also works model single species. setInitialValues() can now average time_range. getSSB(), getBiomass(), getN(), getYieldGear() getYield() can now called MizerParams object well MizerSim object. (#200) Updated shiny app inst/shiny/selectivity_effects current mizer version.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"mizer-230","dir":"Changelog","previous_headings":"","what":"mizer 2.3.0","title":"mizer 2.3.0","text":"CRAN release: 2021-09-11","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"new-features-2-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"mizer 2.3.0","text":"New plots plotBiomassObservedVsModel() plotYieldObservedVsModel() contributed @SamikDatta., together plotly counterparts. New calibrateBiomass(), calibrateYield() set model scale agree total observed biomass total observed yield. Uses new scaleModel(). New matchBiomasses() matchYields() try adjust abundances species produce observed biomasses yields. See blog post https://bit.ly/2YqXESV . now accessor replacement functions rates. example instead params <- setReproduction(params, maturity = my_maturity) one can simply use maturity(params) <- my_maturity. documented together setter functions. #213 New setMetadata() add information MizerParams object describing model, example title, description, author list authors, url doi. particularly useful sharing models others New saveParams() saving MizerParams object file readParams() reading back . resulting files can shared others want run model. MizerParams object now registers mizer version model last saved. model working expected current version mizer, can go back older version presumably working. helps reproducibility research. MizerParams object registers time created time last modified. See getMetadata(). helps keep track different versions model. steady() now preserve argument possible values erepro, R_max reproduction_level specify quantity preserve. means one can continue use steady() also one started tune density dependence reproduction. #208 website now using nice new mizer logo designed Kira Askaroff (www.kiraaskaroff.com) new mizer extension package mizerMR allowing include multiple resource spectra model.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"small-improvements-2-3-0","dir":"Changelog","previous_headings":"","what":"Small improvements","title":"mizer 2.3.0","text":"rownames gear_params now set “species, gear”, one can access individual entries example gear_params(NS_params)[\"Cod, Otter\", \"catchability\"]. #212 z0 argument setExtMort() deprecated favour ext_mort order avoid confusion species parameter z0. setColours() setLinetypes() now issue warnings invalid values given ignores NAs. experimental comment arguments setter functions removed. #214 setter functions new reset argument , set TRUE recalculate rates species_, gear_ resource_params even custom values set. #214 species argument various functions, checked valid_species_arg(), now throw error even valid species included. warning issued. means example plotSpectra(NS_params, species = list(), total = TRUE) now allowed. getComponent() mizer extension mechanism now returns NULL asked non-existent component instead giving error. gives easy way check existence component. example interaction matrix inter North Sea model now alternative name NS_interaction, old name deprecated. Species added addSpecies() now default given reproduction level 1/4 instead 0, low densities introduced otherwise enough density dependence stabilise . size range arguments min_w, max_w, min_l max_l used summary functions processed get_size_range_array() accept vector values setting different limits different species. resource dynamics function now also passed resource_rate resource_capacity arguments, makes easier use extension packages. Species names now always coerced strings, even user gives numbers. #202 new system informing user defaults set newMultispeciesParams(), #199 Many improvements documentation. Many small improvements code quality testing. Better social media cards, especially twitter. mizer can run binder, https://mybinder.org/v2/gh/sizespectrum/mizer/HEAD?urlpath=rstudio","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"bug-fixes-2-3-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"mizer 2.3.0","text":"Changing linecolour linetype species parameters now actually changes linecolours linetypes intended. Growth curves calculated getGrowthCurves() plotted plotGrowthCurves() now correct, longer extend asymptotic size. plotGrowthCurves() species_panel = TRUE now respects species argument show growth curves selected species, works MizerParams object well MizerSim object, shows panels correct order. #201 Reinstated example .csv files missing package vignettes longer included.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"mizer-221","dir":"Changelog","previous_headings":"","what":"mizer 2.2.1","title":"mizer 2.2.1","text":"CRAN release: 2021-08-03","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"new-functionality-2-2-1","dir":"Changelog","previous_headings":"","what":"New functionality","title":"mizer 2.2.1","text":"setBevertonHolt() function expanded arguments. allows change density dependence reproduction without changing steady state model. new getReproductionLevel() function tells proportion maximum reproduction rate species operating model. package now comes example MizerSim object NS_sim holds simulation North Sea model. New function plotDataFrame() allows easier creation plots.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"bug-fixes-2-2-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"mizer 2.2.1","text":"setInitialValues() correctly preserves gear names initial effort. Thanks Axel Rossberg. getFMort() correctly passes t argument custom fishing mortality function may written. legends plots now show species actually included plot.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"other-improvements-2-2-1","dir":"Changelog","previous_headings":"","what":"Other improvements","title":"mizer 2.2.1","text":"Speed improvement mizerPredMort() suggested Axel Rossberg. plotSpectra() now shows species legend actually contained plot. Updated tests plots use new version vdiffr package. improvements examples help pages. functions thorough tests arguments give useful error messages. initialNOther() also works MizerSim object. projectToSteady() called effort, effort now also stored initial_effort slot. Improvement summary() now using sprintf() better formatting also gives initial_effort. Improved documentation size grid bins. arguments project_simple() given convenient defaults. tooltips plotly plots cleaned bit. Species names now always coerced strings, even user supplies numeric names. Update “Multi-Species Model North Sea” tutorial use projectToSteady().","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"mizer-220","dir":"Changelog","previous_headings":"","what":"mizer 2.2.0","title":"mizer 2.2.0","text":"CRAN release: 2021-06-24","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"new-functionality-2-2-0","dir":"Changelog","previous_headings":"","what":"New functionality","title":"mizer 2.2.0","text":"New function newSingleSpeciesParams() creating single species power-law background. New function animateSpectra() creating animated plot simulation. New functions addSpecies(), removeSpecies() renameSpecies(). parameters ecosystem component added setComponent() can now take form, longer named list. New argument return_data plot’s functions allows return data frame used ggplot instead plot.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"breaking-changes-2-2-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"mizer 2.2.0","text":"steady() longer switches Beverton-Holt density dependence. can manually setBevertonHolt() R_factor = Inf.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"bug-fixes-2-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"mizer 2.2.0","text":"getYield() now also works density-dependent fishing mortality. Thanks James Roger discovering problem. gamma argument now longer ignored newTraitParams() correctly overrides f0 argument. #188 getFMort() works correctly called MizerSim object. resource_semichemostat() longer fail sizes resource growth rate resource mortality rate zero. default no_w newTraitParams() now always integer. Problems different machine precision longer prompts error “w_min_idx point start size bin containing egg size w_min”. `addSpecies() longer extends grid due rounding errors. valid_species_arg() called species = NULL background species returns NULL.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"documentation-2-2-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"mizer 2.2.0","text":"New tutorial single-species sizes-spectrum dynamics. Improved documentation getDiet() plotDiet(). info units added documentation summary functions.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"mizer-210","dir":"Changelog","previous_headings":"","what":"mizer 2.1.0","title":"mizer 2.1.0","text":"CRAN release: 2021-03-21","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"new-functionality-2-1-0","dir":"Changelog","previous_headings":"","what":"New functionality","title":"mizer 2.1.0","text":"New function projectToSteady() run full dynamics steady state. New functions distanceSSLogN() distanceMaxRelRDI() measure distance two states. New function compareParams() compare two MizerParams objects. Added constantEggRDI() allow keeping egg densities fixed. setting custom parameter arrays setter functions, now easy user document via “comment” arguments. #177 New function customFunction() allow users overwrite mizer functions. Now effort specified named vector giving values gears, effort remaining gears assumed zero. Added possibility see output plotGrowthCurves panel species respective Von Bertalanffy curves","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"breaking-changes-2-1-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"mizer 2.1.0","text":"default, functions plotPredMort() plotFMort stop displaying mortality values past species’ asymptotic size. argumentall.sizes allows continue show values.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"bug-fixes-2-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"mizer 2.1.0","text":"getFMort() now passes time argument correctly. #181 validEffortArray() now sets dimnames correctly. #173","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"code-improvements-2-1-0","dir":"Changelog","previous_headings":"","what":"Code improvements","title":"mizer 2.1.0","text":"Using lifecycle package indicate status functions arguments ‘experimental’ ‘deprecated’. Improved error handling setFishing(). #172 Made use vdiffr conditional, required §1.1.3.1 ‘Writing R Extensions’. Consistent handling species argument mizer functions, via new valid_species_arg() function. #170 tests. Test coverage now 94.71% Improved argument checking setInitialValues() Throwing error min_w_pp larger min_w Improved documentation functions getting fishing mortality.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"mizer-204","dir":"Changelog","previous_headings":"","what":"mizer 2.0.4","title":"mizer 2.0.4","text":"CRAN release: 2020-08-30","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"bug-fixes-2-0-4","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"mizer 2.0.4","text":"value t passed dynamics functions corrected. setReproduction() now correctly sets total proportion psi maturity proportion changed.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"enhancements-2-0-4","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"mizer 2.0.4","text":"way times set project() simplified. now either set arguments t_start, t_max t_save dimension names effort array. Renamed setRmax() setBevertonHolt() allow work arbitrary MizerParams object. old name setRmax() still available alias. mizerFMort() now can also use abundances rates e_growth pred_mort. useful example implementing balanced harvesting. calculation numeric scheme simplified. gear_params allowed zero rows. validGearParams() species name used gear name case gear_name NA. validGearParams() ensures required arguments selectivity function supplied checks validity species names. species_params()<- suppresses warnings. steady() fails RDI zero gives meaningful error message. newCommunityParams() now protects zero investment reproduction comment. default maturity ogive truncated proportions smaller 1e-8. new helper function valid_species_arg() checks validity species selection arguments. upgradeParams() can now also upgrade old MizerParams objects consistent initial_effort. new helper function validParams() validates MizerParams object automatically upgrades upgradeParams() necessary. Old MizerParams objects updated automatically used plot functions, rate functions, summary functions project() steady(), #163. New function getRates() calculates rates collects list. steady() return_sim = TRUE now creates MizerSim object way project(), namely original values first time slot. Added documentation species_params(), gear_params() resource_params(). Numerous small improvements documentation.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"mizer-203","dir":"Changelog","previous_headings":"","what":"mizer 2.0.3","title":"mizer 2.0.3","text":"CRAN release: 2020-07-28","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"bug-fixes-2-0-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"mizer 2.0.3","text":"Correct handling shiny progress bar project().","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"enhancements-2-0-3","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"mizer 2.0.3","text":"Consistently passing time argument rate functions. allow extensions implement time-dependent rates. Passing growth mortality rate RDI function. Simplified getRates() functions removing arguments passed rates. Instead required rates now always calculated within functions. Improved documentation rate functions register rate functions. validGearParams() handle NAs gracefully check duplicates. Updated hake-mullet selectivity demonstration shiny app. Improved user documentation several places.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"mizer-202","dir":"Changelog","previous_headings":"","what":"mizer 2.0.2","title":"mizer 2.0.2","text":"CRAN release: 2020-06-08","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"bug-fixes-2-0-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"mizer 2.0.2","text":"Time passed rate functions now actual simulation time, time elapsed since start simulation. upgradeParams() works also params objects created development version mizer. upgrading older params object, upgradeParams() better job guessing value w_pp_cutoff. getFeedingLevel(), getPredMort(), setInitialValues() steady() now work also model extra components. critical feeding level lines now mentioned legend plotFeedinglevel() called include_critical = TRUE, see #162. Avoid annoying warnings dplyr package species_params tibble.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"name-changes-2-0-2","dir":"Changelog","previous_headings":"","what":"Name changes","title":"mizer 2.0.2","text":"Renamed functions params(), effort() times() getParams(), getEffort() getTimes() avoid conflicts.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"minor-enhancements-2-0-2","dir":"Changelog","previous_headings":"","what":"Minor enhancements","title":"mizer 2.0.2","text":"improvements documentation. unit tests. Uses less memory time step small creating array effort values time step. getDiet() also takes account possible contributions user-defined components. extension mechanism, now name component also passed functions implementing dynamics, encounter mortality. project() called t_max < t_save t_save automatically reduced result t_max get saved. Start showing progress bar earlier project(). New helper function project_simple() projects given number time steps. might useful extension writers. ... argument project() passed dynamics rate functions. steady() runs faster using project_simple(). Documentation mizer website now search bar.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"mizer-201","dir":"Changelog","previous_headings":"","what":"mizer 2.0.1","title":"mizer 2.0.1","text":"CRAN release: 2020-05-05","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"bug-fixes-2-0-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"mizer 2.0.1","text":"summary() now also works non-default feeding kernels. #159 validSpeciesParams() longer fails w_mat25 specified. #160 setInitialValues() also works model single species. #161 resource_params()<- now works unit tests.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"name-changes-2-0-1","dir":"Changelog","previous_headings":"","what":"Name changes","title":"mizer 2.0.1","text":"inconsistencies choice names parameters removed renaming interaction_p -> interaction_resource r_resource -> resource_rate K_resource -> resource_capacity","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"minor-enhancements-2-0-1","dir":"Changelog","previous_headings":"","what":"Minor enhancements","title":"mizer 2.0.1","text":"New functions other_params()<- other_params() setting getting parameters, example used user-defined rate functions. setInitialValues() also sets initial_effort. #157","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"mizer-200","dir":"Changelog","previous_headings":"","what":"mizer 2.0.0","title":"mizer 2.0.0","text":"CRAN release: 2020-04-04 major new release many new features, internal refactoring code new extension mechanism.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"backwards-compatibility-2-0-0","dir":"Changelog","previous_headings":"","what":"Backwards compatibility","title":"mizer 2.0.0","text":"Nevertheless version mizer almost fully backwards compatible version 1.0 exception bug fixes following breaking changes: previous version mizer inconsistently truncated lognormal predation kernel calculating predation calculating encounter. new version never truncates. leads small differences simulation results. Removed print_it argument plot functions. plotFeedingLevel() now plots values within size range species. reason want old plots show feeding level also sizes fish can never , need supply argument .sizes = TRUE. way density-dependence reproduction rate set changed, see RDD argument setReproduction(). sex_ratio argument removed getRDI() getRDD(). set_scaling_model() function removed models can now set newTraitParams() options perfect_scaling = TRUE egg_size_scaling = TRUE. functions display_frames(), addSpecies(), setBackground() retuneAbundance() removed “mizerExperimental” package (https://sizespectrum.org/mizerExperimental/) runs project() progress bar displayed default. can turn option `progress_bar = FALSE. Throughout mizer term “plankton” replaced “resource”, affects labelling resource spectrum plots.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"setting-up-models-2-0-0","dir":"Changelog","previous_headings":"","what":"Setting up models","title":"mizer 2.0.0","text":"new functions newCommunityParams() newTraitParams() newMultispeciesParams() replace old functions set_community_model(), set_trait_model() MizerParams(), now deprecated. new functions choose better default values, particular metabolic rate maximum intake rate.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"setting-model-parameters-2-0-0","dir":"Changelog","previous_headings":"","what":"Setting model parameters","title":"mizer 2.0.0","text":"setting mizer model, possible change specific model parameters new functions species_params<-() resource_params<-() gear_params<-() setPredKernel() setSearchVolume() setInteraction() setMaxIntakeRate() setMetabolicRate() setExtMort() setReproduction() setFishing() setResource() new function setParams() wrapper functions also used setting new model newMultispeciesParams(). (#51) documentation functions serves explain details mizer model. Along setter functions accessor functions getting parameter arrays: getPredKernel(), getSearchVolume(), getInteraction(), getMaxIntakeRate(), getMetabolicRate(), getExtMort(), getMaturityProportion(), getReproductionProportion(), getCatchability(), getSelectivity(), getResourceRate(), getResourceCapacity(), getResourceParams(), getResourceDynamics(), Setting maximum reproduction rate separated new function setRmax().","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"initial-values-and-steady-state-2-0-0","dir":"Changelog","previous_headings":"","what":"Initial Values and steady state","title":"mizer 2.0.0","text":"MizerParams object now also contains initial values size spectra. particularly useful model tuned produce observed steady state. new function steady() finds steady state model sets initial value. initial values can accessed changed via functions initialN() initialNResource(). initial values can set final values previous simulation setInitialValues(). MizerParams object now slot initial_effort specifies initial fishing effort steady state calibrated.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"extension-mechanisms-2-0-0","dir":"Changelog","previous_headings":"","what":"Extension mechanisms","title":"mizer 2.0.0","text":"Mizer now extension mechanism allows R packages written generalise mizer model. See setRateFunction() setComponent(). mechanism still experimental may change gain experience writing extensions mizer.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"plotting-2-0-0","dir":"Changelog","previous_headings":"","what":"Plotting","title":"mizer 2.0.0","text":"Every plot function now plotly version makes plot interactive using plotly package. example plotlyBiomass() plotly version plotBiomass(), . New plotGrowthCurves() plots growth curves compares von Bertalanffy growth curve. New plotDiet() plots diet composition function predator size. New highlight argument plot functions display curves multiple species. Displays highlighted species wider lines. legends plots species now consistently ordered way species parameter data frame. plot functions time-resolved now accept also MizerParams object alternative MizerSim object plot initial state. New plot() method MizerParams object plot initial state. Avoiding duplicate graphs R Markdown documents. New argument include_critical plotFeedingLevel() allows show also critical feeding level. New wlim argument plotSpectra() analogy existing ylim argument limit w range plot. colours used plot functions can set setColours(). default line type solid can changed via setLinetypes() function. Use colour linetype plots irrespective number species.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"general-predation-kernel-2-0-0","dir":"Changelog","previous_headings":"","what":"General predation kernel","title":"mizer 2.0.0","text":"Users can now replace lognormal function predation kernel function choice, allowing differently shaped kernel species. New box_pred_kernel() implements box-shaped kernel alternative default lognormal_pred_kernel(). New power_law_pred_kernel() implements power-law kernel sigmoidal cutoffs ends. suitable filter feeders. Users can sets predation kernel predator-size-dependent predator/prey mass ration (via setPredKernel()). Mizer automatically falls back old non-FFT code handle . (#41) New getPredKernel() returns full 3-dimensional predation kernel array, even stored MizerParams object.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"new-gear-setup-2-0-0","dir":"Changelog","previous_headings":"","what":"New gear setup","title":"mizer 2.0.0","text":"Now finally possible several gears (fleets) targeting species. information set via new gear_params() data frame. See setFishing() details.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"other-new-functions-2-0-0","dir":"Changelog","previous_headings":"","what":"Other new functions","title":"mizer 2.0.0","text":"now accessor functions slots MizerParams MizerSim objects. example get size grid spacing now use w(), w_full(), dw(), dw_full(). New upgradeParams() upgradeSim() can upgrade objects previous versions mizer work new version. New getDiet() calculates diet predators. (#43) Alternative functions RickerRDD() SheperdRDD() density-dependence reproduction, well noRDD() constantRDD(). New gear selectivity function double_sigmoid_length() allows modelling escape large individuals. New gear selectivity function sigmoidal_weight() weight-based trawl selectivity function. (Ken H Andersen) New getGrowthCurves() calculates growth curves (size age). New mizerRates() calculates rates needed model collects list. convenience function times() extract times simulation results saved MizerSim object. Convenience functions finalN(), finalNResource() finalNOther() well idxFinalT() access values final time simulation. New function getCriticalFeedingLevel() returns critical feeding level species size. Mizer reexports melt() function reshape2 package allows users convert arrays returned mizer functions data frames can used example ggplot2 plotly. validSpeciesParams() checks validity species parameter data frame sets defaults missing required parameters.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"other-new-features-2-0-0","dir":"Changelog","previous_headings":"","what":"Other new features","title":"mizer 2.0.0","text":"allometric exponents n, p q well feeding level f0 can now set species level via columns species_params. critical feeding level fc can now specified species parameter used calculate metabolic rate parameter ks supplied. project() now shows progress bar simulation running. Can turned progress_bar = FALSE argument. Satiation can switched setting maximum intake rate Inf. Users can now set resource dynamics instead default resource_semichemostat(). Different species can interact resource different strengths, feed resource , controlled interaction_resource column species parameter data frame. steepness maturity ogive can now controlled via w_mat25 column species parameter dataframe, gives size 25% individuals species mature. scaling exponent allocation energy reproduction can now set via m column species parameter data frame. project() can now continue projection last time step previous simulation first argument MizerSim object. new append argument controls whether new results appended old. Values minimum resource size, minimum maximum consumer sizes set automatically provided newMultispeciesParams(). Default values species parameters used missing values within column species parameter data frame, column missing entirely. Rate functions take defaults n, n_pp n_other arguments initial values params argument. New perfect_scaling argument allows newTraitParams() produce perfectly scale-invariant model. new ext_mort_prop argument newTraitParams() allows inclusion external mortality. Added data fileNS_params North Sea model MizerParams object. Comments can added MizerParams objects slots. Slots comments protected overwritten allometric defaults. Gear selectivity functions now can use species parameters.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"documentation-2-0-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"mizer 2.0.0","text":"Mizer now documentation website https://sizespectrum.org/mizer/ latest released version https://sizespectrum.org/mizer/dev/ development version. (#48) help pages mizer functions extended massively, see example help newMultispeciesParams(). vignette chapters shown pages website. html help pages plotting functions now show example plots. Clarified mizer uses grams years size time units agnostic whether abundances per area, per volume per study area. (#42) Added tutorial using ggplot2 plotly mizer. Added tutorial working git GitHub mizer development. Added FAQ page developers. Added unit test automatically run spell check documentation. getmM2() -> getPredMort() plotM2 -> plotPredMort() getM2background() -> getResourceMort() getZ() -> getMort() getESpawning() -> getERepro() MizerParams() -> emptyParams() set_multispecies_model() Renamed maximum reproductive rate r_max R_max. Updated list publications (@Kenhasteandersen) Using R Markdown roxygen comments.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"bug-fixes-2-0-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"mizer 2.0.0","text":"getSSB(), calculation spawning stock biomass done correctly using maturity ogive instead proportion energy allocated reproduction. (#47) fast FFT method old method calculating integrals now give numerical results. (#39) getEncounter() getPredRate() now set names returned arrays. Resource carrying capacity scale-invariant model calculated way reduces rounding errors. Avoids potential problems negative numbers due numerical errors. Consistently cutting predation kernel 0 beta + 3 sigma. ylim argument handled correctly plots. display_frame() now exported. plotGrowthCurves() getGrowthCurves() also works single species t_start argument project() used correctly times truncated 3 significant figures, allow something like 2019. get_initial_n() gets values n q params object summary() MizerParams object reflects number non-empty resource bins. (@patricksykes)","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"under-the-hood-2-0-0","dir":"Changelog","previous_headings":"","what":"Under the hood","title":"mizer 2.0.0","text":"Now using vdiffr package test plots. Converted S4 methods functions decrease learning curve new developers. calculation defaults now handled new get_gamma_default(), get_h_default() get_ks_default(), making easier change extend future. Helper function set_species_param_default() makes easier set default values species parameters. Simplified FFT calculations readable. Using @inherit functionality roxygen2 reduce duplication roxygen documentation. Using `@family’ group function documentation pages. helper functions now documented exported. getPhiPrey() replaced getEncounter() now returns full encounter rate, including contribution components. Even absence components, getEncounter() differs old getPhiPrey() includes search volume factor. Changed naming convention: user-facing function names now camelCase. Consistently use params refer argument class MizerParams, sim refer argument class MizerSim, object argument can either. Updated calls setClass() follow new guidelines, replacing representation class removing prototype validity. Added numerical tests. Using assert_that check arguments functions often. Argument shiny_progress renamed progress_bar control type progress bar. documentation renamed “background” “plankton” consistently “resource”. Using outer() instead tapply() possible improve readability. Avoiding use hasArg() anyNA() available R 3.1 robust code setting size grids. Improved consistency issue warnings issue messages. Split large code files smaller files. Merged @std_metab @activity slots single @metab slot. Moved @w_min_idx @species_params slot. Added slot @maturity hold maturity ogive. Added slot @pred_kernel hold predation kernel variable predator/prey ratio. Added slot @resource_dynamics allow user specify alternative resource dynamics. Added slot @gear_dynamics species targeted multiple gears. Added slot @ft_mask used calculating predation rates using Fourier transform method. Added slot @rates_funcs allow mizer extensions replace mizer rate functions rate functions. Instead function slot @srr now name function @rate_funcs$RDD, see #91. Added slots @other_dynamics, @other_params, @other_encounter, @other_mort @initial_n_other allow mizer extensions add ecosystem components.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"mizer-101","dir":"Changelog","previous_headings":"","what":"mizer 1.0.1","title":"mizer 1.0.1","text":"CRAN release: 2019-01-27 Now compatible older versions R > 3.1.0. Skipping test CRAN fails machines different precision. Fixing minor typos documentation.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"mizer-10","dir":"Changelog","previous_headings":"","what":"mizer 1.0","title":"mizer 1.0","text":"CRAN release: 2018-05-01 Fixed bugs start time simulation handled. leads small corrections, output version slightly different previous versions. Introduced scale-invariant trait-based model, set set_scaling_model(), see section 12 vignette. Added function adds news species scale-invariant background, computes approximately steady state close power law, see section 13 vignette. Created example shiny app allow people use mizer web browser without install mizer. app explores effect selective fishing gear case study. Added units axes Added function plotting growth curves PlotYield() longer fails species names numbers species abundance zero Added total parameter several plot functions add curve total community (sum species resource) Added species parameter plot functions allow selection species plotted Allow number ticks y-axis biomass plot controlled Allow size- species-dependent background death. Add @initial_n @initial_n_pp slots MizerParams class. Now checking effort times increasing. Corrections documentation. Improvements vignette. Add test numeric solution analytic solution.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"mizer-04","dir":"Changelog","previous_headings":"","what":"mizer 0.4","title":"mizer 0.4","text":"CRAN release: 2017-12-14 Improvements made speed evaluating convolution sums via fft, removing bottlenecks getPhiPrey() getPredRate(). Using C++ inner loop project method extra speed. Minor corrections vignette documentation bring alignment document new home GitHub new maintainers.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"mizer-03","dir":"Changelog","previous_headings":"","what":"mizer 0.3","title":"mizer 0.3","text":"Improvements made speed simulations. Remaining bottle necks sweep statements getPhiPrey() getPredRate(). Moved tests new suggested folder. Minor changes documentation pass new check requirements.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"mizer-02","dir":"Changelog","previous_headings":"","what":"mizer 0.2","title":"mizer 0.2","text":"CRAN release: 2014-04-16 Release coincide submission MEE paper. major changes. Just minor bug fixes.","code":""},{"path":"https://sizespectrum.org/mizer/dev/news/index.html","id":"mizer-01","dir":"Changelog","previous_headings":"","what":"mizer 0.1","title":"mizer 0.1","text":"CRAN release: 2013-10-08 Beta release - just works still gremlins sort . number features ’d like add coming releases.","code":""}]
